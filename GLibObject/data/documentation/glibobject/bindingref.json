{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever the source property changes, the same value is applied to the"},{"type":"text","text":" "},{"type":"text","text":"target property; for instance, the following binding:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  g_object_bind_property (object1, \"property-a\",","                          object2, \"property-b\",","                          G_BINDING_DEFAULT);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"will cause the property named “property-b” of "},{"type":"codeVoice","code":"object2"},{"type":"text","text":" to be updated"},{"type":"text","text":" "},{"type":"text","text":"every time "},{"type":"codeVoice","code":"g_object_set()"},{"type":"text","text":" or the specific accessor changes the value of"},{"type":"text","text":" "},{"type":"text","text":"the property “property-a” of "},{"type":"codeVoice","code":"object1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to create a bidirectional binding between two properties"},{"type":"text","text":" "},{"type":"text","text":"of two "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" instances, so that if either property changes, the"},{"type":"text","text":" "},{"type":"text","text":"other is updated as well, for instance:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  g_object_bind_property (object1, \"property-a\",","                          object2, \"property-b\",","                          G_BINDING_BIDIRECTIONAL);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"will keep the two properties in sync."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to set a custom transformation function (in both"},{"type":"text","text":" "},{"type":"text","text":"directions, in case of a bidirectional binding) to apply a custom"},{"type":"text","text":" "},{"type":"text","text":"transformation from the source value to the target value before"},{"type":"text","text":" "},{"type":"text","text":"applying it; for instance, the following binding:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["  g_object_bind_property_full (adjustment1, \"value\",","                               adjustment2, \"value\",","                               G_BINDING_BIDIRECTIONAL,","                               celsius_to_fahrenheit,","                               fahrenheit_to_celsius,","                               NULL, NULL);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"will keep the “value” property of the two adjustments in sync; the"},{"type":"text","text":" "},{"type":"codeVoice","code":"celsius_to_fahrenheit"},{"type":"text","text":" function will be called whenever the “value”"},{"type":"text","text":" "},{"type":"text","text":"property of "},{"type":"codeVoice","code":"adjustment1"},{"type":"text","text":" changes and will transform the current value"},{"type":"text","text":" "},{"type":"text","text":"of the property before applying it to the “value” property of "},{"type":"codeVoice","code":"adjustment2"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Vice versa, the "},{"type":"codeVoice","code":"fahrenheit_to_celsius"},{"type":"text","text":" function will be called whenever"},{"type":"text","text":" "},{"type":"text","text":"the “value” property of "},{"type":"codeVoice","code":"adjustment2"},{"type":"text","text":" changes, and will transform the"},{"type":"text","text":" "},{"type":"text","text":"current value of the property before applying it to the “value” property"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"adjustment1"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" does not resolve cycles by itself; a cycle like"}]},{"type":"codeListing","syntax":null,"code":["  object1:propertyA -> object2:propertyB","  object2:propertyB -> object3:propertyC","  object3:propertyC -> object1:propertyA"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"might lead to an infinite loop. The loop, in this particular case,"},{"type":"text","text":" "},{"type":"text","text":"can be avoided if the objects emit the "},{"type":"codeVoice","code":"GObject::notify"},{"type":"text","text":" signal only"},{"type":"text","text":" "},{"type":"text","text":"if the value has effectively been changed. A binding is implemented"},{"type":"text","text":" "},{"type":"text","text":"using the "},{"type":"codeVoice","code":"GObject::notify"},{"type":"text","text":" signal, so it is susceptible to all the"},{"type":"text","text":" "},{"type":"text","text":"various ways of blocking a signal emission, like "},{"type":"codeVoice","code":"g_signal_stop_emission()"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"g_signal_handler_block()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A binding will be severed, and the resources it allocates freed, whenever"},{"type":"text","text":" "},{"type":"text","text":"either one of the "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" instances it refers to are finalized, or when"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" instance loses its last reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Bindings for languages with garbage collection can use"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_binding_unbind()"},{"type":"text","text":" to explicitly release a binding between the source"},{"type":"text","text":" "},{"type":"text","text":"and target properties, instead of relying on the last reference on the"},{"type":"text","text":" "},{"type":"text","text":"binding, source, and target instances to drop."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" is available since GObject 2.26"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"BindingRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"codeVoice","code":"BindingProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"BindingRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glibobject\/bindingref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLibObject\/documentation\/GLibObject\/BindingProtocol","doc:\/\/GLibObject\/4GLib14PointerWrapperP","doc:\/\/GLibObject\/documentation\/GLibObject\/GWeakCapturing","doc:\/\/GLibObject\/documentation\/GLibObject\/ObjectProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" is the representation of a binding between a property on a"},{"type":"text","text":" "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" instance (or source) and another property on another "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" "},{"type":"text","text":"instance (or target)."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingRef"}],"title":"BindingRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:10GLibObject10BindingRefV","modules":[{"name":"GLibObject"}],"navigatorTitle":[{"kind":"identifier","text":"BindingRef"}]},"hierarchy":{"paths":[["doc:\/\/GLibObject\/documentation\/GLibObject"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-4t7wl","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-76590","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-791e9","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-7vk9n","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-9r2ew","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(cPointer:)","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(constPointer:)","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(gconstpointer:)","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(gpointer:)","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(mutating:)","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/ptr"]},{"title":"Type Methods","identifiers":["doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/unowned(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/BindingProtocol-Implementations","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/ObjectProtocol-Implementations","doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/PointerWrapper-Implementations"],"generated":true}],"references":{"doc://GLibObject/documentation/GLibObject/BindingRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"BindingProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(opaquepointer:)"},"doc://GLibObject/documentation/GLibObject/BindingRef/BindingProtocol-Implementations":{"role":"collectionGroup","title":"BindingProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/BindingProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glibobject\/bindingref\/bindingprotocol-implementations"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(gpointer:)"},"doc://GLibObject/documentation/GLibObject":{"role":"collection","title":"GLibObject","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject","kind":"symbol","type":"topic","url":"\/documentation\/glibobject"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(_:)-791e9":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GBinding"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-791e9","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(_:)-791e9"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(gconstpointer:)"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"BindingProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(mutating:)"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(_:)-7vk9n":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GBinding"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-7vk9n","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(_:)-7vk9n"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(_:)-4t7wl":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GBinding"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-4t7wl","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(_:)-4t7wl"},"doc://GLibObject/documentation/GLibObject/BindingRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"binding_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/ptr"},"doc://GLibObject/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/GLibObject\/4GLib14PointerWrapperP"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(_:)-76590":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"BindingProtocol"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-76590","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(_:)-76590"},"doc://GLibObject/documentation/GLibObject/BindingProtocol":{"role":"symbol","title":"BindingProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingProtocol"}],"abstract":[{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" is the representation of a binding between a property on a"},{"type":"text","text":" "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" instance (or source) and another property on another "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" "},{"type":"text","text":"instance (or target)."}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingProtocol"}],"url":"\/documentation\/glibobject\/bindingprotocol"},"doc://GLibObject/documentation/GLibObject/BindingRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/glibobject\/bindingref\/pointerwrapper-implementations"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"BindingProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(constpointer:)"},"doc://GLibObject/documentation/GLibObject/BindingRef/unowned(_:)":{"role":"symbol","title":"unowned(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unowned"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"BindingRef","preciseIdentifier":"s:10GLibObject10BindingRefV"}],"abstract":[{"type":"text","text":"This factory is syntactic sugar for setting weak pointers wrapped in "},{"type":"codeVoice","code":"GWeak<T>"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/unowned(_:)","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/unowned(_:)"},"doc://GLibObject/documentation/GLibObject/GWeakCapturing":{"role":"symbol","title":"GWeakCapturing","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"GWeakCapturing"}],"abstract":[{"type":"text","text":"This protocol is used to constrain generic argument T of GWeak container for weak references. Wrappers with strong references to underlying GObjects must NOT conform to this protocol."}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/GWeakCapturing","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"GWeakCapturing"}],"url":"\/documentation\/glibobject\/gweakcapturing"},"doc://GLibObject/documentation/GLibObject/BindingRef/ObjectProtocol-Implementations":{"role":"collectionGroup","title":"ObjectProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/ObjectProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glibobject\/bindingref\/objectprotocol-implementations"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"BindingProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(cpointer:)"},"doc://GLibObject/documentation/GLibObject/BindingRef":{"role":"symbol","title":"BindingRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingRef"}],"abstract":[{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" is the representation of a binding between a property on a"},{"type":"text","text":" "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" instance (or source) and another property on another "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" "},{"type":"text","text":"instance (or target)."}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingRef"}],"url":"\/documentation\/glibobject\/bindingref"},"doc://GLibObject/documentation/GLibObject/ObjectProtocol":{"role":"symbol","title":"ObjectProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ObjectProtocol"}],"abstract":[{"type":"text","text":"The base object type."}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ObjectProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ObjectProtocol"}],"url":"\/documentation\/glibobject\/objectprotocol"},"doc://GLibObject/documentation/GLibObject/BindingRef/init(_:)-9r2ew":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GBinding"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/BindingRef\/init(_:)-9r2ew","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/bindingref\/init(_:)-9r2ew"}}}