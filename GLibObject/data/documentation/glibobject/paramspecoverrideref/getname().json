{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getName"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name is always an “interned” string (as per "},{"type":"codeVoice","code":"g_intern_string()"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"This allows for pointer-value comparisons."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glibobject\/paramspecoverrideref\/getname()"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLibObject\/documentation\/GLibObject\/ParamSpecOverrideRef\/getName()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Get the name of a "},{"type":"codeVoice","code":"GParamSpec"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"getName()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getName"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"symbolKind":"method","externalID":"s:10GLibObject17ParamSpecProtocolPAAE7getNameSSSgyF::SYNTHESIZED::s:10GLibObject20ParamSpecOverrideRefV","extendedModule":"GLibObject","modules":[{"name":"GLibObject"}]},"hierarchy":{"paths":[["doc:\/\/GLibObject\/documentation\/GLibObject","doc:\/\/GLibObject\/documentation\/GLibObject\/ParamSpecOverrideRef","doc:\/\/GLibObject\/documentation\/GLibObject\/ParamSpecOverrideRef\/ParamSpecProtocol-Implementations"]]},"references":{"doc://GLibObject/documentation/GLibObject/ParamSpecOverrideRef":{"role":"symbol","title":"ParamSpecOverrideRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParamSpecOverrideRef"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GParamSpec"},{"type":"text","text":" derived structure that redirects operations to"},{"type":"text","text":" "},{"type":"text","text":"other types of "},{"type":"codeVoice","code":"GParamSpec"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ParamSpecOverrideRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParamSpecOverrideRef"}],"url":"\/documentation\/glibobject\/paramspecoverrideref"},"doc://GLibObject/documentation/GLibObject":{"role":"collection","title":"GLibObject","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject","kind":"symbol","type":"topic","url":"\/documentation\/glibobject"},"doc://GLibObject/documentation/GLibObject/ParamSpecOverrideRef/getName()":{"role":"symbol","title":"getName()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getName"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Get the name of a "},{"type":"codeVoice","code":"GParamSpec"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ParamSpecOverrideRef\/getName()","kind":"symbol","type":"topic","url":"\/documentation\/glibobject\/paramspecoverrideref\/getname()"},"doc://GLibObject/documentation/GLibObject/ParamSpecOverrideRef/ParamSpecProtocol-Implementations":{"role":"collectionGroup","title":"ParamSpecProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLibObject\/documentation\/GLibObject\/ParamSpecOverrideRef\/ParamSpecProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glibobject\/paramspecoverrideref\/paramspecprotocol-implementations"}}}