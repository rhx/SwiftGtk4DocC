{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main container of a Gtk application is the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindow"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is a subclass of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Window"},{"type":"text","text":" that integrates with the actual "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The user interface of an application is created by adding other widgets such as"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":"s, text "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Entry"},{"type":"text","text":" fields, "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/MenuButton"},{"type":"text","text":"s and similar."},{"type":"text","text":" "},{"type":"text","text":"While it is possible to add widgets programmatically, a simpler"},{"type":"text","text":" "},{"type":"text","text":"way is to create an XML "},{"type":"codeVoice","code":"ui"},{"type":"text","text":" file and use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Builder"},{"type":"text","text":" to create the widgets"},{"type":"text","text":" "},{"type":"text","text":"from the user interface file.  There are tools you can use to design user interfaces"},{"type":"text","text":" "},{"type":"text","text":"graphically, such as "},{"type":"reference","isActive":true,"identifier":"https:\/\/flathub.org\/apps\/ar.xjuan.Cambalache"},{"type":"text","text":" "},{"type":"text","text":"for gtk4 (as well as gtk3) and "},{"type":"reference","isActive":true,"identifier":"https:\/\/gitlab.gnome.org\/GNOME\/glade"},{"type":"text","text":" "},{"type":"text","text":"for gtk3 (but there are"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/blogs.gnome.org\/christopherdavis\/2020\/11\/19\/glade-not-recommended\/"},{"type":"text","text":")."}]},{"anchor":"Adding-Widgets","level":2,"type":"heading","text":"Adding Widgets"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s add a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":" to our “Hello World” application"},{"type":"text","text":" "},{"type":"text","text":"from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Tutorial"},{"type":"text","text":" tutorial.  Here is the original source code"},{"type":"text","text":" "},{"type":"text","text":"from that tutorial:"}]},{"type":"codeListing","syntax":"Swift","code":["import Gtk","","let status = Application.run(startupHandler: nil) { app in","    let window = ApplicationWindowRef(application: app)","    window.title = \"Hello, World\"","    window.setDefaultSize(width: 160, height: 80)","    let label = LabelRef(str: \"Hello, SwiftGtk\")","    window.set(child: label)","    window.set(visible: true)","}","","guard let status = status else {","    fatalError(\"Could not create Application\")","}","guard status == 0 else {","    fatalError(\"Application exited with status \\(status)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can simply replace the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label"},{"type":"text","text":" with a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"Swift","code":["    let button = ButtonRef(label: \"Hello, Button\")","    window.set(child: button)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is the resulting program:"}]},{"type":"codeListing","syntax":"Swift","code":["import Gtk","","let status = Application.run(startupHandler: nil) { app in","    let window = ApplicationWindowRef(application: app)","    window.title = \"Hello, World\"","    window.setDefaultSize(width: 160, height: 80)","    let button = ButtonRef(label: \"Hello, Button\")","    window.set(child: button)","    window.set(visible: true)","}","","guard let status = status else {","    fatalError(\"Could not create Application\")","}","guard status == 0 else {","    fatalError(\"Application exited with status \\(status)\")","}"]},{"anchor":"Memory-Management","level":2,"type":"heading","text":"Memory Management"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One question that arises is why we have been using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindowRef"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/LabelRef"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonRef"},{"type":"text","text":" instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindow"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label"},{"type":"text","text":", and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":"?  What is the difference?"},{"type":"text","text":" "},{"type":"text","text":"The answer is memory management.  The "},{"type":"codeVoice","code":"Ref"},{"type":"text","text":" data types are"},{"type":"text","text":" "},{"type":"text","text":"low-level data types that do not perform any automatic"},{"type":"text","text":" "},{"type":"text","text":"memory management (but we could use the "},{"type":"codeVoice","code":"refSink()"},{"type":"text","text":", "},{"type":"codeVoice","code":"ref()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"unref()"},{"type":"text","text":" methods if we wanted to perform manual memory"},{"type":"text","text":" "},{"type":"text","text":"management).  For a simple program with a static user interface,"},{"type":"text","text":" "},{"type":"text","text":"we do not need to worry about releasing memory until the program"},{"type":"text","text":" "},{"type":"text","text":"quits when the application window closes.  Therefore we do not"},{"type":"text","text":" "},{"type":"text","text":"perform any reference counting and Gtk will make sure that our"},{"type":"text","text":" "},{"type":"text","text":"widgets (which inherit from the "},{"type":"codeVoice","code":"InitiallyUnowned"},{"type":"text","text":" class)"},{"type":"text","text":" "},{"type":"text","text":"won’t get released prematurely."}]},{"style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For more complex programs that add\/remove windows and"},{"type":"text","text":" "},{"type":"text","text":"widgets, you can use the non-"},{"type":"codeVoice","code":"Ref"},{"type":"text","text":" Swift class types such as"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Window"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label"},{"type":"text","text":", or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":" and utilise"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/automaticreferencecounting\/"},{"type":"text","text":" "},{"type":"text","text":"for automatic memory management."},{"type":"text","text":" "},{"type":"text","text":"For simplicity, we won’t worry about this in this tutorial."}]}],"type":"aside","name":"Tip"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In our modified "},{"type":"codeVoice","code":"Hello, World"},{"type":"text","text":" program, the whole interior of the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Window"},{"type":"text","text":" is now a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":".  But what if we want both"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label"},{"type":"text","text":" and a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":" in our "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Window"},{"type":"text","text":"?"},{"type":"text","text":" "},{"type":"text","text":"In the next section, we will see how we add multiple widgets"},{"type":"text","text":" "},{"type":"text","text":"to our window."}]},{"anchor":"Layout-Boxes","level":2,"type":"heading","text":"Layout Boxes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Widget"},{"type":"text","text":"s only allow a single child.  If we want"},{"type":"text","text":" "},{"type":"text","text":"a layout with multiple user interface elements, we need to"},{"type":"text","text":" "},{"type":"text","text":"use a layout widget such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Box"},{"type":"text","text":".  To put both the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label"},{"type":"text","text":" and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":" in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Box"},{"type":"text","text":" "},{"type":"text","text":"using a vertical layout, we can use following:"}]},{"type":"codeListing","syntax":"Swift","code":["    let box = BoxRef(orientation: .vertical, spacing: 8)","    box.halign = .center","    box.valign = .center","    box.append(child: label)","    box.append(child: button)","    window.set(child: box)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This creates a vertical layout "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Box"},{"type":"text","text":" with a spacing"},{"type":"text","text":" "},{"type":"text","text":"of 8 points.  The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/halign"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/valign"},{"type":"text","text":" properties are set to"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/Gtk\/GtkAlign\/center"},{"type":"text","text":" to ensure the child widgets"},{"type":"text","text":" "},{"type":"text","text":"(the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label"},{"type":"text","text":" and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are horizontally and vertically centred in the box."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is what the resulting program looks like:"}]},{"type":"codeListing","syntax":"Swift","code":["import Gtk","","let status = Application.run(startupHandler: nil) { app in","    let window = ApplicationWindowRef(application: app)","    window.title = \"Hello, World\"","    window.setDefaultSize(width: 160, height: 80)","    let label = LabelRef(str: \"Click the button below:\")","    let button = ButtonRef(label: \"Click Me!\")","    let box = BoxRef(orientation: .vertical, spacing: 8)","    box.halign = .center","    box.valign = .center","    box.append(child: label)","    box.append(child: button)","    window.set(child: box)","    window.set(visible: true)","}","","guard let status = status else {","    fatalError(\"Could not create Application\")","}","guard status == 0 else {","    fatalError(\"Application exited with status \\(status)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While this program now contains a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"nothing happens when the button gets pushed."},{"type":"text","text":" "},{"type":"text","text":"In the next section, we look at how to add actions"},{"type":"text","text":" "},{"type":"text","text":"to control widgets such as buttons."}]},{"anchor":"Signals-and-Actions","level":2,"type":"heading","text":"Signals and Actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order for the user interface to be responsive,"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Widget"},{"type":"text","text":"s use signals to react to events and"},{"type":"text","text":" "},{"type":"text","text":"trigger actions.  An action is a simple callback"},{"type":"text","text":" "},{"type":"text","text":"function or closure that gets called whenever the"},{"type":"text","text":" "},{"type":"text","text":"corresponding event occurs (a corresponding signal"},{"type":"text","text":" "},{"type":"text","text":"has been received by the widget)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the button has a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonSignalName\/clicked"},{"type":"text","text":" signal"},{"type":"text","text":" "},{"type":"text","text":"that occurs whenever the button has been clicked."},{"type":"text","text":" "},{"type":"text","text":"We can connect a closure to the "},{"type":"codeVoice","code":".clicked"},{"type":"text","text":" signal through the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonProtocol\/onClicked(flags:handler:)"},{"type":"text","text":" method:"}]},{"type":"codeListing","syntax":"Swift","code":["    button.onClicked {","        print(\"Button '\\($0.label!)' clicked.\")","    }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonProtocol\/onClicked(flags:handler:)"},{"type":"text","text":" method"},{"type":"text","text":" "},{"type":"text","text":"is a Swift convenience method that wraps the low-level"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonProtocol\/connect(signal:flags:handler:)"},{"type":"text","text":" "},{"type":"text","text":"method (which itself is a convenience method that wraps a Swift closure into"},{"type":"text","text":" "},{"type":"text","text":"user data that are passed to a "},{"type":"codeVoice","code":"Callback"},{"type":"text","text":" function pointer using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonProtocol\/connect(signal:flags:data:destroyData:signalHandler:)"},{"type":"text","text":" "},{"type":"text","text":"method).  The parameter that is passed in ("},{"type":"codeVoice","code":"$0"},{"type":"text","text":" in the example) is a"},{"type":"text","text":" "},{"type":"text","text":"reference to the widget that received the signal (in this case the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonRef"},{"type":"text","text":" itself).  The whole program now looks like this:"}]},{"type":"codeListing","syntax":"Swift","code":["import Gtk","","let status = Application.run(startupHandler: nil) { app in","    let window = ApplicationWindowRef(application: app)","    window.title = \"Hello, World\"","    window.setDefaultSize(width: 160, height: 80)","    let label = LabelRef(str: \"Press the button below:\")","    let button = ButtonRef(label: \"Press Me!\")","    let box = BoxRef(orientation: .vertical, spacing: 8)","    box.halign = .center","    box.valign = .center","    box.append(child: label)","    box.append(child: button)","    window.set(child: box)","    window.set(visible: true)","","    button.onClicked {","        print(\"Button '\\($0.label!)' clicked.\")","    }","}","","guard let status = status else {","    fatalError(\"Could not create Application\")","}","guard status == 0 else {","    fatalError(\"Application exited with status \\(status)\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let us now look at what is happening behind the scenes in this application."}]},{"anchor":"Summary-and-Explanation","level":2,"type":"heading","text":"Summary and Explanation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a GTK application the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application"},{"type":"text","text":" is the main instance"},{"type":"text","text":" "},{"type":"text","text":"representing the running program, it user interface, and interaction"},{"type":"text","text":" "},{"type":"text","text":"with the system.  The static"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(id:flags:arguments:startupHandler:activationHandler:)"},{"type":"text","text":" "},{"type":"text","text":"factory method creates an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application"},{"type":"text","text":" instance (by internally"},{"type":"text","text":" "},{"type":"text","text":"calling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(id:flags:)"},{"type":"text","text":" and then running the application by"},{"type":"text","text":" "},{"type":"text","text":"calling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(arguments:startupHandler:activationHandler:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The application will then call the startup handler (if non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":") followed by"},{"type":"text","text":" "},{"type":"text","text":"the activation handler once active."}]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In a real-world application you should "},{"type":"strong","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" omit the "},{"type":"codeVoice","code":"id"},{"type":"text","text":" parameter."},{"type":"text","text":" "},{"type":"text","text":"Instead, you want to pass in a unique “reverse DNS” order string,"},{"type":"text","text":" "},{"type":"text","text":"representing your application.  For more information, see the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.gnome.org\/documentation\/tutorials\/application-id.html"},{"type":"text","text":"."}]}],"type":"aside","name":"Important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once the GTK application has become active, in our example above,"},{"type":"text","text":" "},{"type":"text","text":"we create a main application window by calling"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindowRef\/init(application:)"},{"type":"text","text":", passing in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"app"},{"type":"text","text":" parameter to our activation handler.  The "},{"type":"codeVoice","code":"app"},{"type":"text","text":" parameter is an"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationRef"},{"type":"text","text":" referencing our "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"We then set the title of our "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindow"},{"type":"text","text":" by assigning"},{"type":"text","text":" "},{"type":"text","text":"the “Hello, World” string to its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WindowProtocol\/title"},{"type":"text","text":" "},{"type":"text","text":"property.  After that, we set the Window’s default size by calling"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WindowProtocol\/setDefaultSize(width:height:)"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"After creating and adding the widgets as discussed above, we display"},{"type":"text","text":" "},{"type":"text","text":"the window by calling "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/set(visible:)"},{"type":"text","text":" "},{"type":"text","text":"and setting its visibility to "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/gtkappanatomy"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/GtkAppAnatomy","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Gtk user interfaces consist of widgets."},{"type":"text","text":" "},{"type":"text","text":"Widgets are objects that derive from "},{"type":"codeVoice","code":"Object"},{"type":"text","text":" "},{"type":"text","text":"and are organised in a hierarchical fashion, i.e.,"},{"type":"text","text":" "},{"type":"text","text":"every widget is a container that can contain zero, one,"},{"type":"text","text":" "},{"type":"text","text":"or sometimes more than one other widget."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Anatomy of a Gtk Application","role":"article","modules":[{"name":"Gtk"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"references":{"doc://Gtk/documentation/Gtk/ApplicationRef":{"role":"symbol","title":"ApplicationRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationRef"}],"abstract":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" is a high-level API for writing applications."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationRef"}],"url":"\/documentation\/gtk\/applicationref"},"doc://Gtk/documentation/Gtk/ButtonSignalName/clicked":{"role":"symbol","title":"ButtonSignalName.clicked","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"clicked"}],"abstract":[{"type":"text","text":"Emitted when the button has been activated (pressed and released)."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonSignalName\/clicked","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/buttonsignalname\/clicked"},"doc://Gtk/documentation/Gtk/WidgetProtocol/set(visible:)":{"role":"symbol","title":"set(visible:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"set"},{"kind":"text","text":"("},{"kind":"externalParam","text":"visible"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Sets the visibility state of "},{"type":"codeVoice","code":"widget"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/set(visible:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetprotocol\/set(visible:)"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/Application":{"role":"symbol","title":"Application","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"abstract":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" is a high-level API for writing applications."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Application"}],"url":"\/documentation\/gtk\/application"},"doc://Gtk/documentation/Gtk/Window":{"role":"symbol","title":"Window","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Window"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" is a toplevel window which can contain other widgets."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Window","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Window"}],"url":"\/documentation\/gtk\/window"},"doc://Gtk/documentation/Gtk/WidgetProtocol/halign":{"role":"symbol","title":"halign","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"halign"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GtkAlign","preciseIdentifier":"c:@EA@GtkAlign"}],"abstract":[{"type":"text","text":"How to distribute horizontal space if widget gets extra space."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/halign","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetprotocol\/halign"},"doc://Gtk/documentation/Gtk/Entry":{"role":"symbol","title":"Entry","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Entry"}],"abstract":[{"type":"codeVoice","code":"GtkEntry"},{"type":"text","text":" is a single line text entry widget."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Entry","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Entry"}],"url":"\/documentation\/gtk\/entry"},"https://gitlab.gnome.org/GNOME/glade":{"title":"Glade","titleInlineContent":[{"type":"text","text":"Glade"}],"type":"link","identifier":"https:\/\/gitlab.gnome.org\/GNOME\/glade","url":"https:\/\/gitlab.gnome.org\/GNOME\/glade"},"doc://Gtk/documentation/Gtk/Application/init(id:flags:)":{"role":"symbol","title":"init(id:flags:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:gtypes.h@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationFlags","preciseIdentifier":"s:3GIO16ApplicationFlagsV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new #GtkApplication instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(id:flags:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(id:flags:)"},"doc://Gtk/documentation/Gtk/Widget":{"role":"symbol","title":"Widget","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Widget"}],"abstract":[{"type":"text","text":"The base class for all widgets."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Widget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Widget"}],"url":"\/documentation\/gtk\/widget"},"doc://Gtk/documentation/Gtk/Label":{"role":"symbol","title":"Label","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Label"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkLabel"},{"type":"text","text":" widget displays a small amount of text."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Label"}],"url":"\/documentation\/gtk\/label"},"https://blogs.gnome.org/christopherdavis/2020/11/19/glade-not-recommended/":{"title":"recommendations to write user interface files by hand","titleInlineContent":[{"type":"text","text":"recommendations to write user interface files by hand"}],"type":"link","identifier":"https:\/\/blogs.gnome.org\/christopherdavis\/2020\/11\/19\/glade-not-recommended\/","url":"https:\/\/blogs.gnome.org\/christopherdavis\/2020\/11\/19\/glade-not-recommended\/"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/automaticreferencecounting/":{"title":"Swift’s automatic reference counting (ARC)","titleInlineContent":[{"type":"text","text":"Swift’s automatic reference counting (ARC)"}],"type":"link","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/automaticreferencecounting\/","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/automaticreferencecounting\/"},"doc://Gtk/documentation/Gtk/Box":{"role":"symbol","title":"Box","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Box"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkBox"},{"type":"text","text":" widget arranges child widgets into a single row or column."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Box","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Box"}],"url":"\/documentation\/gtk\/box"},"doc://Gtk/documentation/Gtk/ButtonProtocol/onClicked(flags:handler:)":{"role":"symbol","title":"onClicked(flags:handler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onClicked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConnectFlags","preciseIdentifier":"s:10GLibObject12ConnectFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"handler"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ButtonRef","preciseIdentifier":"s:3Gtk9ButtonRefV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Emitted when the button has been activated (pressed and released)."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonProtocol\/onClicked(flags:handler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/buttonprotocol\/onclicked(flags:handler:)"},"doc://Gtk/documentation/Gtk/WindowProtocol/title":{"role":"symbol","title":"title","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"title"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"The title of the window."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WindowProtocol\/title","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/windowprotocol\/title"},"doc://Gtk/documentation/Gtk/Application/run(id:flags:arguments:startupHandler:activationHandler:)":{"role":"symbol","title":"run(id:flags:arguments:startupHandler:activationHandler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:gtypes.h@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationFlags","preciseIdentifier":"s:3GIO16ApplicationFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"startupHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"activationHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Create and run an application with an optional ID and optional flags."},{"type":"text","text":" "},{"type":"text","text":"This function is intended to be run from main() and its return value is intended to be returned by main(). Although you are expected to pass the argc , argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required. Note that on Windows, argc and argv are ignored, and g_win32_get_command_line() is called internally (for proper support of Unicode commandline arguments)."},{"type":"text","text":" "},{"type":"text","text":"GApplication will attempt to parse the commandline arguments. You can add commandline flags to the list of recognised options by way of g_application_add_main_option_entries(). After this, the “handle-local-options” signal is emitted, from which the application can inspect the values of its GOptionEntrys."},{"type":"text","text":" "},{"type":"text","text":"“handle-local-options” is a good place to handle options such as –version, where an immediate reply from the local process is desired (instead of communicating with an already-running instance). A “handle-local-options” handler can stop further processing by returning a non-negative value, which then becomes the exit status of the process."},{"type":"text","text":" "},{"type":"text","text":"What happens next depends on the flags: if G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining commandline arguments are sent to the primary instance, where a “command-line” signal is emitted. Otherwise, the remaining commandline arguments are assumed to be a list of files. If there are no files listed, the application is activated via the “activate” signal. If there are one or more files, and G_APPLICATION_HANDLES_OPEN was specified then the files are opened via the “open” signal."},{"type":"text","text":" "},{"type":"text","text":"If you are interested in doing more complicated local handling of the commandline then you should implement your own GApplication subclass and override local_command_line(). In this case, you most likely want to return TRUE from your local_command_line() implementation to suppress the default handling. See gapplication-example-cmdline2.c for an example."},{"type":"text","text":" "},{"type":"text","text":"If, after the above is done, the use count of the application is zero then the exit status is returned immediately. If the use count is non-zero then the default main context is iterated until the use count falls to zero, at which point 0 is returned."},{"type":"text","text":" "},{"type":"text","text":"If the G_APPLICATION_IS_SERVICE flag is set, then the service will run for as much as 10 seconds with a use count of zero while waiting for the message that caused the activation to arrive. After that, if the use count falls to zero the application will exit immediately, except in the case that g_application_set_inactivity_timeout() is in use."},{"type":"text","text":" "},{"type":"text","text":"This function sets the prgname (g_set_prgname()), if not already set, to the basename of argv[0]."},{"type":"text","text":" "},{"type":"text","text":"Since 2.40, applications that are not explicitly flagged as services or launchers (ie: neither G_APPLICATION_IS_SERVICE or G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the default handler for local_command_line) if “–gapplication-service” was given in the command line. If this flag is present then normal commandline processing is interrupted and the G_APPLICATION_IS_SERVICE flag is set. This provides a “compromise” solution whereby running an application directly from the commandline will invoke it in the normal way (which can be useful for debugging) while still allowing applications to be D-Bus activated in service mode. The D-Bus service file should invoke the executable with “–gapplication-service” as the sole commandline argument. This approach is suitable for use by most graphical applications but should not be used from applications like editors that need precise control over when processes invoked via the commandline will exit and what their exit status will be."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(id:flags:arguments:startupHandler:activationHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/run(id:flags:arguments:startuphandler:activationhandler:)"},"doc://Gtk/documentation/Gtk/WindowProtocol/setDefaultSize(width:height:)":{"role":"symbol","title":"setDefaultSize(width:height:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setDefaultSize"},{"kind":"text","text":"("},{"kind":"externalParam","text":"width"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"height"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Sets the default size of a window."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WindowProtocol\/setDefaultSize(width:height:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/windowprotocol\/setdefaultsize(width:height:)"},"doc://Gtk/documentation/Gtk/WidgetProtocol/valign":{"role":"symbol","title":"valign","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"valign"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GtkAlign","preciseIdentifier":"c:@EA@GtkAlign"}],"abstract":[{"type":"text","text":"How to distribute vertical space if widget gets extra space."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/valign","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetprotocol\/valign"},"https://developer.gnome.org/documentation/tutorials/application-id.html":{"title":"GNOME Developer Guide on Application IDs","titleInlineContent":[{"type":"text","text":"GNOME Developer Guide on Application IDs"}],"type":"link","identifier":"https:\/\/developer.gnome.org\/documentation\/tutorials\/application-id.html","url":"https:\/\/developer.gnome.org\/documentation\/tutorials\/application-id.html"},"doc://Gtk/documentation/Gtk/ButtonProtocol/connect(signal:flags:handler:)":{"role":"symbol","title":"connect(signal:flags:handler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ButtonSignalName","preciseIdentifier":"s:3Gtk16ButtonSignalNameO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConnectFlags","preciseIdentifier":"s:10GLibObject12ConnectFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"handler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SignalHandler","preciseIdentifier":"s:10GLibObject13SignalHandlera"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Connect a Swift signal handler to the given, typed "},{"type":"codeVoice","code":"ButtonSignalName"},{"type":"text","text":" signal"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonProtocol\/connect(signal:flags:handler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/buttonprotocol\/connect(signal:flags:handler:)"},"doc://Gtk/documentation/Gtk/ApplicationWindow":{"role":"symbol","title":"ApplicationWindow","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationWindow"}],"abstract":[{"type":"codeVoice","code":"GtkApplicationWindow"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" subclass that integrates with"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindow","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationWindow"}],"url":"\/documentation\/gtk\/applicationwindow"},"doc://Gtk/documentation/Gtk/ButtonRef":{"role":"symbol","title":"ButtonRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ButtonRef"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkButton"},{"type":"text","text":" widget is generally used to trigger a callback function that is"},{"type":"text","text":" "},{"type":"text","text":"called when the button is pressed."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ButtonRef"}],"url":"\/documentation\/gtk\/buttonref"},"doc://Gtk/documentation/Gtk/ApplicationWindowRef":{"role":"symbol","title":"ApplicationWindowRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationWindowRef"}],"abstract":[{"type":"codeVoice","code":"GtkApplicationWindow"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" subclass that integrates with"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindowRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationWindowRef"}],"url":"\/documentation\/gtk\/applicationwindowref"},"https://flathub.org/apps/ar.xjuan.Cambalache":{"title":"Cambalache","titleInlineContent":[{"type":"text","text":"Cambalache"}],"type":"link","identifier":"https:\/\/flathub.org\/apps\/ar.xjuan.Cambalache","url":"https:\/\/flathub.org\/apps\/ar.xjuan.Cambalache"},"doc://Gtk/documentation/Gtk/Application/run(arguments:startupHandler:activationHandler:)":{"role":"symbol","title":"run(arguments:startupHandler:activationHandler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"startupHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"activationHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Runs the application."},{"type":"text","text":" "},{"type":"text","text":"This function is intended to be run from main() and its return value is intended to be returned by main(). Although you are expected to pass the argc , argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required. Note that on Windows, argc and argv are ignored, and g_win32_get_command_line() is called internally (for proper support of Unicode commandline arguments)."},{"type":"text","text":" "},{"type":"text","text":"GApplication will attempt to parse the commandline arguments. You can add commandline flags to the list of recognised options by way of g_application_add_main_option_entries(). After this, the “handle-local-options” signal is emitted, from which the application can inspect the values of its GOptionEntrys."},{"type":"text","text":" "},{"type":"text","text":"“handle-local-options” is a good place to handle options such as –version, where an immediate reply from the local process is desired (instead of communicating with an already-running instance). A “handle-local-options” handler can stop further processing by returning a non-negative value, which then becomes the exit status of the process."},{"type":"text","text":" "},{"type":"text","text":"What happens next depends on the flags: if G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining commandline arguments are sent to the primary instance, where a “command-line” signal is emitted. Otherwise, the remaining commandline arguments are assumed to be a list of files. If there are no files listed, the application is activated via the “activate” signal. If there are one or more files, and G_APPLICATION_HANDLES_OPEN was specified then the files are opened via the “open” signal."},{"type":"text","text":" "},{"type":"text","text":"If you are interested in doing more complicated local handling of the commandline then you should implement your own GApplication subclass and override local_command_line(). In this case, you most likely want to return TRUE from your local_command_line() implementation to suppress the default handling. See gapplication-example-cmdline2.c for an example."},{"type":"text","text":" "},{"type":"text","text":"If, after the above is done, the use count of the application is zero then the exit status is returned immediately. If the use count is non-zero then the default main context is iterated until the use count falls to zero, at which point 0 is returned."},{"type":"text","text":" "},{"type":"text","text":"If the G_APPLICATION_IS_SERVICE flag is set, then the service will run for as much as 10 seconds with a use count of zero while waiting for the message that caused the activation to arrive. After that, if the use count falls to zero the application will exit immediately, except in the case that g_application_set_inactivity_timeout() is in use."},{"type":"text","text":" "},{"type":"text","text":"This function sets the prgname (g_set_prgname()), if not already set, to the basename of argv[0]."},{"type":"text","text":" "},{"type":"text","text":"Since 2.40, applications that are not explicitly flagged as services or launchers (ie: neither G_APPLICATION_IS_SERVICE or G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the default handler for local_command_line) if “–gapplication-service” was given in the command line. If this flag is present then normal commandline processing is interrupted and the G_APPLICATION_IS_SERVICE flag is set. This provides a “compromise” solution whereby running an application directly from the commandline will invoke it in the normal way (which can be useful for debugging) while still allowing applications to be D-Bus activated in service mode. The D-Bus service file should invoke the executable with “–gapplication-service” as the sole commandline argument. This approach is suitable for use by most graphical applications but should not be used from applications like editors that need precise control over when processes invoked via the commandline will exit and what their exit status will be."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(arguments:startupHandler:activationHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/run(arguments:startuphandler:activationhandler:)"},"doc://Gtk/documentation/Gtk/MenuButton":{"role":"symbol","title":"MenuButton","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MenuButton"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkMenuButton"},{"type":"text","text":" widget is used to display a popup when clicked."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/MenuButton","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MenuButton"}],"url":"\/documentation\/gtk\/menubutton"},"doc://Gtk/documentation/Gtk/ApplicationWindowRef/init(application:)":{"role":"symbol","title":"init(application:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ApplicationT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"application"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"GtkApplicationWindow"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationWindowRef\/init(application:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/applicationwindowref\/init(application:)"},"doc://Gtk/documentation/Gtk/Builder":{"role":"symbol","title":"Builder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Builder"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkBuilder"},{"type":"text","text":" reads XML descriptions of a user interface and"},{"type":"text","text":" "},{"type":"text","text":"instantiates the described objects."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Builder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Builder"}],"url":"\/documentation\/gtk\/builder"},"doc://Gtk/documentation/Gtk/Tutorial":{"role":"article","title":"Using Gtk with Swift","abstract":[{"type":"text","text":"This tutorial shows how to use Gtk with Swift."},{"type":"text","text":" "},{"type":"text","text":"This is particularly useful if you want to create"},{"type":"text","text":" "},{"type":"text","text":"cross-platform applications with a Graphical User Interface (GUI)."},{"type":"text","text":" "},{"type":"text","text":"SwiftGtk also makes it easy to interact with libraries that use Gtk,"},{"type":"text","text":" "},{"type":"text","text":"even if written in C or other languages."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Tutorial","kind":"article","type":"topic","url":"\/documentation\/gtk\/tutorial"},"doc://Gtk/documentation/Gtk/Button":{"role":"symbol","title":"Button","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Button"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkButton"},{"type":"text","text":" widget is generally used to trigger a callback function that is"},{"type":"text","text":" "},{"type":"text","text":"called when the button is pressed."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Button","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Button"}],"url":"\/documentation\/gtk\/button"},"doc://Gtk/documentation/Gtk/LabelRef":{"role":"symbol","title":"LabelRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LabelRef"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkLabel"},{"type":"text","text":" widget displays a small amount of text."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/LabelRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LabelRef"}],"url":"\/documentation\/gtk\/labelref"},"doc://Gtk/documentation/Gtk/ButtonProtocol/connect(signal:flags:data:destroyData:signalHandler:)":{"role":"symbol","title":"connect(signal:flags:data:destroyData:signalHandler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ButtonSignalName","preciseIdentifier":"s:3Gtk16ButtonSignalNameO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConnectFlags","preciseIdentifier":"s:10GLibObject12ConnectFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"!, "},{"kind":"externalParam","text":"destroyData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GClosureNotify","preciseIdentifier":"c:@T@GClosureNotify"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"signalHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GCallback","preciseIdentifier":"c:gclosure.h@T@GCallback"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Connect a C signal handler to the given, typed "},{"type":"codeVoice","code":"ButtonSignalName"},{"type":"text","text":" signal"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ButtonProtocol\/connect(signal:flags:data:destroyData:signalHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/buttonprotocol\/connect(signal:flags:data:destroydata:signalhandler:)"}}}