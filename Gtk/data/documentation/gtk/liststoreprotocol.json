{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"ObjectProtocol","preciseIdentifier":"s:10GLibObject0B8ProtocolP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/Gtk\/documentation\/Gtk\/BuildableProtocol","preciseIdentifier":"s:3Gtk17BuildableProtocolP","text":"BuildableProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragDestProtocol","preciseIdentifier":"s:3Gtk20TreeDragDestProtocolP","text":"TreeDragDestProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","preciseIdentifier":"s:3Gtk22TreeDragSourceProtocolP","text":"TreeDragSourceProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeSortableProtocol","preciseIdentifier":"s:3Gtk20TreeSortableProtocolP","text":"TreeSortableProtocol"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" object is a list model for use with a "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":" "},{"type":"text","text":"widget.  It implements the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" interface, and consequentialy,"},{"type":"text","text":" "},{"type":"text","text":"can use all of the methods available there.  It also implements the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeSortable"},{"type":"text","text":" interface so it can be sorted by the view."},{"type":"text","text":" "},{"type":"text","text":"Finally, it also implements the tree"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"iface.TreeDragSource.html"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"iface.TreeDragDest.html"},{"type":"text","text":" "},{"type":"text","text":"interfaces."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" can accept most "},{"type":"codeVoice","code":"GType"},{"type":"text","text":"s as a column type, though"},{"type":"text","text":" "},{"type":"text","text":"it can’t accept all custom types.  Internally, it will keep a copy of"},{"type":"text","text":" "},{"type":"text","text":"data passed in (such as a string or a boxed pointer).  Columns that"},{"type":"text","text":" "},{"type":"text","text":"accept "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":"s are handled a little differently.  The"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" will keep a reference to the object instead of copying the"},{"type":"text","text":" "},{"type":"text","text":"value.  As a result, if the object is modified, it is up to the"},{"type":"text","text":" "},{"type":"text","text":"application writer to call [method"},{"type":"codeVoice","code":"Gtk.TreeModel.row_changed"},{"type":"text","text":"] to emit the"},{"type":"text","text":" "},{"type":"text","text":"[signal[TreeModel](\/\/documentation\/gtk\/treemodel\/onrowchanged(flags:handler:)] signal. This most commonly affects lists"},{"type":"text","text":" "},{"type":"text","text":"with [class[Texture](\/\/documentation\/gdk\/texture]s stored."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example for creating a simple list store:"}]},{"type":"codeListing","syntax":"c","code":["enum {","  COLUMN_STRING,","  COLUMN_INT,","  COLUMN_BOOLEAN,","  N_COLUMNS","};","","{","  GtkListStore *list_store;","  GtkTreePath *path;","  GtkTreeIter iter;","  int i;","","  list_store = gtk_list_store_new (N_COLUMNS,","                                   G_TYPE_STRING,","                                   G_TYPE_INT,","                                   G_TYPE_BOOLEAN);","","  for (i = 0; i < 10; i++)","    {","      char *some_data;","","      some_data = get_some_data (i);","","      \/\/ Add a new row to the model","      gtk_list_store_append (list_store, &iter);","      gtk_list_store_set (list_store, &iter,","                          COLUMN_STRING, some_data,","                          COLUMN_INT, i,","                          COLUMN_BOOLEAN,  FALSE,","                          -1);","","      \/\/ As the store will keep a copy of the string internally,","      \/\/ we free some_data.","      g_free (some_data);","    }","","  \/\/ Modify a particular row","  path = gtk_tree_path_new_from_string (\"4\");","  gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),","                           &iter,","                           path);","  gtk_tree_path_free (path);","  gtk_list_store_set (list_store, &iter,","                      COLUMN_BOOLEAN, TRUE,","                      -1);","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" is deprecated since GTK 4.10, and should not be used in newly"},{"type":"text","text":" "},{"type":"text","text":"written code. You should use [class[ListStore](\/\/documentation\/gio\/liststore] instead, and the various"},{"type":"text","text":" "},{"type":"text","text":"list models provided by GTK."}]},{"anchor":"Performance-Considerations","level":2,"type":"heading","text":"Performance Considerations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Internally, the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" was originally implemented with a linked list"},{"type":"text","text":" "},{"type":"text","text":"with a tail pointer.  As a result, it was fast at data insertion and deletion,"},{"type":"text","text":" "},{"type":"text","text":"and not fast at random data access.  The "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" sets the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GTK_TREE_MODEL_ITERS_PERSIST"},{"type":"text","text":" flag, which means that "},{"type":"codeVoice","code":"GtkTreeIter"},{"type":"text","text":"s can be"},{"type":"text","text":" "},{"type":"text","text":"cached while the row exists.  Thus, if access to a particular row is needed"},{"type":"text","text":" "},{"type":"text","text":"often and your code is expected to run on older versions of GTK, it is worth"},{"type":"text","text":" "},{"type":"text","text":"keeping the iter around."}]},{"anchor":"Atomic-Operations","level":2,"type":"heading","text":"Atomic Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that only the methods"},{"type":"text","text":" "},{"type":"codeVoice","code":"gtk_list_store_insert_with_values()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"gtk_list_store_insert_with_valuesv()"},{"type":"text","text":" "},{"type":"text","text":"are atomic, in the sense that the row is being appended to the store and the"},{"type":"text","text":" "},{"type":"text","text":"values filled in in a single operation with regard to "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" signaling."},{"type":"text","text":" "},{"type":"text","text":"In contrast, using e.g. "},{"type":"codeVoice","code":"gtk_list_store_append()"},{"type":"text","text":" and then "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":" "},{"type":"text","text":"will first create a row, which triggers the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"row-inserted"},{"type":"codeVoice","code":" signal on `GtkListStore`. The row, however, is still empty, and any signal handler connecting to `GtkTreeModel`row-inserted"},{"type":"text","text":" on this particular store should be prepared"},{"type":"text","text":" "},{"type":"text","text":"for the situation that the row might be empty. This is especially important"},{"type":"text","text":" "},{"type":"text","text":"if you are wrapping the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" inside a "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"Filter and are"},{"type":"text","text":" "},{"type":"text","text":"using a "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"FilterVisibleFunc. Using any of the non-atomic operations"},{"type":"text","text":" "},{"type":"text","text":"to append rows to the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" will cause the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"FilterVisibleFunc to be visited with an empty row first; the"},{"type":"text","text":" "},{"type":"text","text":"function must be prepared for that."}]},{"anchor":"GtkListStore-as-GtkBuildable","level":2,"type":"heading","text":"GtkListStore as GtkBuildable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The GtkListStore implementation of the [iface"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Buildable"},{"type":"text","text":"] interface allows"},{"type":"text","text":" "},{"type":"text","text":"to specify the model columns with a "},{"type":"codeVoice","code":"<columns>"},{"type":"text","text":" element that may contain"},{"type":"text","text":" "},{"type":"text","text":"multiple "},{"type":"codeVoice","code":"<column>"},{"type":"text","text":" elements, each specifying one model column. The “type”"},{"type":"text","text":" "},{"type":"text","text":"attribute specifies the data type for the column."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, it is possible to specify content for the list store"},{"type":"text","text":" "},{"type":"text","text":"in the UI definition, with the "},{"type":"codeVoice","code":"<data>"},{"type":"text","text":" element. It can contain multiple"},{"type":"text","text":" "},{"type":"codeVoice","code":"<row>"},{"type":"text","text":" elements, each specifying to content for one row of the list model."},{"type":"text","text":" "},{"type":"text","text":"Inside a "},{"type":"codeVoice","code":"<row>"},{"type":"text","text":", the "},{"type":"codeVoice","code":"<col>"},{"type":"text","text":" elements specify the content for individual cells."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it is probably more common to define your models in the code,"},{"type":"text","text":" "},{"type":"text","text":"and one might consider it a layering violation to specify the content of"},{"type":"text","text":" "},{"type":"text","text":"a list store in a UI definition, data, not presentation, and common wisdom"},{"type":"text","text":" "},{"type":"text","text":"is to separate the two, as far as possible."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of a UI Definition fragment for a list store:"}]},{"type":"codeListing","syntax":"xml","code":["<object class=\"GtkListStore\">","  <columns>","    <column type=\"gchararray\"\/>","    <column type=\"gchararray\"\/>","    <column type=\"gint\"\/>","  <\/columns>","  <data>","    <row>","      <col id=\"0\">John<\/col>","      <col id=\"1\">Doe<\/col>","      <col id=\"2\">25<\/col>","    <\/row>","    <row>","      <col id=\"0\">Johan<\/col>","      <col id=\"1\">Dahlin<\/col>","      <col id=\"2\">50<\/col>","    <\/row>","  <\/data>","<\/object>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStore"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/liststoreprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/BuildableProtocol","doc:\/\/Gtk\/4GLib14PointerWrapperP","doc:\/\/Gtk\/10GLibObject0B8ProtocolP","doc:\/\/Gtk\/documentation\/Gtk\/TreeDragDestProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeSortableProtocol"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ListStore","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A list-like data structure that can be used with the [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeView"},{"type":"text","text":"]."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreProtocol"}],"title":"ListStoreProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:3Gtk17ListStoreProtocolP","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"ListStoreProtocol"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/list_store_ptr-6207u","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/parent"]},{"title":"Instance Methods","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/append(iter:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/clear()","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insert(iter:position:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertAfter(iter:sibling:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertBefore(iter:sibling:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertWithValuesv(iter:position:columns:values:nValues:)-4aeo9","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertWithValuesv(iter:position:columns:values:nValues:)-5z892","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/iterIsValid(iter:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/moveAfter(iter:position:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/moveBefore(iter:position:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/prepend(iter:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/remove(iter:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/reorder(newOrder:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setColumnTypes(nColumns:types:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setValist(iter:varArgs:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setValue(iter:column:value:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setValuesv(iter:columns:values:nValues:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/swap(a:b:)"]}],"references":{"doc://Gtk/documentation/Gtk/ListStoreRef":{"role":"symbol","title":"ListStoreRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreRef"}],"abstract":[{"type":"text","text":"A list-like data structure that can be used with the [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeView"},{"type":"text","text":"]."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ListStoreRef"}],"url":"\/documentation\/gtk\/liststoreref"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/setValist(iter:varArgs:)":{"role":"symbol","title":"setValist(iter:varArgs:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setValist"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"varArgs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CVaListPointer","preciseIdentifier":"s:s14CVaListPointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"See "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":"; this version takes a va_list for use by language"},{"type":"text","text":" "},{"type":"text","text":"bindings."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setValist(iter:varArgs:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/setvalist(iter:varargs:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/remove(iter:)":{"role":"symbol","title":"remove(iter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"remove"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Removes the given row from the list store.  After being removed,"},{"type":"text","text":" "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" is set to be the next valid row, or invalidated if it pointed"},{"type":"text","text":" "},{"type":"text","text":"to the last row in "},{"type":"codeVoice","code":"listStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/remove(iter:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/remove(iter:)"},"iface.TreeDragSource.html":{"title":"drag","titleInlineContent":[{"type":"text","text":"drag"}],"type":"link","identifier":"iface.TreeDragSource.html","url":"iface.TreeDragSource.html"},"doc://Gtk/documentation/Gtk/ListStoreProtocol":{"role":"symbol","title":"ListStoreProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreProtocol"}],"abstract":[{"type":"text","text":"A list-like data structure that can be used with the [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeView"},{"type":"text","text":"]."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ListStoreProtocol"}],"url":"\/documentation\/gtk\/liststoreprotocol"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/reorder(newOrder:)":{"role":"symbol","title":"reorder(newOrder:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reorder"},{"kind":"text","text":"("},{"kind":"externalParam","text":"newOrder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CInt","preciseIdentifier":"s:s4CInta"},{"kind":"text","text":">!)"}],"abstract":[{"type":"text","text":"Reorders "},{"type":"codeVoice","code":"store"},{"type":"text","text":" to follow the order indicated by "},{"type":"codeVoice","code":"newOrder"},{"type":"text","text":". Note that"},{"type":"text","text":" "},{"type":"text","text":"this function only works with unsorted stores."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/reorder(newOrder:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/reorder(neworder:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/list_store_ptr-6207u":{"defaultImplementations":1,"role":"symbol","title":"list_store_ptr","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"list_store_ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkListStore"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Typed pointer to the underlying "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/list_store_ptr-6207u","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/gtk\/liststoreprotocol\/list_store_ptr-6207u"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/clear()":{"role":"symbol","title":"clear()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Removes all rows from the list store."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/clear()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/clear()"},"doc://Gtk/documentation/Gtk/ListStore":{"role":"symbol","title":"ListStore","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStore"}],"abstract":[{"type":"text","text":"A list-like data structure that can be used with the [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeView"},{"type":"text","text":"]."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStore","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ListStore"}],"url":"\/documentation\/gtk\/liststore"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/swap(a:b:)":{"role":"symbol","title":"swap(a:b:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"swap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"a"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"b"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Swaps "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" in "},{"type":"codeVoice","code":"store"},{"type":"text","text":". Note that this function only works with"},{"type":"text","text":" "},{"type":"text","text":"unsorted stores."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/swap(a:b:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/swap(a:b:)"},"doc://Gtk/documentation/Gtk/TreeDragSourceProtocol":{"role":"symbol","title":"TreeDragSourceProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeDragSourceProtocol"}],"abstract":[{"type":"text","text":"Interface for Drag-and-Drop destinations in "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeDragSourceProtocol"}],"url":"\/documentation\/gtk\/treedragsourceprotocol"},"doc://Gtk/documentation/Gtk/BuildableProtocol":{"role":"symbol","title":"BuildableProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BuildableProtocol"}],"abstract":[{"type":"codeVoice","code":"GtkBuildable"},{"type":"text","text":" allows objects to extend and customize their deserialization"},{"type":"text","text":" "},{"type":"text","text":"from ui files."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/BuildableProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BuildableProtocol"}],"url":"\/documentation\/gtk\/buildableprotocol"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/insertWithValuesv(iter:position:columns:values:nValues:)-5z892":{"role":"symbol","title":"insertWithValuesv(iter:position:columns:values:nValues:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insertWithValuesv"},{"kind":"text","text":"("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterRef","preciseIdentifier":"s:3Gtk11TreeIterRefV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"position"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"columns"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CInt","preciseIdentifier":"s:s4CInta"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"values"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GValue"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"nValues"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A variant of "},{"type":"codeVoice","code":"gtk_list_store_insert_with_values()"},{"type":"text","text":" which"},{"type":"text","text":" "},{"type":"text","text":"takes the columns and values as two arrays, instead of"},{"type":"text","text":" "},{"type":"text","text":"varargs."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertWithValuesv(iter:position:columns:values:nValues:)-5z892","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/insertwithvaluesv(iter:position:columns:values:nvalues:)-5z892"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/parent":{"role":"symbol","title":"parent","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"parent"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObject"}],"abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/parent","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreprotocol\/parent"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/moveAfter(iter:position:)":{"role":"symbol","title":"moveAfter(iter:position:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"moveAfter"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"position"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Moves "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" in "},{"type":"codeVoice","code":"store"},{"type":"text","text":" to the position after "},{"type":"codeVoice","code":"position"},{"type":"text","text":". Note that this"},{"type":"text","text":" "},{"type":"text","text":"function only works with unsorted stores. If "},{"type":"codeVoice","code":"position"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" "},{"type":"text","text":"will be moved to the start of the list."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/moveAfter(iter:position:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/moveafter(iter:position:)"},"doc://Gtk/10GLibObject0B8ProtocolP":{"type":"unresolvable","title":"GLibObject.ObjectProtocol","identifier":"doc:\/\/Gtk\/10GLibObject0B8ProtocolP"},"iface.TreeDragDest.html":{"title":"drop","titleInlineContent":[{"type":"text","text":"drop"}],"type":"link","identifier":"iface.TreeDragDest.html","url":"iface.TreeDragDest.html"},"doc://Gtk/documentation/Gtk/TreeModelProtocol":{"role":"symbol","title":"TreeModelProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelProtocol"}],"abstract":[{"type":"text","text":"The tree interface used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelProtocol"}],"url":"\/documentation\/gtk\/treemodelprotocol"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/insertWithValuesv(iter:position:columns:values:nValues:)-4aeo9":{"role":"symbol","title":"insertWithValuesv(iter:position:columns:values:nValues:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insertWithValuesv"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"position"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"columns"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CInt","preciseIdentifier":"s:s4CInta"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"values"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GValue"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"nValues"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A variant of "},{"type":"codeVoice","code":"gtk_list_store_insert_with_values()"},{"type":"text","text":" which"},{"type":"text","text":" "},{"type":"text","text":"takes the columns and values as two arrays, instead of"},{"type":"text","text":" "},{"type":"text","text":"varargs."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertWithValuesv(iter:position:columns:values:nValues:)-4aeo9","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/insertwithvaluesv(iter:position:columns:values:nvalues:)-4aeo9"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/setValue(iter:column:value:)":{"role":"symbol","title":"setValue(iter:column:value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GObjectValueT"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObjectValueT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Sets the data in the cell specified by "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The type of "},{"type":"codeVoice","code":"value"},{"type":"text","text":" must be convertible to the type of the"},{"type":"text","text":" "},{"type":"text","text":"column."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setValue(iter:column:value:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/setvalue(iter:column:value:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/setColumnTypes(nColumns:types:)":{"role":"symbol","title":"setColumnTypes(nColumns:types:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setColumnTypes"},{"kind":"text","text":"("},{"kind":"externalParam","text":"nColumns"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"types"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GType","preciseIdentifier":"c:@T@GType"},{"kind":"text","text":">!)"}],"abstract":[{"type":"text","text":"Sets the types of the columns of a list store."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setColumnTypes(nColumns:types:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/setcolumntypes(ncolumns:types:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/moveBefore(iter:position:)":{"role":"symbol","title":"moveBefore(iter:position:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"moveBefore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"position"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Moves "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" in "},{"type":"codeVoice","code":"store"},{"type":"text","text":" to the position before "},{"type":"codeVoice","code":"position"},{"type":"text","text":". Note that this"},{"type":"text","text":" "},{"type":"text","text":"function only works with unsorted stores. If "},{"type":"codeVoice","code":"position"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" "},{"type":"text","text":"will be moved to the end of the list."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/moveBefore(iter:position:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/movebefore(iter:position:)"},"doc://Gtk/documentation/Gtk/Buildable":{"role":"symbol","title":"Buildable","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Buildable"}],"abstract":[{"type":"codeVoice","code":"GtkBuildable"},{"type":"text","text":" allows objects to extend and customize their deserialization"},{"type":"text","text":" "},{"type":"text","text":"from ui files."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Buildable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Buildable"}],"url":"\/documentation\/gtk\/buildable"},"doc://Gtk/documentation/Gtk/TreeView":{"role":"symbol","title":"TreeView","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeView"}],"abstract":[{"type":"text","text":"A widget for displaying both trees and lists"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeView","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeView"}],"url":"\/documentation\/gtk\/treeview"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/append(iter:)":{"role":"symbol","title":"append(iter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Appends a new row to "},{"type":"codeVoice","code":"listStore"},{"type":"text","text":".  "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" will be changed to point to this new"},{"type":"text","text":" "},{"type":"text","text":"row.  The row will be empty after this function is called.  To fill in"},{"type":"text","text":" "},{"type":"text","text":"values, you need to call "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"gtk_list_store_set_value()"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/append(iter:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/append(iter:)"},"doc://Gtk/documentation/Gtk/TreeDragDestProtocol":{"role":"symbol","title":"TreeDragDestProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeDragDestProtocol"}],"abstract":[{"type":"text","text":"Interface for Drag-and-Drop destinations in "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragDestProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeDragDestProtocol"}],"url":"\/documentation\/gtk\/treedragdestprotocol"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/iterIsValid(iter:)":{"role":"symbol","title":"iterIsValid(iter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"iterIsValid"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Checks if the given iter is a valid iter for this "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/iterIsValid(iter:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/iterisvalid(iter:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/setValuesv(iter:columns:values:nValues:)":{"role":"symbol","title":"setValuesv(iter:columns:values:nValues:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setValuesv"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"columns"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CInt","preciseIdentifier":"s:s4CInta"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"values"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GValue"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"nValues"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"A variant of "},{"type":"codeVoice","code":"gtk_list_store_set_valist()"},{"type":"text","text":" which"},{"type":"text","text":" "},{"type":"text","text":"takes the columns and values as two arrays, instead of"},{"type":"text","text":" "},{"type":"text","text":"varargs. This function is mainly intended for"},{"type":"text","text":" "},{"type":"text","text":"language-bindings and in case the number of columns to"},{"type":"text","text":" "},{"type":"text","text":"change is not known until run-time."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/setValuesv(iter:columns:values:nValues:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/setvaluesv(iter:columns:values:nvalues:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/insertAfter(iter:sibling:)":{"role":"symbol","title":"insertAfter(iter:sibling:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insertAfter"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sibling"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Inserts a new row after "},{"type":"codeVoice","code":"sibling"},{"type":"text","text":". If "},{"type":"codeVoice","code":"sibling"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", then the row will be"},{"type":"text","text":" "},{"type":"text","text":"prepended to the beginning of the list. "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" will be changed to point to"},{"type":"text","text":" "},{"type":"text","text":"this new row. The row will be empty after this function is called. To fill"},{"type":"text","text":" "},{"type":"text","text":"in values, you need to call "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"gtk_list_store_set_value()"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertAfter(iter:sibling:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/insertafter(iter:sibling:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/insert(iter:position:)":{"role":"symbol","title":"insert(iter:position:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insert"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"position"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new row at "},{"type":"codeVoice","code":"position"},{"type":"text","text":".  "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" will be changed to point to this new"},{"type":"text","text":" "},{"type":"text","text":"row.  If "},{"type":"codeVoice","code":"position"},{"type":"text","text":" is -1 or is larger than the number of rows on the list,"},{"type":"text","text":" "},{"type":"text","text":"then the new row will be appended to the list. The row will be empty after"},{"type":"text","text":" "},{"type":"text","text":"this function is called.  To fill in values, you need to call"},{"type":"text","text":" "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"gtk_list_store_set_value()"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insert(iter:position:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/insert(iter:position:)"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/prepend(iter:)":{"role":"symbol","title":"prepend(iter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"prepend"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Prepends a new row to "},{"type":"codeVoice","code":"listStore"},{"type":"text","text":". "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" will be changed to point to this new"},{"type":"text","text":" "},{"type":"text","text":"row. The row will be empty after this function is called. To fill in"},{"type":"text","text":" "},{"type":"text","text":"values, you need to call "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"gtk_list_store_set_value()"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/prepend(iter:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/prepend(iter:)"},"doc://Gtk/documentation/Gtk/ListStoreProtocol/insertBefore(iter:sibling:)":{"role":"symbol","title":"insertBefore(iter:sibling:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"insertBefore"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"iter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"sibling"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Inserts a new row before "},{"type":"codeVoice","code":"sibling"},{"type":"text","text":". If "},{"type":"codeVoice","code":"sibling"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", then the row will"},{"type":"text","text":" "},{"type":"text","text":"be appended to the end of the list. "},{"type":"codeVoice","code":"iter"},{"type":"text","text":" will be changed to point to this"},{"type":"text","text":" "},{"type":"text","text":"new row. The row will be empty after this function is called. To fill in"},{"type":"text","text":" "},{"type":"text","text":"values, you need to call "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":" or "},{"type":"codeVoice","code":"gtk_list_store_set_value()"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol\/insertBefore(iter:sibling:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreprotocol\/insertbefore(iter:sibling:)"},"doc://Gtk/documentation/Gtk/TreeSortableProtocol":{"role":"symbol","title":"TreeSortableProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeSortableProtocol"}],"abstract":[{"type":"text","text":"The interface for sortable models used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeSortableProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeSortableProtocol"}],"url":"\/documentation\/gtk\/treesortableprotocol"}}}