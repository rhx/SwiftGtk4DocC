{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" object is a list model for use with a "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":" "},{"type":"text","text":"widget.  It implements the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" interface, and consequentialy,"},{"type":"text","text":" "},{"type":"text","text":"can use all of the methods available there.  It also implements the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeSortable"},{"type":"text","text":" interface so it can be sorted by the view."},{"type":"text","text":" "},{"type":"text","text":"Finally, it also implements the tree"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"iface.TreeDragSource.html"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"iface.TreeDragDest.html"},{"type":"text","text":" "},{"type":"text","text":"interfaces."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" can accept most "},{"type":"codeVoice","code":"GType"},{"type":"text","text":"s as a column type, though"},{"type":"text","text":" "},{"type":"text","text":"it can’t accept all custom types.  Internally, it will keep a copy of"},{"type":"text","text":" "},{"type":"text","text":"data passed in (such as a string or a boxed pointer).  Columns that"},{"type":"text","text":" "},{"type":"text","text":"accept "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":"s are handled a little differently.  The"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" will keep a reference to the object instead of copying the"},{"type":"text","text":" "},{"type":"text","text":"value.  As a result, if the object is modified, it is up to the"},{"type":"text","text":" "},{"type":"text","text":"application writer to call [method"},{"type":"codeVoice","code":"Gtk.TreeModel.row_changed"},{"type":"text","text":"] to emit the"},{"type":"text","text":" "},{"type":"text","text":"[signal"},{"type":"codeVoice","code":"Gtk.TreeModel::row_changed"},{"type":"text","text":"] signal. This most commonly affects lists"},{"type":"text","text":" "},{"type":"text","text":"with [class"},{"type":"codeVoice","code":"Gdk.Texture"},{"type":"text","text":"]s stored."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example for creating a simple list store:"}]},{"type":"codeListing","syntax":"c","code":["enum {","  COLUMN_STRING,","  COLUMN_INT,","  COLUMN_BOOLEAN,","  N_COLUMNS","};","","{","  GtkListStore *list_store;","  GtkTreePath *path;","  GtkTreeIter iter;","  int i;","","  list_store = gtk_list_store_new (N_COLUMNS,","                                   G_TYPE_STRING,","                                   G_TYPE_INT,","                                   G_TYPE_BOOLEAN);","","  for (i = 0; i &lt; 10; i++)","    {","      char *some_data;","","      some_data = get_some_data (i);","","      \/\/ Add a new row to the model","      gtk_list_store_append (list_store, &iter);","      gtk_list_store_set (list_store, &iter,","                          COLUMN_STRING, some_data,","                          COLUMN_INT, i,","                          COLUMN_BOOLEAN,  FALSE,","                          -1);","","      \/\/ As the store will keep a copy of the string internally,","      \/\/ we free some_data.","      g_free (some_data);","    }","","  \/\/ Modify a particular row","  path = gtk_tree_path_new_from_string (\"4\");","  gtk_tree_model_get_iter (GTK_TREE_MODEL (list_store),","                           &iter,","                           path);","  gtk_tree_path_free (path);","  gtk_list_store_set (list_store, &iter,","                      COLUMN_BOOLEAN, TRUE,","                      -1);","}"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" is deprecated since GTK 4.10, and should not be used in newly"},{"type":"text","text":" "},{"type":"text","text":"written code. You should use [class"},{"type":"codeVoice","code":"Gio.ListStore"},{"type":"text","text":"] instead, and the various"},{"type":"text","text":" "},{"type":"text","text":"list models provided by GTK."}]},{"anchor":"Performance-Considerations","level":2,"type":"heading","text":"Performance Considerations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Internally, the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" was originally implemented with a linked list"},{"type":"text","text":" "},{"type":"text","text":"with a tail pointer.  As a result, it was fast at data insertion and deletion,"},{"type":"text","text":" "},{"type":"text","text":"and not fast at random data access.  The "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" sets the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GTK_TREE_MODEL_ITERS_PERSIST"},{"type":"text","text":" flag, which means that "},{"type":"codeVoice","code":"GtkTreeIter"},{"type":"text","text":"s can be"},{"type":"text","text":" "},{"type":"text","text":"cached while the row exists.  Thus, if access to a particular row is needed"},{"type":"text","text":" "},{"type":"text","text":"often and your code is expected to run on older versions of GTK, it is worth"},{"type":"text","text":" "},{"type":"text","text":"keeping the iter around."}]},{"anchor":"Atomic-Operations","level":2,"type":"heading","text":"Atomic Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that only the methods"},{"type":"text","text":" "},{"type":"codeVoice","code":"gtk_list_store_insert_with_values()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"gtk_list_store_insert_with_valuesv()"},{"type":"text","text":" "},{"type":"text","text":"are atomic, in the sense that the row is being appended to the store and the"},{"type":"text","text":" "},{"type":"text","text":"values filled in in a single operation with regard to "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" signaling."},{"type":"text","text":" "},{"type":"text","text":"In contrast, using e.g. "},{"type":"codeVoice","code":"gtk_list_store_append()"},{"type":"text","text":" and then "},{"type":"codeVoice","code":"gtk_list_store_set()"},{"type":"text","text":" "},{"type":"text","text":"will first create a row, which triggers the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"row-inserted"},{"type":"codeVoice","code":" signal on `GtkListStore`. The row, however, is still empty, and any signal handler connecting to `GtkTreeModel`row-inserted"},{"type":"text","text":" on this particular store should be prepared"},{"type":"text","text":" "},{"type":"text","text":"for the situation that the row might be empty. This is especially important"},{"type":"text","text":" "},{"type":"text","text":"if you are wrapping the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" inside a "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"Filter and are"},{"type":"text","text":" "},{"type":"text","text":"using a "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"FilterVisibleFunc. Using any of the non-atomic operations"},{"type":"text","text":" "},{"type":"text","text":"to append rows to the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" will cause the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"FilterVisibleFunc to be visited with an empty row first; the"},{"type":"text","text":" "},{"type":"text","text":"function must be prepared for that."}]},{"anchor":"GtkListStore-as-GtkBuildable","level":2,"type":"heading","text":"GtkListStore as GtkBuildable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The GtkListStore implementation of the [iface"},{"type":"codeVoice","code":"Gtk.Buildable"},{"type":"text","text":"] interface allows"},{"type":"text","text":" "},{"type":"text","text":"to specify the model columns with a "},{"type":"codeVoice","code":"&lt;columns&gt;"},{"type":"text","text":" element that may contain"},{"type":"text","text":" "},{"type":"text","text":"multiple "},{"type":"codeVoice","code":"&lt;column&gt;"},{"type":"text","text":" elements, each specifying one model column. The “type”"},{"type":"text","text":" "},{"type":"text","text":"attribute specifies the data type for the column."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, it is possible to specify content for the list store"},{"type":"text","text":" "},{"type":"text","text":"in the UI definition, with the "},{"type":"codeVoice","code":"&lt;data&gt;"},{"type":"text","text":" element. It can contain multiple"},{"type":"text","text":" "},{"type":"codeVoice","code":"&lt;row&gt;"},{"type":"text","text":" elements, each specifying to content for one row of the list model."},{"type":"text","text":" "},{"type":"text","text":"Inside a "},{"type":"codeVoice","code":"&lt;row&gt;"},{"type":"text","text":", the "},{"type":"codeVoice","code":"&lt;col&gt;"},{"type":"text","text":" elements specify the content for individual cells."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it is probably more common to define your models in the code,"},{"type":"text","text":" "},{"type":"text","text":"and one might consider it a layering violation to specify the content of"},{"type":"text","text":" "},{"type":"text","text":"a list store in a UI definition, data, not presentation, and common wisdom"},{"type":"text","text":" "},{"type":"text","text":"is to separate the two, as far as possible."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of a UI Definition fragment for a list store:"}]},{"type":"codeListing","syntax":"xml","code":["&lt;object class=\"GtkListStore\"&gt;","  &lt;columns&gt;","    &lt;column type=\"gchararray\"\/&gt;","    &lt;column type=\"gchararray\"\/&gt;","    &lt;column type=\"gint\"\/&gt;","  &lt;\/columns&gt;","  &lt;data&gt;","    &lt;row&gt;","      &lt;col id=\"0\"&gt;John&lt;\/col&gt;","      &lt;col id=\"1\"&gt;Doe&lt;\/col&gt;","      &lt;col id=\"2\"&gt;25&lt;\/col&gt;","    &lt;\/row&gt;","    &lt;row&gt;","      &lt;col id=\"0\"&gt;Johan&lt;\/col&gt;","      &lt;col id=\"1\"&gt;Dahlin&lt;\/col&gt;","      &lt;col id=\"2\"&gt;50&lt;\/col&gt;","    &lt;\/row&gt;","  &lt;\/data&gt;","&lt;\/object&gt;"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ListStoreRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"codeVoice","code":"ListStoreProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"ListStoreRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/liststoreref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/BuildableProtocol","doc:\/\/Gtk\/4GLib14PointerWrapperP","doc:\/\/Gtk\/10GLibObject14GWeakCapturingP","doc:\/\/Gtk\/10GLibObject0B8ProtocolP","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeDragDestProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeSortableProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A list-like data structure that can be used with the [class"},{"type":"codeVoice","code":"Gtk.TreeView"},{"type":"text","text":"]."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreRef"}],"title":"ListStoreRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:3Gtk12ListStoreRefV","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"ListStoreRef"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-5k8v3","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-818m5","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-8g2a3","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-8h8q8","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-9y58d","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(cPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(constPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(gconstpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(gpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(mutating:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(nColumns:types:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/ptr"]},{"title":"Type Methods","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/listStoreNewv(nColumns:types:)","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/unowned(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/BuildableProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/GWeakCapturing-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/ListStoreProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/ObjectProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeDragDestProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeDragSourceProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeModelProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeSortableProtocol-Implementations"],"generated":true}],"references":{"doc://Gtk/documentation/Gtk/ListStoreRef/TreeDragDestProtocol-Implementations":{"role":"collectionGroup","title":"TreeDragDestProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeDragDestProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/treedragdestprotocol-implementations"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ListStoreProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(mutating:)"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/TreeDragDestProtocol":{"role":"symbol","title":"TreeDragDestProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeDragDestProtocol"}],"abstract":[{"type":"text","text":"Interface for Drag-and-Drop destinations in "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragDestProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeDragDestProtocol"}],"url":"\/documentation\/gtk\/treedragdestprotocol"},"doc://Gtk/documentation/Gtk/ListStoreRef/TreeDragSourceProtocol-Implementations":{"role":"collectionGroup","title":"TreeDragSourceProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeDragSourceProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/treedragsourceprotocol-implementations"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/ListStoreRef":{"role":"symbol","title":"ListStoreRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreRef"}],"abstract":[{"type":"text","text":"A list-like data structure that can be used with the [class"},{"type":"codeVoice","code":"Gtk.TreeView"},{"type":"text","text":"]."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ListStoreRef"}],"url":"\/documentation\/gtk\/liststoreref"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ListStoreProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(opaquepointer:)"},"doc://Gtk/10GLibObject0B8ProtocolP":{"type":"unresolvable","title":"GLibObject.ObjectProtocol","identifier":"doc:\/\/Gtk\/10GLibObject0B8ProtocolP"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(_:)-8g2a3":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkListStore"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-8g2a3","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(_:)-8g2a3"},"doc://Gtk/documentation/Gtk/ListStoreRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"list_store_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/ptr"},"doc://Gtk/documentation/Gtk/ListStoreRef/ListStoreProtocol-Implementations":{"role":"collectionGroup","title":"ListStoreProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/ListStoreProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/liststoreprotocol-implementations"},"doc://Gtk/documentation/Gtk/ListStoreRef/GWeakCapturing-Implementations":{"role":"collectionGroup","title":"GWeakCapturing Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/GWeakCapturing-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/gweakcapturing-implementations"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ListStoreProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(cpointer:)"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(gpointer:)"},"doc://Gtk/10GLibObject14GWeakCapturingP":{"type":"unresolvable","title":"GLibObject.GWeakCapturing","identifier":"doc:\/\/Gtk\/10GLibObject14GWeakCapturingP"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(_:)-818m5":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"ListStoreProtocol"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-818m5","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(_:)-818m5"},"doc://Gtk/documentation/Gtk/TreeSortableProtocol":{"role":"symbol","title":"TreeSortableProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeSortableProtocol"}],"abstract":[{"type":"text","text":"The interface for sortable models used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeSortableProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeSortableProtocol"}],"url":"\/documentation\/gtk\/treesortableprotocol"},"doc://Gtk/documentation/Gtk/ListStoreRef/TreeSortableProtocol-Implementations":{"role":"collectionGroup","title":"TreeSortableProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeSortableProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/treesortableprotocol-implementations"},"doc://Gtk/documentation/Gtk/ListStoreRef/ObjectProtocol-Implementations":{"role":"collectionGroup","title":"ObjectProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/ObjectProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/objectprotocol-implementations"},"doc://Gtk/documentation/Gtk/TreeDragSourceProtocol":{"role":"symbol","title":"TreeDragSourceProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeDragSourceProtocol"}],"abstract":[{"type":"text","text":"Interface for Drag-and-Drop destinations in "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeDragSourceProtocol"}],"url":"\/documentation\/gtk\/treedragsourceprotocol"},"doc://Gtk/documentation/Gtk/ListStoreRef/TreeModelProtocol-Implementations":{"role":"collectionGroup","title":"TreeModelProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/TreeModelProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/treemodelprotocol-implementations"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(nColumns:types:)":{"role":"symbol","title":"init(nColumns:types:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"nColumns"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"types"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GType","preciseIdentifier":"c:@T@GType"},{"kind":"text","text":">!)"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(nColumns:types:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreref\/init(ncolumns:types:)"},"doc://Gtk/documentation/Gtk/ListStoreRef/BuildableProtocol-Implementations":{"role":"collectionGroup","title":"BuildableProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/BuildableProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/liststoreref\/buildableprotocol-implementations"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(_:)-5k8v3":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkListStore"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-5k8v3","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(_:)-5k8v3"},"doc://Gtk/documentation/Gtk/TreeModelProtocol":{"role":"symbol","title":"TreeModelProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelProtocol"}],"abstract":[{"type":"text","text":"The tree interface used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelProtocol"}],"url":"\/documentation\/gtk\/treemodelprotocol"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(gconstpointer:)"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(_:)-8h8q8":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkListStore"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-8h8q8","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(_:)-8h8q8"},"doc://Gtk/documentation/Gtk/BuildableProtocol":{"role":"symbol","title":"BuildableProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BuildableProtocol"}],"abstract":[{"type":"codeVoice","code":"GtkBuildable"},{"type":"text","text":" allows objects to extend and customize their deserialization"},{"type":"text","text":" "},{"type":"text","text":"from ui files."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/BuildableProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BuildableProtocol"}],"url":"\/documentation\/gtk\/buildableprotocol"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(_:)-9y58d":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkListStore"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(_:)-9y58d","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(_:)-9y58d"},"doc://Gtk/documentation/Gtk/ListStoreRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ListStoreProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/init(constpointer:)"},"iface.TreeDragSource.html":{"title":"drag","titleInlineContent":[{"type":"text","text":"drag"}],"type":"link","identifier":"iface.TreeDragSource.html","url":"iface.TreeDragSource.html"},"iface.TreeDragDest.html":{"title":"drop","titleInlineContent":[{"type":"text","text":"drop"}],"type":"link","identifier":"iface.TreeDragDest.html","url":"iface.TreeDragDest.html"},"doc://Gtk/documentation/Gtk/ListStoreProtocol":{"role":"symbol","title":"ListStoreProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ListStoreProtocol"}],"abstract":[{"type":"text","text":"A list-like data structure that can be used with the [class"},{"type":"codeVoice","code":"Gtk.TreeView"},{"type":"text","text":"]."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ListStoreProtocol"}],"url":"\/documentation\/gtk\/liststoreprotocol"},"doc://Gtk/documentation/Gtk/ListStoreRef/unowned(_:)":{"role":"symbol","title":"unowned(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unowned"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ListStoreRef","preciseIdentifier":"s:3Gtk12ListStoreRefV"}],"abstract":[{"type":"text","text":"This factory is syntactic sugar for setting weak pointers wrapped in "},{"type":"codeVoice","code":"GWeak<T>"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/unowned(_:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/liststoreref\/unowned(_:)"},"doc://Gtk/documentation/Gtk/ListStoreRef/listStoreNewv(nColumns:types:)":{"role":"symbol","title":"listStoreNewv(nColumns:types:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"listStoreNewv"},{"kind":"text","text":"("},{"kind":"externalParam","text":"nColumns"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"types"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GType","preciseIdentifier":"c:@T@GType"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"ListStoreRef","preciseIdentifier":"s:3Gtk12ListStoreRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ListStoreRef\/listStoreNewv(nColumns:types:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/liststoreref\/liststorenewv(ncolumns:types:)"}}}