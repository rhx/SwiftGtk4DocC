{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilter"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" is a tree model which wraps another tree model,"},{"type":"text","text":" "},{"type":"text","text":"and can do the following things:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Filter specific rows, based on data from a “visible column”, a column"},{"type":"text","text":" "},{"type":"text","text":"storing booleans indicating whether the row should be filtered or not,"},{"type":"text","text":" "},{"type":"text","text":"or based on the return value of a “visible function”, which gets a"},{"type":"text","text":" "},{"type":"text","text":"model, iter and user_data and returns a boolean indicating whether the"},{"type":"text","text":" "},{"type":"text","text":"row should be filtered or not."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Modify the “appearance” of the model, using a modify function."},{"type":"text","text":" "},{"type":"text","text":"This is extremely powerful and allows for just changing some"},{"type":"text","text":" "},{"type":"text","text":"values and also for creating a completely different model based"},{"type":"text","text":" "},{"type":"text","text":"on the given child model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set a different root node, also known as a “virtual root”. You can pass"},{"type":"text","text":" "},{"type":"text","text":"in a "},{"type":"codeVoice","code":"GtkTreePath"},{"type":"text","text":" indicating the root node for the filter at construction"},{"type":"text","text":" "},{"type":"text","text":"time."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The basic API is similar to "},{"type":"codeVoice","code":"GtkTreeModelSort"},{"type":"text","text":". For an example on its usage,"},{"type":"text","text":" "},{"type":"text","text":"see the section on "},{"type":"codeVoice","code":"GtkTreeModelSort"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":", it is important to realize that"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" maintains an internal cache of all nodes which are"},{"type":"text","text":" "},{"type":"text","text":"visible in its clients. The cache is likely to be a subtree of the tree"},{"type":"text","text":" "},{"type":"text","text":"exposed by the child model. "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" will not cache the entire"},{"type":"text","text":" "},{"type":"text","text":"child model when unnecessary to not compromise the caching mechanism"},{"type":"text","text":" "},{"type":"text","text":"that is exposed by the reference counting scheme. If the child model"},{"type":"text","text":" "},{"type":"text","text":"implements reference counting, unnecessary signals may not be emitted"},{"type":"text","text":" "},{"type":"text","text":"because of reference counting rule 3, see the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" "},{"type":"text","text":"documentation. (Note that e.g. "},{"type":"codeVoice","code":"GtkTreeStore"},{"type":"text","text":" does not implement"},{"type":"text","text":" "},{"type":"text","text":"reference counting and will always emit all signals, even when"},{"type":"text","text":" "},{"type":"text","text":"the receiving node is not visible)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of this, limitations for possible visible functions do apply."},{"type":"text","text":" "},{"type":"text","text":"In general, visible functions should only use data or properties from"},{"type":"text","text":" "},{"type":"text","text":"the node for which the visibility state must be determined, its siblings"},{"type":"text","text":" "},{"type":"text","text":"or its parents. Usually, having a dependency on the state of any child"},{"type":"text","text":" "},{"type":"text","text":"node is not possible, unless references are taken on these explicitly."},{"type":"text","text":" "},{"type":"text","text":"When no such reference exists, no signals may be received for these child"},{"type":"text","text":" "},{"type":"text","text":"nodes (see reference counting rule number 3 in the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" section)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Determining the visibility state of a given node based on the state"},{"type":"text","text":" "},{"type":"text","text":"of its child nodes is a frequently occurring use case. Therefore,"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" explicitly supports this. For example, when a node"},{"type":"text","text":" "},{"type":"text","text":"does not have any children, you might not want the node to be visible."},{"type":"text","text":" "},{"type":"text","text":"As soon as the first row is added to the node’s child level (or the"},{"type":"text","text":" "},{"type":"text","text":"last row removed), the node’s visibility should be updated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This introduces a dependency from the node on its child nodes. In order"},{"type":"text","text":" "},{"type":"text","text":"to accommodate this, "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" must make sure the necessary"},{"type":"text","text":" "},{"type":"text","text":"signals are received from the child model. This is achieved by building,"},{"type":"text","text":" "},{"type":"text","text":"for all nodes which are exposed as visible nodes to "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":"’s"},{"type":"text","text":" "},{"type":"text","text":"clients, the child level (if any) and take a reference on the first node"},{"type":"text","text":" "},{"type":"text","text":"in this level. Furthermore, for every row-inserted, row-changed or"},{"type":"text","text":" "},{"type":"text","text":"row-deleted signal (also these which were not handled because the node"},{"type":"text","text":" "},{"type":"text","text":"was not cached), "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" will check if the visibility state"},{"type":"text","text":" "},{"type":"text","text":"of any parent node has changed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Beware, however, that this explicit support is limited to these two"},{"type":"text","text":" "},{"type":"text","text":"cases. For example, if you want a node to be visible only if two nodes"},{"type":"text","text":" "},{"type":"text","text":"in a child’s child level (2 levels deeper) are visible, you are on your"},{"type":"text","text":" "},{"type":"text","text":"own. In this case, either rely on "},{"type":"codeVoice","code":"GtkTreeStore"},{"type":"text","text":" to emit all signals"},{"type":"text","text":" "},{"type":"text","text":"because it does not implement reference counting, or for models that"},{"type":"text","text":" "},{"type":"text","text":"do implement reference counting, obtain references on these child levels"},{"type":"text","text":" "},{"type":"text","text":"yourself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" type acts as a reference-counted owner of an underlying "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It provides the methods that can operate on this data type through "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" as a strong reference or owner of a "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/treemodelfilter"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/10GLibObject0B0C"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/Gtk\/4GLib14PointerWrapperP","doc:\/\/Gtk\/10GLibObject0B8ProtocolP","doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" which hides parts of an underlying tree model"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilter"}],"title":"TreeModelFilter","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:3Gtk15TreeModelFilterC","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"TreeModelFilter"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-1nwlq","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-1r2e7","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-5x1az","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-9t82o","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(cPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(gconstpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(gpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(opaquePointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(raw:)-8df3n","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(raw:)-cqm7","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retaining:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingCPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingOpaquePointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingRaw:)-7b5ly","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingRaw:)-9vi53","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(treeModelFilter:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/metatypeReferenceForTreeModelFilter","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/wrapperForTreeModelFilter"]},{"title":"Type Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/metatypeForTreeModelFilter"]},{"title":"Default Implementations","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/TreeDragSourceProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/TreeModelFilterProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/TreeModelProtocol-Implementations"],"generated":true}],"references":{"doc://Gtk/documentation/Gtk/TreeDragSourceProtocol":{"role":"symbol","title":"TreeDragSourceProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeDragSourceProtocol"}],"abstract":[{"type":"text","text":"Interface for Drag-and-Drop destinations in "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeDragSourceProtocol"}],"url":"\/documentation\/gtk\/treedragsourceprotocol"},"doc://Gtk/10GLibObject0B0C":{"type":"unresolvable","title":"GLibObject.Object","identifier":"doc:\/\/Gtk\/10GLibObject0B0C"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(opaquepointer:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter":{"role":"symbol","title":"TreeModelFilter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilter"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" which hides parts of an underlying tree model"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelFilter"}],"url":"\/documentation\/gtk\/treemodelfilter"},"doc://Gtk/documentation/Gtk/TreeModelFilter/metatypeReferenceForTreeModelFilter":{"role":"symbol","title":"metatypeReferenceForTreeModelFilter","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"metatypeReferenceForTreeModelFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GType","preciseIdentifier":"c:@T@GType"}],"abstract":[{"type":"text","text":"This getter returns the GLib type identifier registered for "},{"type":"codeVoice","code":"TreeModelFilter"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/metatypeReferenceForTreeModelFilter","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/metatypereferencefortreemodelfilter"},"doc://Gtk/documentation/Gtk/TreeModelFilter/TreeModelProtocol-Implementations":{"role":"collectionGroup","title":"TreeModelProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/TreeModelProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/treemodelprotocol-implementations"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(gpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gconstpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(gconstpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol":{"role":"symbol","title":"TreeModelFilterProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilterProtocol"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" which hides parts of an underlying tree model"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelFilterProtocol"}],"url":"\/documentation\/gtk\/treemodelfilterprotocol"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(retainingOpaquePointer:)":{"role":"symbol","title":"init(retainingOpaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingOpaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingOpaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(retainingopaquepointer:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(_:)-5x1az":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModelFilter"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-5x1az","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(_:)-5x1az"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(_:)-1nwlq":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModelFilter"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-1nwlq","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(_:)-1nwlq"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(raw:)-cqm7":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(raw:)-cqm7","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(raw:)-cqm7"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(treeModelFilter:)":{"role":"symbol","title":"init(treeModelFilter:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"treeModelFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":" "},{"type":"text","text":"Will retain "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(treeModelFilter:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(treemodelfilter:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter/TreeModelFilterProtocol-Implementations":{"role":"collectionGroup","title":"TreeModelFilterProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/TreeModelFilterProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/treemodelfilterprotocol-implementations"},"doc://Gtk/documentation/Gtk/TreeModelFilter/TreeDragSourceProtocol-Implementations":{"role":"collectionGroup","title":"TreeDragSourceProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/TreeDragSourceProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/treedragsourceprotocol-implementations"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/TreeModelFilter/metatypeForTreeModelFilter":{"role":"symbol","title":"metatypeForTreeModelFilter","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"metatypeForTreeModelFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GtkTreeModelFilterClass"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Return a "},{"type":"codeVoice","code":"GtkTreeModelFilterClass"},{"type":"text","text":" reference to the underlying class instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/metatypeForTreeModelFilter","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/metatypefortreemodelfilter"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(raw:)-8df3n":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(raw:)-8df3n","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(raw:)-8df3n"},"doc://Gtk/10GLibObject0B8ProtocolP":{"type":"unresolvable","title":"GLibObject.ObjectProtocol","identifier":"doc:\/\/Gtk\/10GLibObject0B8ProtocolP"},"doc://Gtk/documentation/Gtk/TreeModelProtocol":{"role":"symbol","title":"TreeModelProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelProtocol"}],"abstract":[{"type":"text","text":"The tree interface used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelProtocol"}],"url":"\/documentation\/gtk\/treemodelprotocol"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(retaining:)":{"role":"symbol","title":"init(retaining:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModelFilter"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"Will retain "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retaining:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(retaining:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(_:)-9t82o":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModelFilter"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-9t82o","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(_:)-9t82o"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(cpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(_:)-1r2e7":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModelFilter"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"TreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(_:)-1r2e7","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(_:)-1r2e7"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(retainingCPointer:)":{"role":"symbol","title":"init(retainingCPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"retainingCPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingCPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(retainingcpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(retainingRaw:)-7b5ly":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingRaw:)-7b5ly","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(retainingraw:)-7b5ly"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/TreeModelFilter/wrapperForTreeModelFilter":{"role":"symbol","title":"wrapperForTreeModelFilter","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrapperForTreeModelFilter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeModelFilterClassRef","preciseIdentifier":"s:3Gtk23TreeModelFilterClassRefV"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Return the "},{"type":"codeVoice","code":"TreeModelFilterClass"},{"type":"text","text":" wrapper referencing the metatype of the receiver."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/wrapperForTreeModelFilter","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/wrapperfortreemodelfilter"},"doc://Gtk/documentation/Gtk/TreeModelFilter/init(retainingRaw:)-9vi53":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelFilterProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter\/init(retainingRaw:)-9vi53","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilter\/init(retainingraw:)-9vi53"}}}