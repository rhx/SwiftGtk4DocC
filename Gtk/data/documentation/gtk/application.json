{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It supports many aspects of writing a GTK application in a convenient"},{"type":"text","text":" "},{"type":"text","text":"fashion, without enforcing a one-size-fits-all model."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently, "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" handles GTK initialization, application"},{"type":"text","text":" "},{"type":"text","text":"uniqueness, session management, provides some basic scriptability and"},{"type":"text","text":" "},{"type":"text","text":"desktop shell integration by exporting actions and menus and manages a"},{"type":"text","text":" "},{"type":"text","text":"list of toplevel windows whose life-cycle is automatically tied to the"},{"type":"text","text":" "},{"type":"text","text":"life-cycle of your application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" works fine with plain [class"},{"type":"codeVoice","code":"Gtk.Window"},{"type":"text","text":"]s, it is"},{"type":"text","text":" "},{"type":"text","text":"recommended to use it together with [class"},{"type":"codeVoice","code":"Gtk.ApplicationWindow"},{"type":"text","text":"]."}]},{"anchor":"Automatic-resources","level":2,"type":"heading","text":"Automatic resources"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" will automatically load menus from the "},{"type":"codeVoice","code":"GtkBuilder"},{"type":"text","text":" "},{"type":"text","text":"resource located at “gtk\/menus.ui”, relative to the application’s"},{"type":"text","text":" "},{"type":"text","text":"resource base path (see [method"},{"type":"codeVoice","code":"Gio.Application.set_resource_base_path"},{"type":"text","text":"])."},{"type":"text","text":" "},{"type":"text","text":"The menu with the ID “menubar” is taken as the application’s"},{"type":"text","text":" "},{"type":"text","text":"menubar. Additional menus (most interesting submenus) can be named"},{"type":"text","text":" "},{"type":"text","text":"and accessed via [method"},{"type":"codeVoice","code":"Gtk.Application.get_menu_by_id"},{"type":"text","text":"] which allows for"},{"type":"text","text":" "},{"type":"text","text":"dynamic population of a part of the menu structure."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that automatic resource loading uses the resource base path"},{"type":"text","text":" "},{"type":"text","text":"that is set at construction time and will not work if the resource"},{"type":"text","text":" "},{"type":"text","text":"base path is changed at a later time."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to provide the menubar manually using"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"Gtk.Application.set_menubar"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" will also automatically setup an icon search path for"},{"type":"text","text":" "},{"type":"text","text":"the default icon theme by appending “icons” to the resource base"},{"type":"text","text":" "},{"type":"text","text":"path. This allows your application to easily store its icons as"},{"type":"text","text":" "},{"type":"text","text":"resources. See [method"},{"type":"codeVoice","code":"Gtk.IconTheme.add_resource_path"},{"type":"text","text":"] for more"},{"type":"text","text":" "},{"type":"text","text":"information."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If there is a resource located at "},{"type":"codeVoice","code":"gtk\/help-overlay.ui"},{"type":"text","text":" which"},{"type":"text","text":" "},{"type":"text","text":"defines a [class"},{"type":"codeVoice","code":"Gtk.ShortcutsWindow"},{"type":"text","text":"] with ID "},{"type":"codeVoice","code":"help_overlay"},{"type":"text","text":" then"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" associates an instance of this shortcuts window with"},{"type":"text","text":" "},{"type":"text","text":"each [class"},{"type":"codeVoice","code":"Gtk.ApplicationWindow"},{"type":"text","text":"] and sets up the keyboard accelerator"},{"type":"text","text":" "},{"type":"text","text":"<kbd>Control<\/kbd>+<kbd>?<\/kbd> to open it. To create a menu item that"},{"type":"text","text":" "},{"type":"text","text":"displays the shortcuts window, associate the item with the action"},{"type":"text","text":" "},{"type":"codeVoice","code":"win.show-help-overlay"},{"type":"text","text":"."}]},{"anchor":"A-simple-application","level":2,"type":"heading","text":"A simple application"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/gitlab.gnome.org\/GNOME\/gtk\/tree\/main\/examples\/bp\/bloatpad.c"},{"type":"text","text":" "},{"type":"text","text":"is available in the GTK source code repository"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" optionally registers with a session manager of the"},{"type":"text","text":" "},{"type":"text","text":"users session (if you set the [property"},{"type":"codeVoice","code":"Gtk.Application:register-session"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"property) and offers various functionality related to the session"},{"type":"text","text":" "},{"type":"text","text":"life-cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An application can block various ways to end the session with"},{"type":"text","text":" "},{"type":"text","text":"the [method"},{"type":"codeVoice","code":"Gtk.Application.inhibit"},{"type":"text","text":"] function. Typical use cases for"},{"type":"text","text":" "},{"type":"text","text":"this kind of inhibiting are long-running, uninterruptible operations,"},{"type":"text","text":" "},{"type":"text","text":"such as burning a CD or performing a disk backup. The session"},{"type":"text","text":" "},{"type":"text","text":"manager may not honor the inhibitor, but it can be expected to"},{"type":"text","text":" "},{"type":"text","text":"inform the user about the negative consequences of ending the"},{"type":"text","text":" "},{"type":"text","text":"session while inhibitors are present."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/application"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/3GIO11ApplicationC"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ApplicationProtocol","doc:\/\/Gtk\/3GIO19ActionGroupProtocolP","doc:\/\/Gtk\/3GIO17ActionMapProtocolP","doc:\/\/Gtk\/3GIO19ApplicationProtocolP","doc:\/\/Gtk\/4GLib14PointerWrapperP","doc:\/\/Gtk\/10GLibObject0B8ProtocolP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/Application","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" is a high-level API for writing applications."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"title":"Application","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:3Gtk11ApplicationC","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"Application"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-3klrt","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-6gmwi","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-7rvp0","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-8e3gp","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-jm5k","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(applicationID:flags:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(cPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(gconstpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(gpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(id:flags:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(opaquePointer:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(raw:)-3d5qb","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(raw:)-3ocqi","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retaining:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingCPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingOpaquePointer:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingRaw:)-2psas","doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingRaw:)-5fsl"]},{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/Application\/metatypeReferenceForGtkApplication","doc:\/\/Gtk\/documentation\/Gtk\/Application\/wrapperForGtkApplication"]},{"title":"Instance Methods","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(arguments:activationHandler:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(arguments:startupHandler:activationHandler:)"]},{"title":"Type Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/Application\/metatypeForGtkApplication","doc:\/\/Gtk\/documentation\/Gtk\/Application\/shared"]},{"title":"Type Methods","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(id:flags:arguments:activationHandler:)","doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(id:flags:arguments:startupHandler:activationHandler:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/Application\/ApplicationProtocol-Implementations"],"generated":true}],"references":{"doc://Gtk/documentation/Gtk/Application/init(retaining:)":{"role":"symbol","title":"init(retaining:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkApplication"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"Will retain "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retaining:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(retaining:)"},"doc://Gtk/documentation/Gtk/Application/run(id:flags:arguments:activationHandler:)":{"role":"symbol","title":"run(id:flags:arguments:activationHandler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:gtypes.h@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationFlags","preciseIdentifier":"s:3GIO16ApplicationFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"activationHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Create and run an application with an optional ID and optional flags."},{"type":"text","text":" "},{"type":"text","text":"This function is intended to be run from main() and its return value is intended to be returned by main(). Although you are expected to pass the argc , argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required. Note that on Windows, argc and argv are ignored, and g_win32_get_command_line() is called internally (for proper support of Unicode commandline arguments)."},{"type":"text","text":" "},{"type":"text","text":"GApplication will attempt to parse the commandline arguments. You can add commandline flags to the list of recognised options by way of g_application_add_main_option_entries(). After this, the “handle-local-options” signal is emitted, from which the application can inspect the values of its GOptionEntrys."},{"type":"text","text":" "},{"type":"text","text":"“handle-local-options” is a good place to handle options such as –version, where an immediate reply from the local process is desired (instead of communicating with an already-running instance). A “handle-local-options” handler can stop further processing by returning a non-negative value, which then becomes the exit status of the process."},{"type":"text","text":" "},{"type":"text","text":"What happens next depends on the flags: if G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining commandline arguments are sent to the primary instance, where a “command-line” signal is emitted. Otherwise, the remaining commandline arguments are assumed to be a list of files. If there are no files listed, the application is activated via the “activate” signal. If there are one or more files, and G_APPLICATION_HANDLES_OPEN was specified then the files are opened via the “open” signal."},{"type":"text","text":" "},{"type":"text","text":"If you are interested in doing more complicated local handling of the commandline then you should implement your own GApplication subclass and override local_command_line(). In this case, you most likely want to return TRUE from your local_command_line() implementation to suppress the default handling. See gapplication-example-cmdline2.c for an example."},{"type":"text","text":" "},{"type":"text","text":"If, after the above is done, the use count of the application is zero then the exit status is returned immediately. If the use count is non-zero then the default main context is iterated until the use count falls to zero, at which point 0 is returned."},{"type":"text","text":" "},{"type":"text","text":"If the G_APPLICATION_IS_SERVICE flag is set, then the service will run for as much as 10 seconds with a use count of zero while waiting for the message that caused the activation to arrive. After that, if the use count falls to zero the application will exit immediately, except in the case that g_application_set_inactivity_timeout() is in use."},{"type":"text","text":" "},{"type":"text","text":"This function sets the prgname (g_set_prgname()), if not already set, to the basename of argv[0]."},{"type":"text","text":" "},{"type":"text","text":"Since 2.40, applications that are not explicitly flagged as services or launchers (ie: neither G_APPLICATION_IS_SERVICE or G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the default handler for local_command_line) if “–gapplication-service” was given in the command line. If this flag is present then normal commandline processing is interrupted and the G_APPLICATION_IS_SERVICE flag is set. This provides a “compromise” solution whereby running an application directly from the commandline will invoke it in the normal way (which can be useful for debugging) while still allowing applications to be D-Bus activated in service mode. The D-Bus service file should invoke the executable with “–gapplication-service” as the sole commandline argument. This approach is suitable for use by most graphical applications but should not be used from applications like editors that need precise control over when processes invoked via the commandline will exit and what their exit status will be."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(id:flags:arguments:activationHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/run(id:flags:arguments:activationhandler:)"},"doc://Gtk/documentation/Gtk/Application/shared":{"role":"symbol","title":"shared","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"shared"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Application","preciseIdentifier":"s:3Gtk11ApplicationC"}],"abstract":[{"type":"text","text":"Returns the application singleton instance, creating it if it doesn’t exist yet."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/shared","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/shared"},"doc://Gtk/documentation/Gtk/Application/run(arguments:startupHandler:activationHandler:)":{"role":"symbol","title":"run(arguments:startupHandler:activationHandler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"startupHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"activationHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Runs the application."},{"type":"text","text":" "},{"type":"text","text":"This function is intended to be run from main() and its return value is intended to be returned by main(). Although you are expected to pass the argc , argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required. Note that on Windows, argc and argv are ignored, and g_win32_get_command_line() is called internally (for proper support of Unicode commandline arguments)."},{"type":"text","text":" "},{"type":"text","text":"GApplication will attempt to parse the commandline arguments. You can add commandline flags to the list of recognised options by way of g_application_add_main_option_entries(). After this, the “handle-local-options” signal is emitted, from which the application can inspect the values of its GOptionEntrys."},{"type":"text","text":" "},{"type":"text","text":"“handle-local-options” is a good place to handle options such as –version, where an immediate reply from the local process is desired (instead of communicating with an already-running instance). A “handle-local-options” handler can stop further processing by returning a non-negative value, which then becomes the exit status of the process."},{"type":"text","text":" "},{"type":"text","text":"What happens next depends on the flags: if G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining commandline arguments are sent to the primary instance, where a “command-line” signal is emitted. Otherwise, the remaining commandline arguments are assumed to be a list of files. If there are no files listed, the application is activated via the “activate” signal. If there are one or more files, and G_APPLICATION_HANDLES_OPEN was specified then the files are opened via the “open” signal."},{"type":"text","text":" "},{"type":"text","text":"If you are interested in doing more complicated local handling of the commandline then you should implement your own GApplication subclass and override local_command_line(). In this case, you most likely want to return TRUE from your local_command_line() implementation to suppress the default handling. See gapplication-example-cmdline2.c for an example."},{"type":"text","text":" "},{"type":"text","text":"If, after the above is done, the use count of the application is zero then the exit status is returned immediately. If the use count is non-zero then the default main context is iterated until the use count falls to zero, at which point 0 is returned."},{"type":"text","text":" "},{"type":"text","text":"If the G_APPLICATION_IS_SERVICE flag is set, then the service will run for as much as 10 seconds with a use count of zero while waiting for the message that caused the activation to arrive. After that, if the use count falls to zero the application will exit immediately, except in the case that g_application_set_inactivity_timeout() is in use."},{"type":"text","text":" "},{"type":"text","text":"This function sets the prgname (g_set_prgname()), if not already set, to the basename of argv[0]."},{"type":"text","text":" "},{"type":"text","text":"Since 2.40, applications that are not explicitly flagged as services or launchers (ie: neither G_APPLICATION_IS_SERVICE or G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the default handler for local_command_line) if “–gapplication-service” was given in the command line. If this flag is present then normal commandline processing is interrupted and the G_APPLICATION_IS_SERVICE flag is set. This provides a “compromise” solution whereby running an application directly from the commandline will invoke it in the normal way (which can be useful for debugging) while still allowing applications to be D-Bus activated in service mode. The D-Bus service file should invoke the executable with “–gapplication-service” as the sole commandline argument. This approach is suitable for use by most graphical applications but should not be used from applications like editors that need precise control over when processes invoked via the commandline will exit and what their exit status will be."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(arguments:startupHandler:activationHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/run(arguments:startuphandler:activationhandler:)"},"doc://Gtk/documentation/Gtk/Application/init(_:)-6gmwi":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkApplication"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-6gmwi","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(_:)-6gmwi"},"doc://Gtk/documentation/Gtk/Application/wrapperForGtkApplication":{"role":"symbol","title":"wrapperForGtkApplication","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrapperForGtkApplication"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationClassRef","preciseIdentifier":"s:3Gtk19ApplicationClassRefV"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Return the "},{"type":"codeVoice","code":"ApplicationClass"},{"type":"text","text":" wrapper referencing the metatype of the receiver."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/wrapperForGtkApplication","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/wrapperforgtkapplication"},"doc://Gtk/documentation/Gtk/Application/init(_:)-8e3gp":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkApplication"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-8e3gp","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(_:)-8e3gp"},"doc://Gtk/documentation/Gtk/Application/init(applicationID:flags:)":{"role":"symbol","title":"init(applicationID:flags:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"applicationID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CChar","preciseIdentifier":"s:s5CChara"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationFlags","preciseIdentifier":"s:3GIO16ApplicationFlagsV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(applicationID:flags:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(applicationid:flags:)"},"doc://Gtk/documentation/Gtk/ApplicationProtocol":{"role":"symbol","title":"ApplicationProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ApplicationProtocol"}],"abstract":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" is a high-level API for writing applications."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ApplicationProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ApplicationProtocol"}],"url":"\/documentation\/gtk\/applicationprotocol"},"doc://Gtk/3GIO19ApplicationProtocolP":{"type":"unresolvable","title":"GIO.ApplicationProtocol","identifier":"doc:\/\/Gtk\/3GIO19ApplicationProtocolP"},"doc://Gtk/documentation/Gtk/Application/run(arguments:activationHandler:)":{"role":"symbol","title":"run(arguments:activationHandler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"activationHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Runs the application."},{"type":"text","text":" "},{"type":"text","text":"This function is intended to be run from main() and its return value is intended to be returned by main(). Although you are expected to pass the argc , argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required. Note that on Windows, argc and argv are ignored, and g_win32_get_command_line() is called internally (for proper support of Unicode commandline arguments)."},{"type":"text","text":" "},{"type":"text","text":"GApplication will attempt to parse the commandline arguments. You can add commandline flags to the list of recognised options by way of g_application_add_main_option_entries(). After this, the “handle-local-options” signal is emitted, from which the application can inspect the values of its GOptionEntrys."},{"type":"text","text":" "},{"type":"text","text":"“handle-local-options” is a good place to handle options such as –version, where an immediate reply from the local process is desired (instead of communicating with an already-running instance). A “handle-local-options” handler can stop further processing by returning a non-negative value, which then becomes the exit status of the process."},{"type":"text","text":" "},{"type":"text","text":"What happens next depends on the flags: if G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining commandline arguments are sent to the primary instance, where a “command-line” signal is emitted. Otherwise, the remaining commandline arguments are assumed to be a list of files. If there are no files listed, the application is activated via the “activate” signal. If there are one or more files, and G_APPLICATION_HANDLES_OPEN was specified then the files are opened via the “open” signal."},{"type":"text","text":" "},{"type":"text","text":"If you are interested in doing more complicated local handling of the commandline then you should implement your own GApplication subclass and override local_command_line(). In this case, you most likely want to return TRUE from your local_command_line() implementation to suppress the default handling. See gapplication-example-cmdline2.c for an example."},{"type":"text","text":" "},{"type":"text","text":"If, after the above is done, the use count of the application is zero then the exit status is returned immediately. If the use count is non-zero then the default main context is iterated until the use count falls to zero, at which point 0 is returned."},{"type":"text","text":" "},{"type":"text","text":"If the G_APPLICATION_IS_SERVICE flag is set, then the service will run for as much as 10 seconds with a use count of zero while waiting for the message that caused the activation to arrive. After that, if the use count falls to zero the application will exit immediately, except in the case that g_application_set_inactivity_timeout() is in use."},{"type":"text","text":" "},{"type":"text","text":"This function sets the prgname (g_set_prgname()), if not already set, to the basename of argv[0]."},{"type":"text","text":" "},{"type":"text","text":"Since 2.40, applications that are not explicitly flagged as services or launchers (ie: neither G_APPLICATION_IS_SERVICE or G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the default handler for local_command_line) if “–gapplication-service” was given in the command line. If this flag is present then normal commandline processing is interrupted and the G_APPLICATION_IS_SERVICE flag is set. This provides a “compromise” solution whereby running an application directly from the commandline will invoke it in the normal way (which can be useful for debugging) while still allowing applications to be D-Bus activated in service mode. The D-Bus service file should invoke the executable with “–gapplication-service” as the sole commandline argument. This approach is suitable for use by most graphical applications but should not be used from applications like editors that need precise control over when processes invoked via the commandline will exit and what their exit status will be."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(arguments:activationHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/run(arguments:activationhandler:)"},"doc://Gtk/documentation/Gtk/Application/ApplicationProtocol-Implementations":{"role":"collectionGroup","title":"ApplicationProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/ApplicationProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/application\/applicationprotocol-implementations"},"doc://Gtk/documentation/Gtk/Application/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(gpointer:)"},"doc://Gtk/documentation/Gtk/Application/metatypeForGtkApplication":{"role":"symbol","title":"metatypeForGtkApplication","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"metatypeForGtkApplication"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GtkApplicationClass"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Return a "},{"type":"codeVoice","code":"GtkApplicationClass"},{"type":"text","text":" reference to the underlying class instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/metatypeForGtkApplication","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/metatypeforgtkapplication"},"doc://Gtk/documentation/Gtk/Application/init(retainingRaw:)-2psas":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingRaw:)-2psas","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(retainingraw:)-2psas"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/3GIO11ApplicationC":{"type":"unresolvable","title":"GIO.Application","identifier":"doc:\/\/Gtk\/3GIO11ApplicationC"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/Application":{"role":"symbol","title":"Application","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Application"}],"abstract":[{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":" is a high-level API for writing applications."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Application"}],"url":"\/documentation\/gtk\/application"},"doc://Gtk/documentation/Gtk/Application/init(raw:)-3d5qb":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(raw:)-3d5qb","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(raw:)-3d5qb"},"doc://Gtk/documentation/Gtk/Application/init(_:)-jm5k":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkApplication"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-jm5k","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(_:)-jm5k"},"doc://Gtk/documentation/Gtk/Application/init(raw:)-3ocqi":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(raw:)-3ocqi","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(raw:)-3ocqi"},"doc://Gtk/documentation/Gtk/Application/init(id:flags:)":{"role":"symbol","title":"init(id:flags:)","fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:gtypes.h@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationFlags","preciseIdentifier":"s:3GIO16ApplicationFlagsV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates a new #GtkApplication instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(id:flags:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(id:flags:)"},"doc://Gtk/documentation/Gtk/Application/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(opaquepointer:)"},"doc://Gtk/10GLibObject0B8ProtocolP":{"type":"unresolvable","title":"GLibObject.ObjectProtocol","identifier":"doc:\/\/Gtk\/10GLibObject0B8ProtocolP"},"doc://Gtk/documentation/Gtk/Application/run(id:flags:arguments:startupHandler:activationHandler:)":{"role":"symbol","title":"run(id:flags:arguments:startupHandler:activationHandler:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:gtypes.h@T@gchar"},{"kind":"text","text":">?, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationFlags","preciseIdentifier":"s:3GIO16ApplicationFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"]?, "},{"kind":"externalParam","text":"startupHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"activationHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ApplicationSignalHandler","preciseIdentifier":"s:3Gtk24ApplicationSignalHandlera"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"Create and run an application with an optional ID and optional flags."},{"type":"text","text":" "},{"type":"text","text":"This function is intended to be run from main() and its return value is intended to be returned by main(). Although you are expected to pass the argc , argv parameters from main() to this function, it is possible to pass NULL if argv is not available or commandline handling is not required. Note that on Windows, argc and argv are ignored, and g_win32_get_command_line() is called internally (for proper support of Unicode commandline arguments)."},{"type":"text","text":" "},{"type":"text","text":"GApplication will attempt to parse the commandline arguments. You can add commandline flags to the list of recognised options by way of g_application_add_main_option_entries(). After this, the “handle-local-options” signal is emitted, from which the application can inspect the values of its GOptionEntrys."},{"type":"text","text":" "},{"type":"text","text":"“handle-local-options” is a good place to handle options such as –version, where an immediate reply from the local process is desired (instead of communicating with an already-running instance). A “handle-local-options” handler can stop further processing by returning a non-negative value, which then becomes the exit status of the process."},{"type":"text","text":" "},{"type":"text","text":"What happens next depends on the flags: if G_APPLICATION_HANDLES_COMMAND_LINE was specified then the remaining commandline arguments are sent to the primary instance, where a “command-line” signal is emitted. Otherwise, the remaining commandline arguments are assumed to be a list of files. If there are no files listed, the application is activated via the “activate” signal. If there are one or more files, and G_APPLICATION_HANDLES_OPEN was specified then the files are opened via the “open” signal."},{"type":"text","text":" "},{"type":"text","text":"If you are interested in doing more complicated local handling of the commandline then you should implement your own GApplication subclass and override local_command_line(). In this case, you most likely want to return TRUE from your local_command_line() implementation to suppress the default handling. See gapplication-example-cmdline2.c for an example."},{"type":"text","text":" "},{"type":"text","text":"If, after the above is done, the use count of the application is zero then the exit status is returned immediately. If the use count is non-zero then the default main context is iterated until the use count falls to zero, at which point 0 is returned."},{"type":"text","text":" "},{"type":"text","text":"If the G_APPLICATION_IS_SERVICE flag is set, then the service will run for as much as 10 seconds with a use count of zero while waiting for the message that caused the activation to arrive. After that, if the use count falls to zero the application will exit immediately, except in the case that g_application_set_inactivity_timeout() is in use."},{"type":"text","text":" "},{"type":"text","text":"This function sets the prgname (g_set_prgname()), if not already set, to the basename of argv[0]."},{"type":"text","text":" "},{"type":"text","text":"Since 2.40, applications that are not explicitly flagged as services or launchers (ie: neither G_APPLICATION_IS_SERVICE or G_APPLICATION_IS_LAUNCHER are given as flags) will check (from the default handler for local_command_line) if “–gapplication-service” was given in the command line. If this flag is present then normal commandline processing is interrupted and the G_APPLICATION_IS_SERVICE flag is set. This provides a “compromise” solution whereby running an application directly from the commandline will invoke it in the normal way (which can be useful for debugging) while still allowing applications to be D-Bus activated in service mode. The D-Bus service file should invoke the executable with “–gapplication-service” as the sole commandline argument. This approach is suitable for use by most graphical applications but should not be used from applications like editors that need precise control over when processes invoked via the commandline will exit and what their exit status will be."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/run(id:flags:arguments:startupHandler:activationHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/run(id:flags:arguments:startuphandler:activationhandler:)"},"doc://Gtk/3GIO19ActionGroupProtocolP":{"type":"unresolvable","title":"GIO.ActionGroupProtocol","identifier":"doc:\/\/Gtk\/3GIO19ActionGroupProtocolP"},"doc://Gtk/documentation/Gtk/Application/init(retainingCPointer:)":{"role":"symbol","title":"init(retainingCPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"retainingCPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingCPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(retainingcpointer:)"},"doc://Gtk/documentation/Gtk/Application/init(retainingRaw:)-5fsl":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingRaw:)-5fsl","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(retainingraw:)-5fsl"},"doc://Gtk/documentation/Gtk/Application/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(cpointer:)"},"doc://Gtk/documentation/Gtk/Application/init(_:)-7rvp0":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkApplication"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-7rvp0","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(_:)-7rvp0"},"doc://Gtk/documentation/Gtk/Application/metatypeReferenceForGtkApplication":{"role":"symbol","title":"metatypeReferenceForGtkApplication","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"metatypeReferenceForGtkApplication"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GType","preciseIdentifier":"c:@T@GType"}],"abstract":[{"type":"text","text":"This getter returns the GLib type identifier registered for "},{"type":"codeVoice","code":"Application"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/metatypeReferenceForGtkApplication","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/metatypereferenceforgtkapplication"},"https://gitlab.gnome.org/GNOME/gtk/tree/main/examples/bp/bloatpad.c":{"title":"A simple example","titleInlineContent":[{"type":"text","text":"A simple example"}],"type":"link","identifier":"https:\/\/gitlab.gnome.org\/GNOME\/gtk\/tree\/main\/examples\/bp\/bloatpad.c","url":"https:\/\/gitlab.gnome.org\/GNOME\/gtk\/tree\/main\/examples\/bp\/bloatpad.c"},"doc://Gtk/3GIO17ActionMapProtocolP":{"type":"unresolvable","title":"GIO.ActionMapProtocol","identifier":"doc:\/\/Gtk\/3GIO17ActionMapProtocolP"},"doc://Gtk/documentation/Gtk/Application/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gconstpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"Application"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(gconstpointer:)"},"doc://Gtk/documentation/Gtk/Application/init(_:)-3klrt":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":" "},{"type":"text","text":"Will retain "},{"type":"codeVoice","code":"GtkApplication"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(_:)-3klrt","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(_:)-3klrt"},"doc://Gtk/documentation/Gtk/Application/init(retainingOpaquePointer:)":{"role":"symbol","title":"init(retainingOpaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingOpaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ApplicationProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Application\/init(retainingOpaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/application\/init(retainingopaquepointer:)"}}}