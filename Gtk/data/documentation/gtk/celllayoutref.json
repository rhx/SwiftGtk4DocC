{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CellLayoutRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":" is an interface to be implemented by all objects which"},{"type":"text","text":" "},{"type":"text","text":"want to provide a "},{"type":"codeVoice","code":"GtkTreeViewColumn"},{"type":"text","text":" like API for packing cells,"},{"type":"text","text":" "},{"type":"text","text":"setting attributes and data funcs."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One of the notable features provided by implementations of"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":" are attributes. Attributes let you set the properties"},{"type":"text","text":" "},{"type":"text","text":"in flexible ways. They can just be set to constant values like regular"},{"type":"text","text":" "},{"type":"text","text":"properties. But they can also be mapped to a column of the underlying"},{"type":"text","text":" "},{"type":"text","text":"tree model with "},{"type":"codeVoice","code":"gtk_cell_layout_set_attributes()"},{"type":"text","text":", which means that the value"},{"type":"text","text":" "},{"type":"text","text":"of the attribute can change from cell to cell as they are rendered by"},{"type":"text","text":" "},{"type":"text","text":"the cell renderer. Finally, it is possible to specify a function with"},{"type":"text","text":" "},{"type":"codeVoice","code":"gtk_cell_layout_set_cell_data_func()"},{"type":"text","text":" that is called to determine the"},{"type":"text","text":" "},{"type":"text","text":"value of the attribute for each cell that is rendered."}]},{"anchor":"GtkCellLayouts-as-GtkBuildable","level":2,"type":"heading","text":"GtkCellLayouts as GtkBuildable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Implementations of GtkCellLayout which also implement the GtkBuildable"},{"type":"text","text":" "},{"type":"text","text":"interface ("},{"type":"codeVoice","code":"GtkCellView"},{"type":"text","text":", "},{"type":"codeVoice","code":"GtkIconView"},{"type":"text","text":", "},{"type":"codeVoice","code":"GtkComboBox"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkEntryCompletion"},{"type":"text","text":", "},{"type":"codeVoice","code":"GtkTreeViewColumn"},{"type":"text","text":") accept "},{"type":"codeVoice","code":"GtkCellRenderer"},{"type":"text","text":" objects"},{"type":"text","text":" "},{"type":"text","text":"as "},{"type":"codeVoice","code":"&lt;child&gt;"},{"type":"text","text":" elements in UI definitions. They support a custom "},{"type":"codeVoice","code":"&lt;attributes&gt;"},{"type":"text","text":" "},{"type":"text","text":"element for their children, which can contain multiple "},{"type":"codeVoice","code":"&lt;attribute&gt;"},{"type":"text","text":" "},{"type":"text","text":"elements. Each "},{"type":"codeVoice","code":"&lt;attribute&gt;"},{"type":"text","text":" element has a name attribute which specifies"},{"type":"text","text":" "},{"type":"text","text":"a property of the cell renderer; the content of the element is the"},{"type":"text","text":" "},{"type":"text","text":"attribute value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is an example of a UI definition fragment specifying attributes:"}]},{"type":"codeListing","syntax":"xml","code":["&lt;object class=\"GtkCellView\"&gt;","  &lt;child&gt;","    &lt;object class=\"GtkCellRendererText\"\/&gt;","    &lt;attributes&gt;","      &lt;attribute name=\"text\"&gt;0&lt;\/attribute&gt;","    &lt;\/attributes&gt;","  &lt;\/child&gt;","&lt;\/object&gt;"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Furthermore for implementations of "},{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":" that use a "},{"type":"codeVoice","code":"GtkCellArea"},{"type":"text","text":" "},{"type":"text","text":"to lay out cells (all "},{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":"s in GTK use a "},{"type":"codeVoice","code":"GtkCellArea"},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"class.CellArea.html`cell-properties`"},{"type":"text","text":" can also be defined"},{"type":"text","text":" "},{"type":"text","text":"in the format by specifying the custom "},{"type":"codeVoice","code":"&lt;cell-packing&gt;"},{"type":"text","text":" attribute which can"},{"type":"text","text":" "},{"type":"text","text":"contain multiple "},{"type":"codeVoice","code":"&lt;property&gt;"},{"type":"text","text":" elements."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a UI definition fragment specifying cell properties:"}]},{"type":"codeListing","syntax":"xml","code":["&lt;object class=\"GtkTreeViewColumn\"&gt;","  &lt;child&gt;","    &lt;object class=\"GtkCellRendererText\"\/&gt;","    &lt;cell-packing&gt;","      &lt;property name=\"align\"&gt;True&lt;\/property&gt;","      &lt;property name=\"expand\"&gt;False&lt;\/property&gt;","    &lt;\/cell-packing&gt;","  &lt;\/child&gt;","&lt;\/object&gt;"]},{"anchor":"Subclassing-GtkCellLayout-implementations","level":2,"type":"heading","text":"Subclassing GtkCellLayout implementations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When subclassing a widget that implements "},{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":" like"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkIconView"},{"type":"text","text":" or "},{"type":"codeVoice","code":"GtkComboBox"},{"type":"text","text":", there are some considerations related"},{"type":"text","text":" "},{"type":"text","text":"to the fact that these widgets internally use a "},{"type":"codeVoice","code":"GtkCellArea"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The cell area is exposed as a construct-only property by these"},{"type":"text","text":" "},{"type":"text","text":"widgets. This means that it is possible to e.g. do"}]},{"type":"codeListing","syntax":"c","code":["GtkWIdget *combo =","  g_object_new (GTK_TYPE_COMBO_BOX, \"cell-area\", my_cell_area, NULL);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"to use a custom cell area with a combo box. But construct properties"},{"type":"text","text":" "},{"type":"text","text":"are only initialized after instance "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" "},{"type":"text","text":"functions have run, which means that using functions which rely on"},{"type":"text","text":" "},{"type":"text","text":"the existence of the cell area in your subclass "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" function will"},{"type":"text","text":" "},{"type":"text","text":"cause the default cell area to be instantiated. In this case, a provided"},{"type":"text","text":" "},{"type":"text","text":"construct property value will be ignored (with a warning, to alert"},{"type":"text","text":" "},{"type":"text","text":"you to the problem)."}]},{"type":"codeListing","syntax":"c","code":["static void","my_combo_box_init (MyComboBox *b)","{","  GtkCellRenderer *cell;","","  cell = gtk_cell_renderer_pixbuf_new ();","","  \/\/ The following call causes the default cell area for combo boxes,","  \/\/ a GtkCellAreaBox, to be instantiated","  gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (b), cell, FALSE);","  ...","}","","GtkWidget *","my_combo_box_new (GtkCellArea *area)","{","  \/\/ This call is going to cause a warning about area being ignored","  return g_object_new (MY_TYPE_COMBO_BOX, \"cell-area\", area, NULL);","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If supporting alternative cell areas with your derived widget is"},{"type":"text","text":" "},{"type":"text","text":"not important, then this does not have to concern you. If you want"},{"type":"text","text":" "},{"type":"text","text":"to support alternative cell areas, you can do so by moving the"},{"type":"text","text":" "},{"type":"text","text":"problematic calls out of "},{"type":"codeVoice","code":"init()"},{"type":"text","text":" and into a "},{"type":"codeVoice","code":"constructor()"},{"type":"text","text":" "},{"type":"text","text":"for your class."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"CellLayoutRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"codeVoice","code":"CellLayoutProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"CellLayoutRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/celllayoutref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutProtocol","doc:\/\/Gtk\/4GLib14PointerWrapperP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"An interface for packing cells"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CellLayoutRef"}],"title":"CellLayoutRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:3Gtk13CellLayoutRefV","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"CellLayoutRef"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-12810","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-1ta41","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-2pdgu","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-3t5cu","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-9v4wn","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(cPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(constPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(gconstpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(gpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(mutating:)","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/CellLayoutProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/PointerWrapper-Implementations"],"generated":true}],"references":{"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/CellLayoutRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/pointerwrapper-implementations"},"doc://Gtk/documentation/Gtk/CellLayoutRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GtkCellLayout"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"cell_layout_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/ptr"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(_:)-12810":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkCellLayout"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-12810","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(_:)-12810"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(_:)-9v4wn":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkCellLayout"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-9v4wn","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(_:)-9v4wn"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"CellLayoutProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(constpointer:)"},"class.CellArea.html`cell-properties`":{"title":"cell properties","titleInlineContent":[{"type":"text","text":"cell properties"}],"type":"link","identifier":"class.CellArea.html`cell-properties`","url":"class.CellArea.html`cell-properties`"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"CellLayoutProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(cpointer:)"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(_:)-1ta41":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkCellLayout"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-1ta41","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(_:)-1ta41"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(gpointer:)"},"doc://Gtk/documentation/Gtk/CellLayoutProtocol":{"role":"symbol","title":"CellLayoutProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CellLayoutProtocol"}],"abstract":[{"type":"text","text":"An interface for packing cells"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CellLayoutProtocol"}],"url":"\/documentation\/gtk\/celllayoutprotocol"},"doc://Gtk/documentation/Gtk/CellLayoutRef/CellLayoutProtocol-Implementations":{"role":"collectionGroup","title":"CellLayoutProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/CellLayoutProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/celllayoutprotocol-implementations"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"CellLayoutProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(mutating:)"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(_:)-2pdgu":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkCellLayout"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-2pdgu","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(_:)-2pdgu"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(_:)-3t5cu":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"CellLayoutProtocol"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(_:)-3t5cu","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(_:)-3t5cu"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(gconstpointer:)"},"doc://Gtk/documentation/Gtk/CellLayoutRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"CellLayoutProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/celllayoutref\/init(opaquepointer:)"},"doc://Gtk/documentation/Gtk/CellLayoutRef":{"role":"symbol","title":"CellLayoutRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CellLayoutRef"}],"abstract":[{"type":"text","text":"An interface for packing cells"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/CellLayoutRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CellLayoutRef"}],"url":"\/documentation\/gtk\/celllayoutref"}}}