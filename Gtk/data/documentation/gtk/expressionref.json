{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressionRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An important aspect of expressions is that the value can be obtained"},{"type":"text","text":" "},{"type":"text","text":"from a source that is several steps away. For example, an expression"},{"type":"text","text":" "},{"type":"text","text":"may describe ‘the value of property A of "},{"type":"codeVoice","code":"object1"},{"type":"text","text":", which is itself the"},{"type":"text","text":" "},{"type":"text","text":"value of a property of "},{"type":"codeVoice","code":"object2"},{"type":"text","text":"’. And "},{"type":"codeVoice","code":"object1"},{"type":"text","text":" may not even exist yet"},{"type":"text","text":" "},{"type":"text","text":"at the time that the expression is created. This is contrast to "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" "},{"type":"text","text":"property bindings, which can only create direct connections between"},{"type":"text","text":" "},{"type":"text","text":"the properties of two objects that must both exist for the duration"},{"type":"text","text":" "},{"type":"text","text":"of the binding."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression needs to be “evaluated” to obtain the value that it currently"},{"type":"text","text":" "},{"type":"text","text":"refers to. An evaluation always happens in the context of a current object"},{"type":"text","text":" "},{"type":"text","text":"called "},{"type":"codeVoice","code":"this"},{"type":"text","text":" (it mirrors the behavior of object-oriented languages),"},{"type":"text","text":" "},{"type":"text","text":"which may or may not influence the result of the evaluation. Use"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"Gtk.Expression.evaluate"},{"type":"text","text":"] for evaluating an expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Various methods for defining expressions exist, from simple constants via"},{"type":"text","text":" "},{"type":"text","text":"[ctor"},{"type":"codeVoice","code":"Gtk.ConstantExpression.new"},{"type":"text","text":"] to looking up properties in a "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" "},{"type":"text","text":"(even recursively) via [ctor"},{"type":"codeVoice","code":"Gtk.PropertyExpression.new"},{"type":"text","text":"] or providing"},{"type":"text","text":" "},{"type":"text","text":"custom functions to transform and combine expressions via"},{"type":"text","text":" "},{"type":"text","text":"[ctor"},{"type":"codeVoice","code":"Gtk.ClosureExpression.new"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is an example of a complex expression:"}]},{"type":"codeListing","syntax":"c","code":["  color_expr = gtk_property_expression_new (GTK_TYPE_LIST_ITEM,","                                            NULL, \"item\");","  expression = gtk_property_expression_new (GTK_TYPE_COLOR,","                                            color_expr, \"name\");"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"when evaluated with "},{"type":"codeVoice","code":"this"},{"type":"text","text":" being a "},{"type":"codeVoice","code":"GtkListItem"},{"type":"text","text":", it will obtain the"},{"type":"text","text":" "},{"type":"text","text":"“item” property from the "},{"type":"codeVoice","code":"GtkListItem"},{"type":"text","text":", and then obtain the “name” property"},{"type":"text","text":" "},{"type":"text","text":"from the resulting object (which is assumed to be of type "},{"type":"codeVoice","code":"GTK_TYPE_COLOR"},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A more concise way to describe this would be"}]},{"type":"codeListing","syntax":null,"code":["  this-&gt;item-&gt;name"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most likely place where you will encounter expressions is in the context"},{"type":"text","text":" "},{"type":"text","text":"of list models and list widgets using them. For example, "},{"type":"codeVoice","code":"GtkDropDown"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"evaluating a "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" to obtain strings from the items in its model"},{"type":"text","text":" "},{"type":"text","text":"that it can then use to match against the contents of its search entry."},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkStringFilter"},{"type":"text","text":" is using a "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" for similar reasons."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, expressions are not paying attention to changes and evaluation is"},{"type":"text","text":" "},{"type":"text","text":"just a snapshot of the current state at a given time. To get informed about"},{"type":"text","text":" "},{"type":"text","text":"changes, an expression needs to be “watched” via a [struct"},{"type":"codeVoice","code":"Gtk.ExpressionWatch"},{"type":"text","text":"],"},{"type":"text","text":" "},{"type":"text","text":"which will cause a callback to be called whenever the value of the expression may"},{"type":"text","text":" "},{"type":"text","text":"have changed; [method"},{"type":"codeVoice","code":"Gtk.Expression.watch"},{"type":"text","text":"] starts watching an expression, and"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"Gtk.ExpressionWatch.unwatch"},{"type":"text","text":"] stops."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Watches can be created for automatically updating the property of an object,"},{"type":"text","text":" "},{"type":"text","text":"similar to GObject’s "},{"type":"codeVoice","code":"GBinding"},{"type":"text","text":" mechanism, by using [method"},{"type":"codeVoice","code":"Gtk.Expression.bind"},{"type":"text","text":"]."}]},{"anchor":"GtkExpression-in-GObject-properties","level":2,"type":"heading","text":"GtkExpression in GObject properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to use a "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" as a "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" property, you must use the"},{"type":"text","text":" "},{"type":"text","text":"[id"},{"type":"codeVoice","code":"gtk_param_spec_expression"},{"type":"text","text":"] when creating a "},{"type":"codeVoice","code":"GParamSpec"},{"type":"text","text":" to install in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"GObject"},{"type":"text","text":" class being defined; for instance:"}]},{"type":"codeListing","syntax":"c","code":["obj_props[PROP_EXPRESSION] =","  gtk_param_spec_expression (\"expression\",","                             \"Expression\",","                             \"The expression used by the widget\",","                             G_PARAM_READWRITE |","                             G_PARAM_STATIC_STRINGS |","                             G_PARAM_EXPLICIT_NOTIFY);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When implementing the "},{"type":"codeVoice","code":"GObjectClass.set_property"},{"type":"text","text":" and "},{"type":"codeVoice","code":"GObjectClass.get_property"},{"type":"text","text":" "},{"type":"text","text":"virtual functions, you must use [id"},{"type":"codeVoice","code":"gtk_value_get_expression"},{"type":"text","text":"], to retrieve the"},{"type":"text","text":" "},{"type":"text","text":"stored "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"GValue"},{"type":"text","text":" container, and [id"},{"type":"codeVoice","code":"gtk_value_set_expression"},{"type":"text","text":"],"},{"type":"text","text":" "},{"type":"text","text":"to store the "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" into the "},{"type":"codeVoice","code":"GValue"},{"type":"text","text":"; for instance:"}]},{"type":"codeListing","syntax":"c","code":["  \/\/ in `set_property()`...","  case PROP_EXPRESSION:","    foo_widget_set_expression (foo, gtk_value_get_expression (value));","    break;","","  \/\/ in `get_property()`...","  case PROP_EXPRESSION:","    gtk_value_set_expression (value, foo-&gt;expression);","    break;"]},{"anchor":"GtkExpression-in-ui-files","level":2,"type":"heading","text":"GtkExpression in .ui files"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkBuilder"},{"type":"text","text":" has support for creating expressions. The syntax here can be used where"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" object is needed like in a "},{"type":"codeVoice","code":"&lt;property&gt;"},{"type":"text","text":" tag for an expression"},{"type":"text","text":" "},{"type":"text","text":"property, or in a "},{"type":"codeVoice","code":"&lt;binding name=\"property\"&gt;"},{"type":"text","text":" tag to bind a property to an expression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a property expression, use the "},{"type":"codeVoice","code":"&lt;lookup&gt;"},{"type":"text","text":" element. It can have a "},{"type":"codeVoice","code":"type"},{"type":"text","text":" "},{"type":"text","text":"attribute to specify the object type, and a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" attribute to specify the property"},{"type":"text","text":" "},{"type":"text","text":"to look up. The content of "},{"type":"codeVoice","code":"&lt;lookup&gt;"},{"type":"text","text":" can either be an element specfiying the expression"},{"type":"text","text":" "},{"type":"text","text":"to use the object, or a string that specifies the name of the object to use."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example:"}]},{"type":"codeListing","syntax":"xml","code":["  &lt;lookup name='search'&gt;string_filter&lt;\/lookup&gt;"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a constant expression, use the "},{"type":"codeVoice","code":"&lt;constant&gt;"},{"type":"text","text":" element. If the type attribute"},{"type":"text","text":" "},{"type":"text","text":"is specified, the element content is interpreted as a value of that type. Otherwise,"},{"type":"text","text":" "},{"type":"text","text":"it is assumed to be an object. For instance:"}]},{"type":"codeListing","syntax":"xml","code":["  &lt;constant&gt;string_filter&lt;\/constant&gt;","  &lt;constant type='gchararray'&gt;Hello, world&lt;\/constant&gt;"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create a closure expression, use the "},{"type":"codeVoice","code":"&lt;closure&gt;"},{"type":"text","text":" element. The "},{"type":"codeVoice","code":"type"},{"type":"text","text":" and "},{"type":"codeVoice","code":"function"},{"type":"text","text":" "},{"type":"text","text":"attributes specify what function to use for the closure, the content of the element"},{"type":"text","text":" "},{"type":"text","text":"contains the expressions for the parameters. For instance:"}]},{"type":"codeListing","syntax":"xml","code":["  &lt;closure type='gchararray' function='combine_args_somehow'&gt;","    &lt;constant type='gchararray'&gt;File size:&lt;\/constant&gt;","    &lt;lookup type='GFile' name='size'&gt;myfile&lt;\/lookup&gt;","  &lt;\/closure&gt;"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ExpressionRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"codeVoice","code":"ExpressionProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"ExpressionRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/expressionref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ExpressionProtocol","doc:\/\/Gtk\/4GLib14PointerWrapperP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" provides a way to describe references to values."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressionRef"}],"title":"ExpressionRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:3Gtk13ExpressionRefV","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"ExpressionRef"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-26ay1","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-2ee2t","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-2zk6m","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-3jgyq","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-553h1","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(cPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(constPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(gconstpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(gpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(mutating:)","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/ExpressionProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/PointerWrapper-Implementations"],"generated":true}],"references":{"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/ExpressionProtocol":{"role":"symbol","title":"ExpressionProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressionProtocol"}],"abstract":[{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" provides a way to describe references to values."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressionProtocol"}],"url":"\/documentation\/gtk\/expressionprotocol"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ExpressionProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(constpointer:)"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(_:)-26ay1":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkExpression"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-26ay1","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(_:)-26ay1"},"doc://Gtk/documentation/Gtk/ExpressionRef":{"role":"symbol","title":"ExpressionRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressionRef"}],"abstract":[{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" provides a way to describe references to values."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressionRef"}],"url":"\/documentation\/gtk\/expressionref"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(gconstpointer:)"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ExpressionProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(cpointer:)"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(_:)-3jgyq":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkExpression"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-3jgyq","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(_:)-3jgyq"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(_:)-553h1":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkExpression"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-553h1","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(_:)-553h1"},"doc://Gtk/documentation/Gtk/ExpressionRef/ExpressionProtocol-Implementations":{"role":"collectionGroup","title":"ExpressionProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/ExpressionProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/expressionref\/expressionprotocol-implementations"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ExpressionProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(mutating:)"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(_:)-2ee2t":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkExpression"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-2ee2t","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(_:)-2ee2t"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(_:)-2zk6m":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"ExpressionProtocol"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(_:)-2zk6m","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(_:)-2zk6m"},"doc://Gtk/documentation/Gtk/ExpressionRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GtkExpression"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"expression_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/ptr"},"doc://Gtk/documentation/Gtk/ExpressionRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/expressionref\/pointerwrapper-implementations"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(gpointer:)"},"doc://Gtk/documentation/Gtk/ExpressionRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ExpressionProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ExpressionRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/expressionref\/init(opaquepointer:)"}}}