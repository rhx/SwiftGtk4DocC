{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WidgetRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" is the base class all widgets in GTK derive from. It manages the"},{"type":"text","text":" "},{"type":"text","text":"widget lifecycle, layout, states and style."}]},{"anchor":"Height-for-width-Geometry-Management","level":3,"type":"heading","text":"Height-for-width Geometry Management"},{"type":"paragraph","inlineContent":[{"type":"text","text":"GTK uses a height-for-width (and width-for-height) geometry management"},{"type":"text","text":" "},{"type":"text","text":"system. Height-for-width means that a widget can change how much"},{"type":"text","text":" "},{"type":"text","text":"vertical space it needs, depending on the amount of horizontal space"},{"type":"text","text":" "},{"type":"text","text":"that it is given (and similar for width-for-height). The most common"},{"type":"text","text":" "},{"type":"text","text":"example is a label that reflows to fill up the available width, wraps"},{"type":"text","text":" "},{"type":"text","text":"to fewer lines, and therefore needs less height."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Height-for-width geometry management is implemented in GTK by way"},{"type":"text","text":" "},{"type":"text","text":"of two virtual methods:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"[vfunc"},{"type":"codeVoice","code":"Gtk.Widget.get_request_mode"},{"type":"text","text":"]"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"[vfunc"},{"type":"codeVoice","code":"Gtk.Widget.measure"},{"type":"text","text":"]"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are some important things to keep in mind when implementing"},{"type":"text","text":" "},{"type":"text","text":"height-for-width and when using it in widget implementations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you implement a direct "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" subclass that supports"},{"type":"text","text":" "},{"type":"text","text":"height-for-width or width-for-height geometry management for itself"},{"type":"text","text":" "},{"type":"text","text":"or its child widgets, the [vfunc"},{"type":"codeVoice","code":"Gtk.Widget.get_request_mode"},{"type":"text","text":"] virtual"},{"type":"text","text":" "},{"type":"text","text":"function must be implemented as well and return the widget’s preferred"},{"type":"text","text":" "},{"type":"text","text":"request mode. The default implementation of this virtual function"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"constantSize"},{"type":"text","text":", which means that the widget will"},{"type":"text","text":" "},{"type":"text","text":"only ever get -1 passed as the for_size value to its"},{"type":"text","text":" "},{"type":"text","text":"[vfunc"},{"type":"codeVoice","code":"Gtk.Widget.measure"},{"type":"text","text":"] implementation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The geometry management system will query a widget hierarchy in"},{"type":"text","text":" "},{"type":"text","text":"only one orientation at a time. When widgets are initially queried"},{"type":"text","text":" "},{"type":"text","text":"for their minimum sizes it is generally done in two initial passes"},{"type":"text","text":" "},{"type":"text","text":"in the [enum"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/SizeRequestMode"},{"type":"text","text":"] chosen by the toplevel."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, when queried in the normal "},{"type":"codeVoice","code":"heightForWidth"},{"type":"text","text":" mode:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, the default minimum and natural width for each widget"},{"type":"text","text":" "},{"type":"text","text":"in the interface will be computed using [id"},{"type":"codeVoice","code":"measure"},{"type":"text","text":"] with an"},{"type":"text","text":" "},{"type":"text","text":"orientation of "},{"type":"codeVoice","code":"horizontal"},{"type":"text","text":" and a for_size of -1."},{"type":"text","text":" "},{"type":"text","text":"Because the preferred widths for each widget depend on the preferred"},{"type":"text","text":" "},{"type":"text","text":"widths of their children, this information propagates up the hierarchy,"},{"type":"text","text":" "},{"type":"text","text":"and finally a minimum and natural width is determined for the entire"},{"type":"text","text":" "},{"type":"text","text":"toplevel. Next, the toplevel will use the minimum width to query for the"},{"type":"text","text":" "},{"type":"text","text":"minimum height contextual to that width using [id"},{"type":"codeVoice","code":"measure"},{"type":"text","text":"] with an"},{"type":"text","text":" "},{"type":"text","text":"orientation of "},{"type":"codeVoice","code":"vertical"},{"type":"text","text":" and a for_size of the just computed"},{"type":"text","text":" "},{"type":"text","text":"width. This will also be a highly recursive operation. The minimum height"},{"type":"text","text":" "},{"type":"text","text":"for the minimum width is normally used to set the minimum size constraint"},{"type":"text","text":" "},{"type":"text","text":"on the toplevel."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After the toplevel window has initially requested its size in both"},{"type":"text","text":" "},{"type":"text","text":"dimensions it can go on to allocate itself a reasonable size (or a size"},{"type":"text","text":" "},{"type":"text","text":"previously specified with [method"},{"type":"codeVoice","code":"Gtk.Window.set_default_size"},{"type":"text","text":"]). During the"},{"type":"text","text":" "},{"type":"text","text":"recursive allocation process it’s important to note that request cycles"},{"type":"text","text":" "},{"type":"text","text":"will be recursively executed while widgets allocate their children."},{"type":"text","text":" "},{"type":"text","text":"Each widget, once allocated a size, will go on to first share the"},{"type":"text","text":" "},{"type":"text","text":"space in one orientation among its children and then request each child’s"},{"type":"text","text":" "},{"type":"text","text":"height for its target allocated width or its width for allocated height,"},{"type":"text","text":" "},{"type":"text","text":"depending. In this way a "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" will typically be requested its size"},{"type":"text","text":" "},{"type":"text","text":"a number of times before actually being allocated a size. The size a"},{"type":"text","text":" "},{"type":"text","text":"widget is finally allocated can of course differ from the size it has"},{"type":"text","text":" "},{"type":"text","text":"requested. For this reason, "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" caches a  small number of results"},{"type":"text","text":" "},{"type":"text","text":"to avoid re-querying for the same sizes in one allocation cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a widget does move content around to intelligently use up the"},{"type":"text","text":" "},{"type":"text","text":"allocated size then it must support the request in both"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkSizeRequestMode"},{"type":"text","text":"s even if the widget in question only"},{"type":"text","text":" "},{"type":"text","text":"trades sizes in a single orientation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, a [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label"},{"type":"text","text":"] that does height-for-width word wrapping"},{"type":"text","text":" "},{"type":"text","text":"will not expect to have [vfunc"},{"type":"codeVoice","code":"Gtk.Widget.measure"},{"type":"text","text":"] with an orientation of"},{"type":"text","text":" "},{"type":"codeVoice","code":"vertical"},{"type":"text","text":" called because that call is specific to a"},{"type":"text","text":" "},{"type":"text","text":"width-for-height request. In this case the label must return the height"},{"type":"text","text":" "},{"type":"text","text":"required for its own minimum possible width. By following this rule any"},{"type":"text","text":" "},{"type":"text","text":"widget that handles height-for-width or width-for-height requests will"},{"type":"text","text":" "},{"type":"text","text":"always be allocated at least enough space to fit its own content."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here are some examples of how a "},{"type":"codeVoice","code":"heightForWidth"},{"type":"text","text":" widget"},{"type":"text","text":" "},{"type":"text","text":"generally deals with width-for-height requests:"}]},{"type":"codeListing","syntax":"c","code":["static void","foo_widget_measure (GtkWidget      *widget,","                    GtkOrientation  orientation,","                    int             for_size,","                    int            *minimum_size,","                    int            *natural_size,","                    int            *minimum_baseline,","                    int            *natural_baseline)","{","  if (orientation == GTK_ORIENTATION_HORIZONTAL)","    {","      \/\/ Calculate minimum and natural width","    }","  else \/\/ VERTICAL","    {","      if (i_am_in_height_for_width_mode)","        {","          int min_width, dummy;","","          \/\/ First, get the minimum width of our widget","          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_HORIZONTAL, -1,","                                                  &min_width, &dummy, &dummy, &dummy);","","          \/\/ Now use the minimum width to retrieve the minimum and natural height to display","          \/\/ that width.","          GTK_WIDGET_GET_CLASS (widget)->measure (widget, GTK_ORIENTATION_VERTICAL, min_width,","                                                  minimum_size, natural_size, &dummy, &dummy);","        }","      else","        {","          \/\/ ... some widgets do both.","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Often a widget needs to get its own request during size request or"},{"type":"text","text":" "},{"type":"text","text":"allocation. For example, when computing height it may need to also"},{"type":"text","text":" "},{"type":"text","text":"compute width. Or when deciding how to use an allocation, the widget"},{"type":"text","text":" "},{"type":"text","text":"may need to know its natural size. In these cases, the widget should"},{"type":"text","text":" "},{"type":"text","text":"be careful to call its virtual methods directly, like in the code"},{"type":"text","text":" "},{"type":"text","text":"example above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It will not work to use the wrapper function [method"},{"type":"codeVoice","code":"Gtk.Widget.measure"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"inside your own [vfunc"},{"type":"codeVoice","code":"Gtk.Widget.size_allocate"},{"type":"text","text":"] implementation."},{"type":"text","text":" "},{"type":"text","text":"These return a request adjusted by [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/SizeGroup"},{"type":"text","text":"], the widget’s"},{"type":"text","text":" "},{"type":"text","text":"align and expand flags, as well as its CSS style."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a widget used the wrappers inside its virtual method implementations,"},{"type":"text","text":" "},{"type":"text","text":"then the adjustments (such as widget margins) would be applied"},{"type":"text","text":" "},{"type":"text","text":"twice. GTK therefore does not allow this and will warn if you try"},{"type":"text","text":" "},{"type":"text","text":"to do it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Of course if you are getting the size request for another widget, such"},{"type":"text","text":" "},{"type":"text","text":"as a child widget, you must use [id"},{"type":"codeVoice","code":"measure"},{"type":"text","text":"]; otherwise, you"},{"type":"text","text":" "},{"type":"text","text":"would not properly consider widget margins, [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/SizeGroup"},{"type":"text","text":"], and"},{"type":"text","text":" "},{"type":"text","text":"so forth."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"GTK also supports baseline vertical alignment of widgets. This"},{"type":"text","text":" "},{"type":"text","text":"means that widgets are positioned such that the typographical baseline of"},{"type":"text","text":" "},{"type":"text","text":"widgets in the same row are aligned. This happens if a widget supports"},{"type":"text","text":" "},{"type":"text","text":"baselines, has a vertical alignment using baselines, and is inside"},{"type":"text","text":" "},{"type":"text","text":"a widget that supports baselines and has a natural “row” that it aligns to"},{"type":"text","text":" "},{"type":"text","text":"the baseline, or a baseline assigned to it by the grandparent."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Baseline alignment support for a widget is also done by the"},{"type":"text","text":" "},{"type":"text","text":"[vfunc"},{"type":"codeVoice","code":"Gtk.Widget.measure"},{"type":"text","text":"] virtual function. It allows you to report"},{"type":"text","text":" "},{"type":"text","text":"both a minimum and natural size."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a widget ends up baseline aligned it will be allocated all the space in"},{"type":"text","text":" "},{"type":"text","text":"the parent as if it was "},{"type":"codeVoice","code":"fill"},{"type":"text","text":", but the selected baseline can be"},{"type":"text","text":" "},{"type":"text","text":"found via [id"},{"type":"codeVoice","code":"getBaseline"},{"type":"text","text":"]. If the baseline has a"},{"type":"text","text":" "},{"type":"text","text":"value other than -1 you need to align the widget such that the baseline"},{"type":"text","text":" "},{"type":"text","text":"appears at the position."}]},{"anchor":"GtkWidget-as-GtkBuildable","level":3,"type":"heading","text":"GtkWidget as GtkBuildable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" implementation of the "},{"type":"codeVoice","code":"GtkBuildable"},{"type":"text","text":" interface"},{"type":"text","text":" "},{"type":"text","text":"supports various custom elements to specify additional aspects of widgets"},{"type":"text","text":" "},{"type":"text","text":"that are not directly expressed as properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the widget uses a [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/LayoutManager"},{"type":"text","text":"], "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" supports"},{"type":"text","text":" "},{"type":"text","text":"a custom "},{"type":"codeVoice","code":"<layout>"},{"type":"text","text":" element, used to define layout properties:"}]},{"type":"codeListing","syntax":"xml","code":["<object class=\"GtkGrid\" id=\"my_grid\">","  <child>","    <object class=\"GtkLabel\" id=\"label1\">","      <property name=\"label\">Description<\/property>","      <layout>","        <property name=\"column\">0<\/property>","        <property name=\"row\">0<\/property>","        <property name=\"row-span\">1<\/property>","        <property name=\"column-span\">1<\/property>","      <\/layout>","    <\/object>","  <\/child>","  <child>","    <object class=\"GtkEntry\" id=\"description_entry\">","      <layout>","        <property name=\"column\">1<\/property>","        <property name=\"row\">0<\/property>","        <property name=\"row-span\">1<\/property>","        <property name=\"column-span\">1<\/property>","      <\/layout>","    <\/object>","  <\/child>","<\/object>"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" allows style information such as style classes to"},{"type":"text","text":" "},{"type":"text","text":"be associated with widgets, using the custom "},{"type":"codeVoice","code":"<style>"},{"type":"text","text":" element:"}]},{"type":"codeListing","syntax":"xml","code":["<object class=\"GtkButton\" id=\"button1\">","  <style>","    <class name=\"my-special-button-class\"\/>","    <class name=\"dark-button\"\/>","  <\/style>","<\/object>"]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" allows defining accessibility information, such as properties,"},{"type":"text","text":" "},{"type":"text","text":"relations, and states, using the custom "},{"type":"codeVoice","code":"<accessibility>"},{"type":"text","text":" element:"}]},{"type":"codeListing","syntax":"xml","code":["<object class=\"GtkButton\" id=\"button1\">","  <accessibility>","    <property name=\"label\">Download<\/property>","    <relation name=\"labelled-by\">label1<\/relation>","  <\/accessibility>","<\/object>"]},{"anchor":"Building-composite-widgets-from-template-XML","level":3,"type":"heading","text":"Building composite widgets from template XML"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"GtkWidget "},{"type":"text","text":"exposes some facilities to automate the procedure"},{"type":"text","text":" "},{"type":"text","text":"of creating composite widgets using “templates”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To create composite widgets with "},{"type":"codeVoice","code":"GtkBuilder"},{"type":"text","text":" XML, one must associate"},{"type":"text","text":" "},{"type":"text","text":"the interface description with the widget class at class initialization"},{"type":"text","text":" "},{"type":"text","text":"time using [method"},{"type":"codeVoice","code":"Gtk.WidgetClass.set_template"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The interface description semantics expected in composite template descriptions"},{"type":"text","text":" "},{"type":"text","text":"is slightly different from regular [class"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Builder"},{"type":"text","text":"] XML."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike regular interface descriptions, [method"},{"type":"codeVoice","code":"Gtk.WidgetClass.set_template"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"will expect a "},{"type":"codeVoice","code":"<template>"},{"type":"text","text":" tag as a direct child of the toplevel"},{"type":"text","text":" "},{"type":"codeVoice","code":"<interface>"},{"type":"text","text":" tag. The "},{"type":"codeVoice","code":"<template>"},{"type":"text","text":" tag must specify the “class” attribute"},{"type":"text","text":" "},{"type":"text","text":"which must be the type name of the widget. Optionally, the “parent”"},{"type":"text","text":" "},{"type":"text","text":"attribute may be specified to specify the direct parent type of the widget"},{"type":"text","text":" "},{"type":"text","text":"type; this is ignored by "},{"type":"codeVoice","code":"GtkBuilder"},{"type":"text","text":" but can be used by UI design tools to"},{"type":"text","text":" "},{"type":"text","text":"introspect what kind of properties and internal children exist for a given"},{"type":"text","text":" "},{"type":"text","text":"type when the actual type does not exist."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The XML which is contained inside the "},{"type":"codeVoice","code":"<template>"},{"type":"text","text":" tag behaves as if it were"},{"type":"text","text":" "},{"type":"text","text":"added to the "},{"type":"codeVoice","code":"<object>"},{"type":"text","text":" tag defining the widget itself. You may set properties"},{"type":"text","text":" "},{"type":"text","text":"on a widget by inserting "},{"type":"codeVoice","code":"<property>"},{"type":"text","text":" tags into the "},{"type":"codeVoice","code":"<template>"},{"type":"text","text":" tag, and also"},{"type":"text","text":" "},{"type":"text","text":"add "},{"type":"codeVoice","code":"<child>"},{"type":"text","text":" tags to add children and extend a widget in the normal way you"},{"type":"text","text":" "},{"type":"text","text":"would with "},{"type":"codeVoice","code":"<object>"},{"type":"text","text":" tags."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Additionally, "},{"type":"codeVoice","code":"<object>"},{"type":"text","text":" tags can also be added before and after the initial"},{"type":"text","text":" "},{"type":"codeVoice","code":"<template>"},{"type":"text","text":" tag in the normal way, allowing one to define auxiliary objects"},{"type":"text","text":" "},{"type":"text","text":"which might be referenced by other widgets declared as children of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"<template>"},{"type":"text","text":" tag."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of a template definition:"}]},{"type":"codeListing","syntax":"xml","code":["<interface>","  <template class=\"FooWidget\" parent=\"GtkBox\">","    <property name=\"orientation\">horizontal<\/property>","    <property name=\"spacing\">4<\/property>","    <child>","      <object class=\"GtkButton\" id=\"hello_button\">","        <property name=\"label\">Hello World<\/property>","        <signal name=\"clicked\" handler=\"hello_button_clicked\" object=\"FooWidget\" swapped=\"yes\"\/>","      <\/object>","    <\/child>","    <child>","      <object class=\"GtkButton\" id=\"goodbye_button\">","        <property name=\"label\">Goodbye World<\/property>","      <\/object>","    <\/child>","  <\/template>","<\/interface>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically, you’ll place the template fragment into a file that is"},{"type":"text","text":" "},{"type":"text","text":"bundled with your project, using "},{"type":"codeVoice","code":"GResource"},{"type":"text","text":". In order to load the"},{"type":"text","text":" "},{"type":"text","text":"template, you need to call [method"},{"type":"codeVoice","code":"Gtk.WidgetClass.set_template_from_resource"},{"type":"text","text":"]"},{"type":"text","text":" "},{"type":"text","text":"from the class initialization of your "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" type:"}]},{"type":"codeListing","syntax":"c","code":["static void","foo_widget_class_init (FooWidgetClass *klass)","{","  \/\/ ...","","  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),","                                               \"\/com\/example\/ui\/foowidget.ui\");","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You will also need to call [method"},{"type":"codeVoice","code":"Gtk.Widget.init_template"},{"type":"text","text":"] from the"},{"type":"text","text":" "},{"type":"text","text":"instance initialization function:"}]},{"type":"codeListing","syntax":"c","code":["static void","foo_widget_init (FooWidget *self)","{","  gtk_widget_init_template (GTK_WIDGET (self));","","  \/\/ Initialize the rest of the widget...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"as well as calling [method"},{"type":"codeVoice","code":"Gtk.Widget.dispose_template"},{"type":"text","text":"] from the dispose"},{"type":"text","text":" "},{"type":"text","text":"function:"}]},{"type":"codeListing","syntax":"c","code":["static void","foo_widget_dispose (GObject *gobject)","{","  FooWidget *self = FOO_WIDGET (gobject);","","  \/\/ Dispose objects for which you have a reference...","","  \/\/ Clear the template children for this widget type","  gtk_widget_dispose_template (GTK_WIDGET (self), FOO_TYPE_WIDGET);","","  G_OBJECT_CLASS (foo_widget_parent_class)->dispose (gobject);","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can access widgets defined in the template using the"},{"type":"text","text":" "},{"type":"text","text":"[id"},{"type":"codeVoice","code":"getTemplateChild"},{"type":"text","text":"] function, but you will typically declare"},{"type":"text","text":" "},{"type":"text","text":"a pointer in the instance private data structure of your type using the same"},{"type":"text","text":" "},{"type":"text","text":"name as the widget in the template definition, and call"},{"type":"text","text":" "},{"type":"text","text":"[method"},{"type":"codeVoice","code":"Gtk.WidgetClass.bind_template_child_full"},{"type":"text","text":"] (or one of its wrapper macros"},{"type":"text","text":" "},{"type":"text","text":"[func"},{"type":"codeVoice","code":"Gtk.widget_class_bind_template_child"},{"type":"text","text":"] and [func"},{"type":"codeVoice","code":"Gtk.widget_class_bind_template_child_private"},{"type":"text","text":"])"},{"type":"text","text":" "},{"type":"text","text":"with that name, e.g."}]},{"type":"codeListing","syntax":"c","code":["typedef struct {","  GtkWidget *hello_button;","  GtkWidget *goodbye_button;","} FooWidgetPrivate;","","G_DEFINE_TYPE_WITH_PRIVATE (FooWidget, foo_widget, GTK_TYPE_BOX)","","static void","foo_widget_dispose (GObject *gobject)","{","  gtk_widget_dispose_template (GTK_WIDGET (gobject), FOO_TYPE_WIDGET);","","  G_OBJECT_CLASS (foo_widget_parent_class)->dispose (gobject);","}","","static void","foo_widget_class_init (FooWidgetClass *klass)","{","  \/\/ ...","  G_OBJECT_CLASS (klass)->dispose = foo_widget_dispose;","","  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),","                                               \"\/com\/example\/ui\/foowidget.ui\");","  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),","                                                FooWidget, hello_button);","  gtk_widget_class_bind_template_child_private (GTK_WIDGET_CLASS (klass),","                                                FooWidget, goodbye_button);","}","","static void","foo_widget_init (FooWidget *widget)","{","  gtk_widget_init_template (GTK_WIDGET (widget));","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use [method"},{"type":"codeVoice","code":"Gtk.WidgetClass.bind_template_callback_full"},{"type":"text","text":"] (or"},{"type":"text","text":" "},{"type":"text","text":"is wrapper macro [func"},{"type":"codeVoice","code":"Gtk.widget_class_bind_template_callback"},{"type":"text","text":"]) to connect"},{"type":"text","text":" "},{"type":"text","text":"a signal callback defined in the template with a function visible in the"},{"type":"text","text":" "},{"type":"text","text":"scope of the class, e.g."}]},{"type":"codeListing","syntax":"c","code":["\/\/ the signal handler has the instance and user data swapped","\/\/ because of the swapped=\"yes\" attribute in the template XML","static void","hello_button_clicked (FooWidget *self,","                      GtkButton *button)","{","  g_print (\"Hello, world!\\n\");","}","","static void","foo_widget_class_init (FooWidgetClass *klass)","{","  \/\/ ...","  gtk_widget_class_set_template_from_resource (GTK_WIDGET_CLASS (klass),","                                               \"\/com\/example\/ui\/foowidget.ui\");","  gtk_widget_class_bind_template_callback (GTK_WIDGET_CLASS (klass), hello_button_clicked);","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Widget"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef"},{"type":"text","text":") if you want to use Automatic Reference Counting for memory management of the underlying "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/widgetref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/AccessibleProtocol","doc:\/\/Gtk\/documentation\/Gtk\/BuildableProtocol","doc:\/\/Gtk\/documentation\/Gtk\/ConstraintTargetProtocol","doc:\/\/Gtk\/4GLib14PointerWrapperP","doc:\/\/Gtk\/10GLibObject14GWeakCapturingP","doc:\/\/Gtk\/10GLibObject24InitiallyUnownedProtocolP","doc:\/\/Gtk\/10GLibObject0B8ProtocolP","doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The base class for all widgets."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WidgetRef"}],"title":"WidgetRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:3Gtk9WidgetRefV","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"WidgetRef"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-2t3uz","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-3jwhs","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-5aoy2","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-5fku8","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-6qyym","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-9m3t5","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(cPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(constPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(gconstpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(gpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(mutating:)","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/ptr"]},{"title":"Type Methods","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/unowned(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/AccessibleProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/BuildableProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/ConstraintTargetProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/GWeakCapturing-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/InitiallyUnownedProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/ObjectProtocol-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/WidgetProtocol-Implementations"],"generated":true}],"references":{"doc://Gtk/documentation/Gtk/WidgetRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(constpointer:)"},"doc://Gtk/documentation/Gtk/SizeGroup":{"role":"symbol","title":"SizeGroup","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SizeGroup"}],"abstract":[{"type":"codeVoice","code":"GtkSizeGroup"},{"type":"text","text":" groups widgets together so they all request the same size."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/SizeGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SizeGroup"}],"url":"\/documentation\/gtk\/sizegroup"},"doc://Gtk/documentation/Gtk/WidgetRef/AccessibleProtocol-Implementations":{"role":"collectionGroup","title":"AccessibleProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/AccessibleProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/widgetref\/accessibleprotocol-implementations"},"doc://Gtk/documentation/Gtk/WidgetRef/unowned(_:)":{"role":"symbol","title":"unowned(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unowned"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"WidgetRef","preciseIdentifier":"s:3Gtk9WidgetRefV"}],"abstract":[{"type":"text","text":"This factory is syntactic sugar for setting weak pointers wrapped in "},{"type":"codeVoice","code":"GWeak<T>"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/unowned(_:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/unowned(_:)"},"doc://Gtk/documentation/Gtk/LayoutManager":{"role":"symbol","title":"LayoutManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"LayoutManager"}],"abstract":[{"type":"text","text":"Layout managers are delegate classes that handle the preferred size"},{"type":"text","text":" "},{"type":"text","text":"and the allocation of a widget."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/LayoutManager","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LayoutManager"}],"url":"\/documentation\/gtk\/layoutmanager"},"doc://Gtk/documentation/Gtk/WidgetRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/widget_ptr-2txaa"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/ptr"},"doc://Gtk/10GLibObject0B8ProtocolP":{"type":"unresolvable","title":"GLibObject.ObjectProtocol","identifier":"doc:\/\/Gtk\/10GLibObject0B8ProtocolP"},"doc://Gtk/documentation/Gtk/WidgetRef/init(_:)-6qyym":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkWidget"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-6qyym","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(_:)-6qyym"},"doc://Gtk/documentation/Gtk/WidgetRef/ObjectProtocol-Implementations":{"role":"collectionGroup","title":"ObjectProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/ObjectProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/widgetref\/objectprotocol-implementations"},"doc://Gtk/documentation/Gtk/WidgetRef/WidgetProtocol-Implementations":{"role":"collectionGroup","title":"WidgetProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/WidgetProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/widgetref\/widgetprotocol-implementations"},"doc://Gtk/documentation/Gtk/SizeRequestMode":{"role":"symbol","title":"SizeRequestMode","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"SizeRequestMode"}],"abstract":[{"type":"text","text":"Specifies a preference for height-for-width or"},{"type":"text","text":" "},{"type":"text","text":"width-for-height geometry management."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/SizeRequestMode","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SizeRequestMode"}],"url":"\/documentation\/gtk\/sizerequestmode"},"doc://Gtk/documentation/Gtk/ConstraintTargetProtocol":{"role":"symbol","title":"ConstraintTargetProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConstraintTargetProtocol"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkConstraintTarget"},{"type":"text","text":" interface is implemented by objects that"},{"type":"text","text":" "},{"type":"text","text":"can be used as source or target in "},{"type":"codeVoice","code":"GtkConstraint"},{"type":"text","text":"s."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/ConstraintTargetProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ConstraintTargetProtocol"}],"url":"\/documentation\/gtk\/constrainttargetprotocol"},"doc://Gtk/documentation/Gtk/Builder":{"role":"symbol","title":"Builder","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Builder"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkBuilder"},{"type":"text","text":" reads XML descriptions of a user interface and"},{"type":"text","text":" "},{"type":"text","text":"instantiates the described objects."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Builder","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Builder"}],"url":"\/documentation\/gtk\/builder"},"doc://Gtk/documentation/Gtk/WidgetProtocol":{"role":"symbol","title":"WidgetProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"WidgetProtocol"}],"abstract":[{"type":"text","text":"The base class for all widgets."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WidgetProtocol"}],"url":"\/documentation\/gtk\/widgetprotocol"},"doc://Gtk/documentation/Gtk/WidgetRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(cpointer:)"},"doc://Gtk/documentation/Gtk/WidgetRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(opaquepointer:)"},"doc://Gtk/documentation/Gtk/WidgetRef/ConstraintTargetProtocol-Implementations":{"role":"collectionGroup","title":"ConstraintTargetProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/ConstraintTargetProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/widgetref\/constrainttargetprotocol-implementations"},"doc://Gtk/documentation/Gtk/WidgetRef/InitiallyUnownedProtocol-Implementations":{"role":"collectionGroup","title":"InitiallyUnownedProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/InitiallyUnownedProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/widgetref\/initiallyunownedprotocol-implementations"},"doc://Gtk/10GLibObject24InitiallyUnownedProtocolP":{"type":"unresolvable","title":"GLibObject.InitiallyUnownedProtocol","identifier":"doc:\/\/Gtk\/10GLibObject24InitiallyUnownedProtocolP"},"doc://Gtk/documentation/Gtk/WidgetRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(mutating:)"},"doc://Gtk/documentation/Gtk/WidgetRef/init(_:)-5fku8":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkWidget"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-5fku8","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(_:)-5fku8"},"doc://Gtk/documentation/Gtk/WidgetRef/init(_:)-2t3uz":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkWidget"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-2t3uz","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(_:)-2t3uz"},"doc://Gtk/documentation/Gtk/WidgetRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(gconstpointer:)"},"doc://Gtk/documentation/Gtk/WidgetProtocol/widget_ptr-2txaa":{"defaultImplementations":1,"role":"symbol","title":"widget_ptr","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"widget_ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkWidget"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Typed pointer to the underlying "},{"type":"codeVoice","code":"GtkWidget"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol\/widget_ptr-2txaa","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/gtk\/widgetprotocol\/widget_ptr-2txaa"},"doc://Gtk/documentation/Gtk/AccessibleProtocol":{"role":"symbol","title":"AccessibleProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AccessibleProtocol"}],"abstract":[{"type":"codeVoice","code":"GtkAccessible"},{"type":"text","text":" is an interface for describing UI elements for"},{"type":"text","text":" "},{"type":"text","text":"Assistive Technologies."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/AccessibleProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AccessibleProtocol"}],"url":"\/documentation\/gtk\/accessibleprotocol"},"doc://Gtk/documentation/Gtk/WidgetRef/init(_:)-5aoy2":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetProtocol"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-5aoy2","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(_:)-5aoy2"},"doc://Gtk/10GLibObject14GWeakCapturingP":{"type":"unresolvable","title":"GLibObject.GWeakCapturing","identifier":"doc:\/\/Gtk\/10GLibObject14GWeakCapturingP"},"doc://Gtk/documentation/Gtk/WidgetRef/GWeakCapturing-Implementations":{"role":"collectionGroup","title":"GWeakCapturing Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/GWeakCapturing-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/widgetref\/gweakcapturing-implementations"},"doc://Gtk/documentation/Gtk/Widget":{"role":"symbol","title":"Widget","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Widget"}],"abstract":[{"type":"text","text":"The base class for all widgets."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Widget","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Widget"}],"url":"\/documentation\/gtk\/widget"},"doc://Gtk/documentation/Gtk/WidgetRef/init(_:)-9m3t5":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkWidget"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-9m3t5","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(_:)-9m3t5"},"doc://Gtk/documentation/Gtk/WidgetRef":{"role":"symbol","title":"WidgetRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WidgetRef"}],"abstract":[{"type":"text","text":"The base class for all widgets."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"WidgetRef"}],"url":"\/documentation\/gtk\/widgetref"},"doc://Gtk/documentation/Gtk/Label":{"role":"symbol","title":"Label","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Label"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkLabel"},{"type":"text","text":" widget displays a small amount of text."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/Label","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Label"}],"url":"\/documentation\/gtk\/label"},"doc://Gtk/documentation/Gtk/WidgetRef/BuildableProtocol-Implementations":{"role":"collectionGroup","title":"BuildableProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/BuildableProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/widgetref\/buildableprotocol-implementations"},"doc://Gtk/documentation/Gtk/BuildableProtocol":{"role":"symbol","title":"BuildableProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BuildableProtocol"}],"abstract":[{"type":"codeVoice","code":"GtkBuildable"},{"type":"text","text":" allows objects to extend and customize their deserialization"},{"type":"text","text":" "},{"type":"text","text":"from ui files."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/BuildableProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BuildableProtocol"}],"url":"\/documentation\/gtk\/buildableprotocol"},"doc://Gtk/documentation/Gtk/WidgetRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(gpointer:)"},"doc://Gtk/documentation/Gtk/WidgetRef/init(_:)-3jwhs":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GObject"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Object pointer widget constructor."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/WidgetRef\/init(_:)-3jwhs","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/widgetref\/init(_:)-3jwhs"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"}}}