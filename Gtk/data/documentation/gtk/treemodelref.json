{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" interface defines a generic tree interface for"},{"type":"text","text":" "},{"type":"text","text":"use by the "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":" widget. It is an abstract interface, and"},{"type":"text","text":" "},{"type":"text","text":"is designed to be usable with any appropriate data structure. The"},{"type":"text","text":" "},{"type":"text","text":"programmer just has to implement this interface on their own data"},{"type":"text","text":" "},{"type":"text","text":"type for it to be viewable by a "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":" widget."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The model is represented as a hierarchical tree of strongly-typed,"},{"type":"text","text":" "},{"type":"text","text":"columned data. In other words, the model can be seen as a tree where"},{"type":"text","text":" "},{"type":"text","text":"every node has different values depending on which column is being"},{"type":"text","text":" "},{"type":"text","text":"queried. The type of data found in a column is determined by using"},{"type":"text","text":" "},{"type":"text","text":"the GType system (ie. "},{"type":"codeVoice","code":"G_TYPE_INT"},{"type":"text","text":", "},{"type":"codeVoice","code":"GTK_TYPE_BUTTON"},{"type":"text","text":", "},{"type":"codeVoice","code":"G_TYPE_POINTER"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"etc). The types are homogeneous per column across all nodes. It is"},{"type":"text","text":" "},{"type":"text","text":"important to note that this interface only provides a way of examining"},{"type":"text","text":" "},{"type":"text","text":"a model and observing changes. The implementation of each individual"},{"type":"text","text":" "},{"type":"text","text":"model decides how and if changes are made."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to make life simpler for programmers who do not need to"},{"type":"text","text":" "},{"type":"text","text":"write their own specialized model, two generic models are provided"},{"type":"text","text":" "},{"type":"text","text":"— the "},{"type":"codeVoice","code":"GtkTreeStore"},{"type":"text","text":" and the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":". To use these, the"},{"type":"text","text":" "},{"type":"text","text":"developer simply pushes data into these models as necessary. These"},{"type":"text","text":" "},{"type":"text","text":"models provide the data structure as well as all appropriate tree"},{"type":"text","text":" "},{"type":"text","text":"interfaces. As a result, implementing drag and drop, sorting, and"},{"type":"text","text":" "},{"type":"text","text":"storing data is trivial. For the vast majority of trees and lists,"},{"type":"text","text":" "},{"type":"text","text":"these two models are sufficient."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Models are accessed on a node\/column level of granularity. One can"},{"type":"text","text":" "},{"type":"text","text":"query for the value of a model at a certain node and a certain"},{"type":"text","text":" "},{"type":"text","text":"column on that node. There are two structures used to reference a"},{"type":"text","text":" "},{"type":"text","text":"particular node in a model. They are the [struct"},{"type":"codeVoice","code":"Gtk.TreePath"},{"type":"text","text":"] and"},{"type":"text","text":" "},{"type":"text","text":"the [struct"},{"type":"codeVoice","code":"Gtk.TreeIter"},{"type":"text","text":"] (“iter” is short for iterator). Most of the"},{"type":"text","text":" "},{"type":"text","text":"interface consists of operations on a [struct"},{"type":"codeVoice","code":"Gtk.TreeIter"},{"type":"text","text":"]."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A path is essentially a potential node. It is a location on a model"},{"type":"text","text":" "},{"type":"text","text":"that may or may not actually correspond to a node on a specific"},{"type":"text","text":" "},{"type":"text","text":"model. A [struct"},{"type":"codeVoice","code":"Gtk.TreePath"},{"type":"text","text":"] can be converted into either an"},{"type":"text","text":" "},{"type":"text","text":"array of unsigned integers or a string. The string form is a list"},{"type":"text","text":" "},{"type":"text","text":"of numbers separated by a colon. Each number refers to the offset"},{"type":"text","text":" "},{"type":"text","text":"at that level. Thus, the path "},{"type":"codeVoice","code":"0"},{"type":"text","text":" refers to the root"},{"type":"text","text":" "},{"type":"text","text":"node and the path "},{"type":"codeVoice","code":"2:4"},{"type":"text","text":" refers to the fifth child of"},{"type":"text","text":" "},{"type":"text","text":"the third node."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By contrast, a [struct"},{"type":"codeVoice","code":"Gtk.TreeIter"},{"type":"text","text":"] is a reference to a specific node on"},{"type":"text","text":" "},{"type":"text","text":"a specific model. It is a generic struct with an integer and three"},{"type":"text","text":" "},{"type":"text","text":"generic pointers. These are filled in by the model in a model-specific"},{"type":"text","text":" "},{"type":"text","text":"way. One can convert a path to an iterator by calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"gtk_tree_model_get_iter()"},{"type":"text","text":". These iterators are the primary way"},{"type":"text","text":" "},{"type":"text","text":"of accessing a model and are similar to the iterators used by"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTextBuffer"},{"type":"text","text":". They are generally statically allocated on the"},{"type":"text","text":" "},{"type":"text","text":"stack and only used for a short time. The model interface defines"},{"type":"text","text":" "},{"type":"text","text":"a set of operations using them for navigating the model."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is expected that models fill in the iterator with private data."},{"type":"text","text":" "},{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" model, which is internally a simple"},{"type":"text","text":" "},{"type":"text","text":"linked list, stores a list node in one of the pointers. The"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":"Sort stores an array and an offset in two of the"},{"type":"text","text":" "},{"type":"text","text":"pointers. Additionally, there is an integer field. This field is"},{"type":"text","text":" "},{"type":"text","text":"generally filled with a unique stamp per model. This stamp is for"},{"type":"text","text":" "},{"type":"text","text":"catching errors resulting from using invalid iterators with a model."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The lifecycle of an iterator can be a little confusing at first."},{"type":"text","text":" "},{"type":"text","text":"Iterators are expected to always be valid for as long as the model"},{"type":"text","text":" "},{"type":"text","text":"is unchanged (and doesn’t emit a signal). The model is considered"},{"type":"text","text":" "},{"type":"text","text":"to own all outstanding iterators and nothing needs to be done to"},{"type":"text","text":" "},{"type":"text","text":"free them from the user’s point of view. Additionally, some models"},{"type":"text","text":" "},{"type":"text","text":"guarantee that an iterator is valid for as long as the node it refers"},{"type":"text","text":" "},{"type":"text","text":"to is valid (most notably the "},{"type":"codeVoice","code":"GtkTreeStore"},{"type":"text","text":" and "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":")."},{"type":"text","text":" "},{"type":"text","text":"Although generally uninteresting, as one always has to allow for"},{"type":"text","text":" "},{"type":"text","text":"the case where iterators do not persist beyond a signal, some very"},{"type":"text","text":" "},{"type":"text","text":"important performance enhancements were made in the sort model."},{"type":"text","text":" "},{"type":"text","text":"As a result, the "},{"type":"codeVoice","code":"GTK_TREE_MODEL_ITERS_PERSIST"},{"type":"text","text":" flag was added to"},{"type":"text","text":" "},{"type":"text","text":"indicate this behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To help show some common operation of a model, some examples are"},{"type":"text","text":" "},{"type":"text","text":"provided. The first example shows three ways of getting the iter at"},{"type":"text","text":" "},{"type":"text","text":"the location "},{"type":"codeVoice","code":"3:2:5"},{"type":"text","text":". While the first method shown is"},{"type":"text","text":" "},{"type":"text","text":"easier, the second is much more common, as you often get paths from"},{"type":"text","text":" "},{"type":"text","text":"callbacks."}]},{"anchor":"Acquiring-a-GtkTreeIter","level":2,"type":"heading","text":"Acquiring a `GtkTreeIter`"},{"type":"codeListing","syntax":"c","code":["\/\/ Three ways of getting the iter pointing to the location","GtkTreePath *path;","GtkTreeIter iter;","GtkTreeIter parent_iter;","","\/\/ get the iterator from a string","gtk_tree_model_get_iter_from_string (model,","                                     &iter,","                                     \"3:2:5\");","","\/\/ get the iterator from a path","path = gtk_tree_path_new_from_string (\"3:2:5\");","gtk_tree_model_get_iter (model, &iter, path);","gtk_tree_path_free (path);","","\/\/ walk the tree to find the iterator","gtk_tree_model_iter_nth_child (model, &iter,","                               NULL, 3);","parent_iter = iter;","gtk_tree_model_iter_nth_child (model, &iter,","                               &parent_iter, 2);","parent_iter = iter;","gtk_tree_model_iter_nth_child (model, &iter,","                               &parent_iter, 5);"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This second example shows a quick way of iterating through a list"},{"type":"text","text":" "},{"type":"text","text":"and getting a string and an integer from each row. The"},{"type":"text","text":" "},{"type":"codeVoice","code":"populate_model()"},{"type":"text","text":" function used below is not"},{"type":"text","text":" "},{"type":"text","text":"shown, as it is specific to the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":". For information on"},{"type":"text","text":" "},{"type":"text","text":"how to write such a function, see the "},{"type":"codeVoice","code":"GtkListStore"},{"type":"text","text":" documentation."}]},{"anchor":"Reading-data-from-a-GtkTreeModel","level":2,"type":"heading","text":"Reading data from a `GtkTreeModel`"},{"type":"codeListing","syntax":"c","code":["enum","{","  STRING_COLUMN,","  INT_COLUMN,","  N_COLUMNS","};","","...","","GtkTreeModel *list_store;","GtkTreeIter iter;","gboolean valid;","int row_count = 0;","","\/\/ make a new list_store","list_store = gtk_list_store_new (N_COLUMNS,","                                 G_TYPE_STRING,","                                 G_TYPE_INT);","","\/\/ Fill the list store with data","populate_model (list_store);","","\/\/ Get the first iter in the list, check it is valid and walk","\/\/ through the list, reading each row.","","valid = gtk_tree_model_get_iter_first (list_store,","                                       &iter);","while (valid)"," {","   char *str_data;","   int    int_data;","","   \/\/ Make sure you terminate calls to `gtk_tree_model_get()` with a “-1” value","   gtk_tree_model_get (list_store, &iter,","                       STRING_COLUMN, &str_data,","                       INT_COLUMN, &int_data,","                       -1);","","   \/\/ Do something with the data","   g_print (\"Row `d:` (`s`,`d`)\\n\",","            row_count, str_data, int_data);","   g_free (str_data);","","   valid = gtk_tree_model_iter_next (list_store,","                                     &iter);","   row_count++;"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" interface contains two methods for reference"},{"type":"text","text":" "},{"type":"text","text":"counting: "},{"type":"codeVoice","code":"gtk_tree_model_ref_node()"},{"type":"text","text":" and "},{"type":"codeVoice","code":"gtk_tree_model_unref_node()"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These two methods are optional to implement. The reference counting"},{"type":"text","text":" "},{"type":"text","text":"is meant as a way for views to let models know when nodes are being"},{"type":"text","text":" "},{"type":"text","text":"displayed. "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":" will take a reference on a node when it is"},{"type":"text","text":" "},{"type":"text","text":"visible, which means the node is either in the toplevel or expanded."},{"type":"text","text":" "},{"type":"text","text":"Being displayed does not mean that the node is currently directly"},{"type":"text","text":" "},{"type":"text","text":"visible to the user in the viewport. Based on this reference counting"},{"type":"text","text":" "},{"type":"text","text":"scheme a caching model, for example, can decide whether or not to cache"},{"type":"text","text":" "},{"type":"text","text":"a node based on the reference count. A file-system based model would"},{"type":"text","text":" "},{"type":"text","text":"not want to keep the entire file hierarchy in memory, but just the"},{"type":"text","text":" "},{"type":"text","text":"folders that are currently expanded in every current view."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When working with reference counting, the following rules must be taken"},{"type":"text","text":" "},{"type":"text","text":"into account:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Never take a reference on a node without owning a reference on its parent."},{"type":"text","text":" "},{"type":"text","text":"This means that all parent nodes of a referenced node must be referenced"},{"type":"text","text":" "},{"type":"text","text":"as well."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Outstanding references on a deleted node are not released. This is not"},{"type":"text","text":" "},{"type":"text","text":"possible because the node has already been deleted by the time the"},{"type":"text","text":" "},{"type":"text","text":"row-deleted signal is received."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Models are not obligated to emit a signal on rows of which none of its"},{"type":"text","text":" "},{"type":"text","text":"siblings are referenced. To phrase this differently, signals are only"},{"type":"text","text":" "},{"type":"text","text":"required for levels in which nodes are referenced. For the root level"},{"type":"text","text":" "},{"type":"text","text":"however, signals must be emitted at all times (however the root level"},{"type":"text","text":" "},{"type":"text","text":"is always referenced when any view is attached)."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"TreeModelRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"codeVoice","code":"TreeModelProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"TreeModelRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/treemodelref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/4GLib14PointerWrapperP","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The tree interface used by GtkTreeView"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelRef"}],"title":"TreeModelRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:3Gtk12TreeModelRefV","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"TreeModelRef"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-5z4zt","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-69pc7","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-6ntdh","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-87c3a","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-knbf","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(cPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(constPointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(gconstpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(gpointer:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(mutating:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/PointerWrapper-Implementations","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/TreeModelProtocol-Implementations"],"generated":true}],"references":{"doc://Gtk/documentation/Gtk/TreeModelRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(cpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/treemodelref\/pointerwrapper-implementations"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(gpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelRef/TreeModelProtocol-Implementations":{"role":"collectionGroup","title":"TreeModelProtocol Implementations","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/TreeModelProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gtk\/treemodelref\/treemodelprotocol-implementations"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(_:)-knbf":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModel"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-knbf","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(_:)-knbf"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(mutating:)"},"doc://Gtk/documentation/Gtk/TreeModelRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"tree_model_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/ptr"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(constpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(_:)-6ntdh":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModel"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-6ntdh","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(_:)-6ntdh"},"doc://Gtk/documentation/Gtk/TreeModelProtocol":{"role":"symbol","title":"TreeModelProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelProtocol"}],"abstract":[{"type":"text","text":"The tree interface used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelProtocol"}],"url":"\/documentation\/gtk\/treemodelprotocol"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(gconstpointer:)"},"doc://Gtk/documentation/Gtk/TreeModelRef":{"role":"symbol","title":"TreeModelRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelRef"}],"abstract":[{"type":"text","text":"The tree interface used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelRef"}],"url":"\/documentation\/gtk\/treemodelref"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(_:)-5z4zt":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModel"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-5z4zt","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(_:)-5z4zt"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(_:)-69pc7":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"TreeModelProtocol"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-69pc7","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(_:)-69pc7"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"TreeModelProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(opaquepointer:)"},"doc://Gtk/documentation/Gtk/TreeModelRef/init(_:)-87c3a":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModel"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelRef\/init(_:)-87c3a","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelref\/init(_:)-87c3a"}}}