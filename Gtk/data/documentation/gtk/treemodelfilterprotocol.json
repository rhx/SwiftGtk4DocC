{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilterProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"ObjectProtocol","preciseIdentifier":"s:10GLibObject0B8ProtocolP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","preciseIdentifier":"s:3Gtk22TreeDragSourceProtocolP","text":"TreeDragSourceProtocol"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","preciseIdentifier":"s:3Gtk17TreeModelProtocolP","text":"TreeModelProtocol"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" is a tree model which wraps another tree model,"},{"type":"text","text":" "},{"type":"text","text":"and can do the following things:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Filter specific rows, based on data from a “visible column”, a column"},{"type":"text","text":" "},{"type":"text","text":"storing booleans indicating whether the row should be filtered or not,"},{"type":"text","text":" "},{"type":"text","text":"or based on the return value of a “visible function”, which gets a"},{"type":"text","text":" "},{"type":"text","text":"model, iter and user_data and returns a boolean indicating whether the"},{"type":"text","text":" "},{"type":"text","text":"row should be filtered or not."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Modify the “appearance” of the model, using a modify function."},{"type":"text","text":" "},{"type":"text","text":"This is extremely powerful and allows for just changing some"},{"type":"text","text":" "},{"type":"text","text":"values and also for creating a completely different model based"},{"type":"text","text":" "},{"type":"text","text":"on the given child model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Set a different root node, also known as a “virtual root”. You can pass"},{"type":"text","text":" "},{"type":"text","text":"in a "},{"type":"codeVoice","code":"GtkTreePath"},{"type":"text","text":" indicating the root node for the filter at construction"},{"type":"text","text":" "},{"type":"text","text":"time."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The basic API is similar to "},{"type":"codeVoice","code":"GtkTreeModelSort"},{"type":"text","text":". For an example on its usage,"},{"type":"text","text":" "},{"type":"text","text":"see the section on "},{"type":"codeVoice","code":"GtkTreeModelSort"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When using "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":", it is important to realize that"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" maintains an internal cache of all nodes which are"},{"type":"text","text":" "},{"type":"text","text":"visible in its clients. The cache is likely to be a subtree of the tree"},{"type":"text","text":" "},{"type":"text","text":"exposed by the child model. "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" will not cache the entire"},{"type":"text","text":" "},{"type":"text","text":"child model when unnecessary to not compromise the caching mechanism"},{"type":"text","text":" "},{"type":"text","text":"that is exposed by the reference counting scheme. If the child model"},{"type":"text","text":" "},{"type":"text","text":"implements reference counting, unnecessary signals may not be emitted"},{"type":"text","text":" "},{"type":"text","text":"because of reference counting rule 3, see the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" "},{"type":"text","text":"documentation. (Note that e.g. "},{"type":"codeVoice","code":"GtkTreeStore"},{"type":"text","text":" does not implement"},{"type":"text","text":" "},{"type":"text","text":"reference counting and will always emit all signals, even when"},{"type":"text","text":" "},{"type":"text","text":"the receiving node is not visible)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of this, limitations for possible visible functions do apply."},{"type":"text","text":" "},{"type":"text","text":"In general, visible functions should only use data or properties from"},{"type":"text","text":" "},{"type":"text","text":"the node for which the visibility state must be determined, its siblings"},{"type":"text","text":" "},{"type":"text","text":"or its parents. Usually, having a dependency on the state of any child"},{"type":"text","text":" "},{"type":"text","text":"node is not possible, unless references are taken on these explicitly."},{"type":"text","text":" "},{"type":"text","text":"When no such reference exists, no signals may be received for these child"},{"type":"text","text":" "},{"type":"text","text":"nodes (see reference counting rule number 3 in the "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" section)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Determining the visibility state of a given node based on the state"},{"type":"text","text":" "},{"type":"text","text":"of its child nodes is a frequently occurring use case. Therefore,"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" explicitly supports this. For example, when a node"},{"type":"text","text":" "},{"type":"text","text":"does not have any children, you might not want the node to be visible."},{"type":"text","text":" "},{"type":"text","text":"As soon as the first row is added to the node’s child level (or the"},{"type":"text","text":" "},{"type":"text","text":"last row removed), the node’s visibility should be updated."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This introduces a dependency from the node on its child nodes. In order"},{"type":"text","text":" "},{"type":"text","text":"to accommodate this, "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" must make sure the necessary"},{"type":"text","text":" "},{"type":"text","text":"signals are received from the child model. This is achieved by building,"},{"type":"text","text":" "},{"type":"text","text":"for all nodes which are exposed as visible nodes to "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":"’s"},{"type":"text","text":" "},{"type":"text","text":"clients, the child level (if any) and take a reference on the first node"},{"type":"text","text":" "},{"type":"text","text":"in this level. Furthermore, for every row-inserted, row-changed or"},{"type":"text","text":" "},{"type":"text","text":"row-deleted signal (also these which were not handled because the node"},{"type":"text","text":" "},{"type":"text","text":"was not cached), "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" will check if the visibility state"},{"type":"text","text":" "},{"type":"text","text":"of any parent node has changed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Beware, however, that this explicit support is limited to these two"},{"type":"text","text":" "},{"type":"text","text":"cases. For example, if you want a node to be visible only if two nodes"},{"type":"text","text":" "},{"type":"text","text":"in a child’s child level (2 levels deeper) are visible, you are on your"},{"type":"text","text":" "},{"type":"text","text":"own. In this case, either rely on "},{"type":"codeVoice","code":"GtkTreeStore"},{"type":"text","text":" to emit all signals"},{"type":"text","text":" "},{"type":"text","text":"because it does not implement reference counting, or for models that"},{"type":"text","text":" "},{"type":"text","text":"do implement reference counting, obtain references on these child levels"},{"type":"text","text":" "},{"type":"text","text":"yourself."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gtk\/treemodelfilterprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Gtk\/4GLib14PointerWrapperP","doc:\/\/Gtk\/10GLibObject0B8ProtocolP","doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" which hides parts of an underlying tree model"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilterProtocol"}],"title":"TreeModelFilterProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:3Gtk23TreeModelFilterProtocolP","modules":[{"name":"Gtk"}],"navigatorTitle":[{"kind":"identifier","text":"TreeModelFilterProtocol"}]},"hierarchy":{"paths":[["doc:\/\/Gtk\/documentation\/Gtk"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/model","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/parent","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/tree_model_filter_ptr-74a2"]},{"title":"Instance Methods","identifiers":["doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/bind(property:to:_:flags:transformFrom:transformTo:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/clearCache()","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertChildIterToIter(filterIter:childIter:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertChildPathToPath(childPath:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertIterTo(childIter:filterIter:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertPathToChildPath(filterPath:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/get(property:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/getModel()","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/refilter()","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/set(property:value:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/setModifyFunc(nColumns:types:func:data:destroy:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/setVisible(column:)","doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/setVisibleFunc(func:data:destroy:)"]}],"references":{"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol":{"role":"symbol","title":"TreeModelFilterProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilterProtocol"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" which hides parts of an underlying tree model"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelFilterProtocol"}],"url":"\/documentation\/gtk\/treemodelfilterprotocol"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/model":{"role":"symbol","title":"model","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"model"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeModelRef","preciseIdentifier":"s:3Gtk12TreeModelRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns a pointer to the child model of "},{"type":"codeVoice","code":"filter"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/model","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilterprotocol\/model"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/convertChildIterToIter(filterIter:childIter:)":{"role":"symbol","title":"convertChildIterToIter(filterIter:childIter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"convertChildIterToIter"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"filterIter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"childIter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Sets "},{"type":"codeVoice","code":"filterIter"},{"type":"text","text":" to point to the row in "},{"type":"codeVoice","code":"filter"},{"type":"text","text":" that corresponds to the"},{"type":"text","text":" "},{"type":"text","text":"row pointed at by "},{"type":"codeVoice","code":"childIter"},{"type":"text","text":".  If "},{"type":"codeVoice","code":"filterIter"},{"type":"text","text":" was not set, "},{"type":"codeVoice","code":"false"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"returned."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertChildIterToIter(filterIter:childIter:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/convertchilditertoiter(filteriter:childiter:)"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/convertChildPathToPath(childPath:)":{"role":"symbol","title":"convertChildPathToPath(childPath:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"convertChildPathToPath"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreePathT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"childPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreePathT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TreePathRef","preciseIdentifier":"s:3Gtk11TreePathRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Converts "},{"type":"codeVoice","code":"childPath"},{"type":"text","text":" to a path relative to "},{"type":"codeVoice","code":"filter"},{"type":"text","text":". That is, "},{"type":"codeVoice","code":"childPath"},{"type":"text","text":" "},{"type":"text","text":"points to a path in the child model. The rerturned path will point to the"},{"type":"text","text":" "},{"type":"text","text":"same row in the filtered model. If "},{"type":"codeVoice","code":"childPath"},{"type":"text","text":" isn’t a valid path on the"},{"type":"text","text":" "},{"type":"text","text":"child model or points to a row which is not visible in "},{"type":"codeVoice","code":"filter"},{"type":"text","text":", then "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"is returned."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertChildPathToPath(childPath:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/convertchildpathtopath(childpath:)"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/clearCache()":{"role":"symbol","title":"clearCache()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clearCache"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"This function should almost never be called. It clears the "},{"type":"codeVoice","code":"filter"},{"type":"text","text":" "},{"type":"text","text":"of any cached iterators that haven’t been reffed with"},{"type":"text","text":" "},{"type":"codeVoice","code":"gtk_tree_model_ref_node()"},{"type":"text","text":". This might be useful if the child model"},{"type":"text","text":" "},{"type":"text","text":"being filtered is static (and doesn’t change often) and there has been"},{"type":"text","text":" "},{"type":"text","text":"a lot of unreffed access to nodes. As a side effect of this function,"},{"type":"text","text":" "},{"type":"text","text":"all unreffed iters will be invalid."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/clearCache()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/clearcache()"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/get(property:)":{"role":"symbol","title":"get(property:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"get"},{"kind":"text","text":"("},{"kind":"externalParam","text":"property"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeModelFilterPropertyName","preciseIdentifier":"s:3Gtk27TreeModelFilterPropertyNameO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:10GLibObject5ValueC"}],"abstract":[{"type":"text","text":"Get the value of a TreeModelFilter property"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/get(property:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilterprotocol\/get(property:)"},"doc://Gtk/documentation/Gtk":{"role":"collection","title":"Gtk","abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk","kind":"symbol","type":"topic","url":"\/documentation\/gtk"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/bind(property:to:_:flags:transformFrom:transformTo:)":{"role":"symbol","title":"bind(property:to:_:flags:transformFrom:transformTo:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"bind"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Q"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"property"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeModelFilterPropertyName","preciseIdentifier":"s:3Gtk27TreeModelFilterPropertyNameO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Q"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"BindingFlags","preciseIdentifier":"s:10GLibObject12BindingFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"transformFrom"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ValueTransformer","preciseIdentifier":"s:10GLibObject16ValueTransformera"},{"kind":"text","text":", "},{"kind":"externalParam","text":"transformTo"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ValueTransformer","preciseIdentifier":"s:10GLibObject16ValueTransformera"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"BindingRef","preciseIdentifier":"s:10GLibObject10BindingRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Bind a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterPropertyName"},{"type":"text","text":" source property to a given target object."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/bind(property:to:_:flags:transformFrom:transformTo:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilterprotocol\/bind(property:to:_:flags:transformfrom:transformto:)"},"doc://Gtk/documentation/Gtk/TreeModelFilter":{"role":"symbol","title":"TreeModelFilter","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilter"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" which hides parts of an underlying tree model"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelFilter"}],"url":"\/documentation\/gtk\/treemodelfilter"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/setVisibleFunc(func:data:destroy:)":{"role":"symbol","title":"setVisibleFunc(func:data:destroy:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setVisibleFunc"},{"kind":"text","text":"("},{"kind":"externalParam","text":"func"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GtkTreeModelFilterVisibleFunc","preciseIdentifier":"c:gtktreemodelfilter.h@T@GtkTreeModelFilterVisibleFunc"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"destroy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GDestroyNotify","preciseIdentifier":"c:gtypes.h@T@GDestroyNotify"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Sets the visible function used when filtering the "},{"type":"codeVoice","code":"filter"},{"type":"text","text":" to be "},{"type":"codeVoice","code":"func"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The function should return "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the given row should be visible and"},{"type":"text","text":" "},{"type":"codeVoice","code":"false"},{"type":"text","text":" otherwise."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/setVisibleFunc(func:data:destroy:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/setvisiblefunc(func:data:destroy:)"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/parent":{"role":"symbol","title":"parent","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"parent"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObject"}],"abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/parent","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilterprotocol\/parent"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/convertIterTo(childIter:filterIter:)":{"role":"symbol","title":"convertIterTo(childIter:filterIter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"convertIterTo"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreeIterT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"childIter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filterIter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeIterT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Sets "},{"type":"codeVoice","code":"childIter"},{"type":"text","text":" to point to the row pointed to by "},{"type":"codeVoice","code":"filterIter"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertIterTo(childIter:filterIter:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/convertiterto(childiter:filteriter:)"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/setVisible(column:)":{"role":"symbol","title":"setVisible(column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setVisible"},{"kind":"text","text":"("},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Sets "},{"type":"codeVoice","code":"column"},{"type":"text","text":" of the child_model to be the column where "},{"type":"codeVoice","code":"filter"},{"type":"text","text":" should"},{"type":"text","text":" "},{"type":"text","text":"look for visibility information. "},{"type":"codeVoice","code":"columns"},{"type":"text","text":" should be a column of type"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_TYPE_BOOLEAN"},{"type":"text","text":", where "},{"type":"codeVoice","code":"true"},{"type":"text","text":" means that a row is visible, and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"type":"text","text":"if not."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/setVisible(column:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/setvisible(column:)"},"doc://Gtk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Gtk\/4GLib14PointerWrapperP"},"doc://Gtk/documentation/Gtk/TreeModelProtocol":{"role":"symbol","title":"TreeModelProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelProtocol"}],"abstract":[{"type":"text","text":"The tree interface used by GtkTreeView"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelProtocol"}],"url":"\/documentation\/gtk\/treemodelprotocol"},"doc://Gtk/documentation/Gtk/TreeModelFilterRef":{"role":"symbol","title":"TreeModelFilterRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilterRef"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GtkTreeModel"},{"type":"text","text":" which hides parts of an underlying tree model"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelFilterRef"}],"url":"\/documentation\/gtk\/treemodelfilterref"},"doc://Gtk/documentation/Gtk/TreeDragSourceProtocol":{"role":"symbol","title":"TreeDragSourceProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeDragSourceProtocol"}],"abstract":[{"type":"text","text":"Interface for Drag-and-Drop destinations in "},{"type":"codeVoice","code":"GtkTreeView"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeDragSourceProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeDragSourceProtocol"}],"url":"\/documentation\/gtk\/treedragsourceprotocol"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/set(property:value:)":{"role":"symbol","title":"set(property:value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"set"},{"kind":"text","text":"("},{"kind":"externalParam","text":"property"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreeModelFilterPropertyName","preciseIdentifier":"s:3Gtk27TreeModelFilterPropertyNameO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value","preciseIdentifier":"s:10GLibObject5ValueC"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Set the value of a TreeModelFilter property."},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Note"}]},{"type":"text","text":" that this will only have an effect on properties that are writable and not construct-only!"}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/set(property:value:)","kind":"symbol","type":"topic","url":"\/documentation\/gtk\/treemodelfilterprotocol\/set(property:value:)"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/refilter()":{"role":"symbol","title":"refilter()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"refilter"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Emits "},{"type":"codeVoice","code":"row_changed"},{"type":"text","text":" for each row in the child model, which causes"},{"type":"text","text":" "},{"type":"text","text":"the filter to re-evaluate whether a row is visible or not."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/refilter()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/refilter()"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/getModel()":{"role":"symbol","title":"getModel()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getModel"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"TreeModelRef","preciseIdentifier":"s:3Gtk12TreeModelRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Returns a pointer to the child model of "},{"type":"codeVoice","code":"filter"},{"type":"text","text":"."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/getModel()","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/getmodel()"},"doc://Gtk/10GLibObject0B8ProtocolP":{"type":"unresolvable","title":"GLibObject.ObjectProtocol","identifier":"doc:\/\/Gtk\/10GLibObject0B8ProtocolP"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/tree_model_filter_ptr-74a2":{"defaultImplementations":1,"role":"symbol","title":"tree_model_filter_ptr","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"tree_model_filter_ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GtkTreeModelFilter"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Typed pointer to the underlying "},{"type":"codeVoice","code":"GtkTreeModelFilter"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/tree_model_filter_ptr-74a2","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/gtk\/treemodelfilterprotocol\/tree_model_filter_ptr-74a2"},"doc://Gtk/documentation/Gtk/TreeModelFilterPropertyName":{"role":"symbol","title":"TreeModelFilterPropertyName","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TreeModelFilterPropertyName"}],"abstract":[],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterPropertyName","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TreeModelFilterPropertyName"}],"url":"\/documentation\/gtk\/treemodelfilterpropertyname"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/setModifyFunc(nColumns:types:func:data:destroy:)":{"role":"symbol","title":"setModifyFunc(nColumns:types:func:data:destroy:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setModifyFunc"},{"kind":"text","text":"("},{"kind":"externalParam","text":"nColumns"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"types"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GType","preciseIdentifier":"c:@T@GType"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"func"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GtkTreeModelFilterModifyFunc","preciseIdentifier":"c:gtktreemodelfilter.h@T@GtkTreeModelFilterModifyFunc"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"destroy"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GDestroyNotify","preciseIdentifier":"c:gtypes.h@T@GDestroyNotify"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"With the "},{"type":"codeVoice","code":"nColumns"},{"type":"text","text":" and "},{"type":"codeVoice","code":"types"},{"type":"text","text":" parameters, you give an array of column"},{"type":"text","text":" "},{"type":"text","text":"types for this model (which will be exposed to the parent model\/view)."},{"type":"text","text":" "},{"type":"text","text":"The "},{"type":"codeVoice","code":"func"},{"type":"text","text":", "},{"type":"codeVoice","code":"data"},{"type":"text","text":" and "},{"type":"codeVoice","code":"destroy"},{"type":"text","text":" parameters are for specifying the modify"},{"type":"text","text":" "},{"type":"text","text":"function. The modify function will get called for each"},{"type":"text","text":" "},{"type":"text","text":"data access, the goal of the modify function is to return the data which"},{"type":"text","text":" "},{"type":"text","text":"should be displayed at the location specified using the parameters of the"},{"type":"text","text":" "},{"type":"text","text":"modify function."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/setModifyFunc(nColumns:types:func:data:destroy:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/setmodifyfunc(ncolumns:types:func:data:destroy:)"},"doc://Gtk/documentation/Gtk/TreeModelFilterProtocol/convertPathToChildPath(filterPath:)":{"role":"symbol","title":"convertPathToChildPath(filterPath:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"convertPathToChildPath"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"TreePathT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"filterPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TreePathT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TreePathRef","preciseIdentifier":"s:3Gtk11TreePathRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Converts "},{"type":"codeVoice","code":"filterPath"},{"type":"text","text":" to a path on the child model of "},{"type":"codeVoice","code":"filter"},{"type":"text","text":". That is,"},{"type":"text","text":" "},{"type":"codeVoice","code":"filterPath"},{"type":"text","text":" points to a location in "},{"type":"codeVoice","code":"filter"},{"type":"text","text":". The returned path will"},{"type":"text","text":" "},{"type":"text","text":"point to the same location in the model not being filtered. If "},{"type":"codeVoice","code":"filterPath"},{"type":"text","text":" "},{"type":"text","text":"does not point to a location in the child model, "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is returned."}],"identifier":"doc:\/\/Gtk\/documentation\/Gtk\/TreeModelFilterProtocol\/convertPathToChildPath(filterPath:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/gtk\/treemodelfilterprotocol\/convertpathtochildpath(filterpath:)"}}}