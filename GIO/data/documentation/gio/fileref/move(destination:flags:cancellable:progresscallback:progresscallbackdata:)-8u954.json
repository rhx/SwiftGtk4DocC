{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"move"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"FileT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GIO\/documentation\/GIO\/FileCopyFlags","preciseIdentifier":"s:3GIO13FileCopyFlagsV","text":"FileCopyFlags"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cancellable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GIO\/documentation\/GIO\/CancellableRef","preciseIdentifier":"s:3GIO14CancellableRefV","text":"CancellableRef"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"progressCallback"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GFileProgressCallback","preciseIdentifier":"c:@T@GFileProgressCallback"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"progressCallbackData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"? = nil) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"FileT"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/GIO\/documentation\/GIO\/FileProtocol","preciseIdentifier":"s:3GIO12FileProtocolP","text":"FileProtocol"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the flag "},{"type":"codeVoice","code":"G_FILE_COPY_OVERWRITE"},{"type":"text","text":" is specified an already"},{"type":"text","text":" "},{"type":"text","text":"existing "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" file is overwritten."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"cancellable"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", then the operation can be cancelled by"},{"type":"text","text":" "},{"type":"text","text":"triggering the cancellable object from another thread. If the operation"},{"type":"text","text":" "},{"type":"text","text":"was cancelled, the error "},{"type":"codeVoice","code":"G_IO_ERROR_CANCELLED"},{"type":"text","text":" will be returned."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"progress_callback"},{"type":"text","text":" is not "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", then the operation can be monitored"},{"type":"text","text":" "},{"type":"text","text":"by setting this to a "},{"type":"codeVoice","code":"GFileProgressCallback"},{"type":"text","text":" function."},{"type":"text","text":" "},{"type":"codeVoice","code":"progress_callback_data"},{"type":"text","text":" will be passed to this function. It is"},{"type":"text","text":" "},{"type":"text","text":"guaranteed that this callback will be called after all data has been"},{"type":"text","text":" "},{"type":"text","text":"transferred with the total number of bytes copied during the operation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"source"},{"type":"text","text":" file does not exist, then the "},{"type":"codeVoice","code":"G_IO_ERROR_NOT_FOUND"},{"type":"text","text":" "},{"type":"text","text":"error is returned, independent on the status of the "},{"type":"codeVoice","code":"destination"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"G_FILE_COPY_OVERWRITE"},{"type":"text","text":" is not specified and the target exists,"},{"type":"text","text":" "},{"type":"text","text":"then the error "},{"type":"codeVoice","code":"G_IO_ERROR_EXISTS"},{"type":"text","text":" is returned."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If trying to overwrite a file over a directory, the "},{"type":"codeVoice","code":"G_IO_ERROR_IS_DIRECTORY"},{"type":"text","text":" "},{"type":"text","text":"error is returned. If trying to overwrite a directory with a directory the"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_IO_ERROR_WOULD_MERGE"},{"type":"text","text":" error is returned."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the source is a directory and the target does not exist, or"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_FILE_COPY_OVERWRITE"},{"type":"text","text":" is specified and the target is a file, then"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"G_IO_ERROR_WOULD_RECURSE"},{"type":"text","text":" error may be returned (if the native"},{"type":"text","text":" "},{"type":"text","text":"move operation isnâ€™t available)."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/gio\/fileref\/move(destination:flags:cancellable:progresscallback:progresscallbackdata:)-8u954"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GIO\/documentation\/GIO\/FileRef\/move(destination:flags:cancellable:progressCallback:progressCallbackData:)-8u954","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Tries to move the file or directory "},{"type":"codeVoice","code":"source"},{"type":"text","text":" to the location specified"},{"type":"text","text":" "},{"type":"text","text":"by "},{"type":"codeVoice","code":"destination"},{"type":"text","text":". If native move operations are supported then this is"},{"type":"text","text":" "},{"type":"text","text":"used, otherwise a copy + delete fallback is used. The native"},{"type":"text","text":" "},{"type":"text","text":"implementation may support moving directories (for instance on moves"},{"type":"text","text":" "},{"type":"text","text":"inside the same filesystem), but the fallback code does not."}],"kind":"symbol","metadata":{"role":"symbol","title":"move(destination:flags:cancellable:progressCallback:progressCallbackData:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"move"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"FileT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileCopyFlags","preciseIdentifier":"s:3GIO13FileCopyFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cancellable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CancellableRef","preciseIdentifier":"s:3GIO14CancellableRefV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"progressCallback"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GFileProgressCallback","preciseIdentifier":"c:@T@GFileProgressCallback"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"progressCallbackData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"symbolKind":"method","externalID":"s:3GIO12FileProtocolPAAE4move11destination5flags11cancellable16progressCallback0hI4DataSbqd___AA0B9CopyFlagsVAA14CancellableRefVSgys5Int64V_APSvSgtXCSgAQtKAaBRd__lF::SYNTHESIZED::s:3GIO7FileRefV","extendedModule":"GIO","modules":[{"name":"GIO"}]},"hierarchy":{"paths":[["doc:\/\/GIO\/documentation\/GIO","doc:\/\/GIO\/documentation\/GIO\/FileRef","doc:\/\/GIO\/documentation\/GIO\/FileRef\/FileProtocol-Implementations"]]},"references":{"doc://GIO/documentation/GIO/FileRef/FileProtocol-Implementations":{"role":"collectionGroup","title":"FileProtocol Implementations","abstract":[],"identifier":"doc:\/\/GIO\/documentation\/GIO\/FileRef\/FileProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/gio\/fileref\/fileprotocol-implementations"},"doc://GIO/documentation/GIO":{"role":"collection","title":"GIO","abstract":[],"identifier":"doc:\/\/GIO\/documentation\/GIO","kind":"symbol","type":"topic","url":"\/documentation\/gio"},"doc://GIO/documentation/GIO/FileCopyFlags":{"role":"symbol","title":"FileCopyFlags","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileCopyFlags"}],"abstract":[{"type":"text","text":"Flags used when copying or moving files."}],"identifier":"doc:\/\/GIO\/documentation\/GIO\/FileCopyFlags","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileCopyFlags"}],"url":"\/documentation\/gio\/filecopyflags"},"doc://GIO/documentation/GIO/FileRef":{"role":"symbol","title":"FileRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileRef"}],"abstract":[{"type":"codeVoice","code":"GFile"},{"type":"text","text":" is a high level abstraction for manipulating files on a"},{"type":"text","text":" "},{"type":"text","text":"virtual file system. "},{"type":"codeVoice","code":"GFiles"},{"type":"text","text":" are lightweight, immutable objects"},{"type":"text","text":" "},{"type":"text","text":"that do no I\/O upon creation. It is necessary to understand that"},{"type":"text","text":" "},{"type":"codeVoice","code":"GFile"},{"type":"text","text":" objects do not represent files, merely an identifier for a"},{"type":"text","text":" "},{"type":"text","text":"file. All file content I\/O is implemented as streaming operations"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"type":"codeVoice","code":"GInputStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"GOutputStream"},{"type":"text","text":")."}],"identifier":"doc:\/\/GIO\/documentation\/GIO\/FileRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileRef"}],"url":"\/documentation\/gio\/fileref"},"doc://GIO/documentation/GIO/CancellableRef":{"role":"symbol","title":"CancellableRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CancellableRef"}],"abstract":[{"type":"text","text":"GCancellable is a thread-safe operation cancellation stack used"},{"type":"text","text":" "},{"type":"text","text":"throughout GIO to allow for cancellation of synchronous and"},{"type":"text","text":" "},{"type":"text","text":"asynchronous operations."}],"identifier":"doc:\/\/GIO\/documentation\/GIO\/CancellableRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CancellableRef"}],"url":"\/documentation\/gio\/cancellableref"},"doc://GIO/documentation/GIO/FileRef/move(destination:flags:cancellable:progressCallback:progressCallbackData:)-8u954":{"role":"symbol","title":"move(destination:flags:cancellable:progressCallback:progressCallbackData:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"move"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"FileT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileT"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"FileCopyFlags","preciseIdentifier":"s:3GIO13FileCopyFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"cancellable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CancellableRef","preciseIdentifier":"s:3GIO14CancellableRefV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"progressCallback"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GFileProgressCallback","preciseIdentifier":"c:@T@GFileProgressCallback"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"progressCallbackData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:gtypes.h@T@gpointer"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Tries to move the file or directory "},{"type":"codeVoice","code":"source"},{"type":"text","text":" to the location specified"},{"type":"text","text":" "},{"type":"text","text":"by "},{"type":"codeVoice","code":"destination"},{"type":"text","text":". If native move operations are supported then this is"},{"type":"text","text":" "},{"type":"text","text":"used, otherwise a copy + delete fallback is used. The native"},{"type":"text","text":" "},{"type":"text","text":"implementation may support moving directories (for instance on moves"},{"type":"text","text":" "},{"type":"text","text":"inside the same filesystem), but the fallback code does not."}],"identifier":"doc:\/\/GIO\/documentation\/GIO\/FileRef\/move(destination:flags:cancellable:progressCallback:progressCallbackData:)-8u954","kind":"symbol","type":"topic","url":"\/documentation\/gio\/fileref\/move(destination:flags:cancellable:progresscallback:progresscallbackdata:)-8u954"},"doc://GIO/documentation/GIO/FileProtocol":{"role":"symbol","title":"FileProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileProtocol"}],"abstract":[{"type":"codeVoice","code":"GFile"},{"type":"text","text":" is a high level abstraction for manipulating files on a"},{"type":"text","text":" "},{"type":"text","text":"virtual file system. "},{"type":"codeVoice","code":"GFiles"},{"type":"text","text":" are lightweight, immutable objects"},{"type":"text","text":" "},{"type":"text","text":"that do no I\/O upon creation. It is necessary to understand that"},{"type":"text","text":" "},{"type":"codeVoice","code":"GFile"},{"type":"text","text":" objects do not represent files, merely an identifier for a"},{"type":"text","text":" "},{"type":"text","text":"file. All file content I\/O is implemented as streaming operations"},{"type":"text","text":" "},{"type":"text","text":"(see "},{"type":"codeVoice","code":"GInputStream"},{"type":"text","text":" and "},{"type":"codeVoice","code":"GOutputStream"},{"type":"text","text":")."}],"identifier":"doc:\/\/GIO\/documentation\/GIO\/FileProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FileProtocol"}],"url":"\/documentation\/gio\/fileprotocol"}}}