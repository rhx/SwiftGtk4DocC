{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"uriParse"},{"kind":"text","text":"("},{"kind":"externalParam","text":"params"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gssize","preciseIdentifier":"c:@T@gssize"},{"kind":"text","text":", "},{"kind":"externalParam","text":"separators"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/URIParamsFlags","preciseIdentifier":"s:4GLib14URIParamsFlagsV","text":"URIParamsFlags"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTableRef","preciseIdentifier":"s:4GLib12HashTableRefV","text":"HashTableRef"},{"kind":"text","text":"!"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"params"},{"type":"text","text":" string is assumed to still be "},{"type":"codeVoice","code":"-encoded, but the returned values will be fully decoded. (Thus it is possible that the returned values may contain `=` or `separators`, if the value was encoded in the input.) Invalid "},{"type":"text","text":"-encoding is treated as with the "},{"type":"codeVoice","code":"G_URI_FLAGS_PARSE_RELAXED"},{"type":"text","text":" "},{"type":"text","text":"rules for "},{"type":"codeVoice","code":"g_uri_parse()"},{"type":"text","text":". (However, if "},{"type":"codeVoice","code":"params"},{"type":"text","text":" is the path or query string"},{"type":"text","text":" "},{"type":"text","text":"from a "},{"type":"codeVoice","code":"GUri"},{"type":"text","text":" that was parsed without "},{"type":"codeVoice","code":"G_URI_FLAGS_PARSE_RELAXED"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"G_URI_FLAGS_ENCODED"},{"type":"text","text":", then you already know that it does not contain any"},{"type":"text","text":" "},{"type":"text","text":"invalid encoding.)"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"G_URI_PARAMS_WWW_FORM"},{"type":"text","text":" is handled as documented for "},{"type":"codeVoice","code":"g_uri_params_iter_init()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"G_URI_PARAMS_CASE_INSENSITIVE"},{"type":"text","text":" is passed to "},{"type":"codeVoice","code":"flags"},{"type":"text","text":", attributes will be"},{"type":"text","text":" "},{"type":"text","text":"compared case-insensitively, so a params string "},{"type":"codeVoice","code":"attr=123&Attr=456"},{"type":"text","text":" will only"},{"type":"text","text":" "},{"type":"text","text":"return a single attributeâ€“value pair, "},{"type":"codeVoice","code":"Attr=456"},{"type":"text","text":". Case will be preserved in"},{"type":"text","text":" "},{"type":"text","text":"the returned attributes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"params"},{"type":"text","text":" cannot be parsed (for example, it contains two "},{"type":"codeVoice","code":"separators"},{"type":"text","text":" "},{"type":"text","text":"characters in a row), then "},{"type":"codeVoice","code":"error"},{"type":"text","text":" is set and "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is returned."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/uriparse(params:length:separators:flags:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/uriParse(params:length:separators:flags:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Many URI schemes include one or more attribute\/value pairs as part of the URI"},{"type":"text","text":" "},{"type":"text","text":"value. This method can be used to parse them into a hash table. When an"},{"type":"text","text":" "},{"type":"text","text":"attribute has multiple occurrences, the last value is the final returned"},{"type":"text","text":" "},{"type":"text","text":"value. If you need to handle repeated attributes differently, use"},{"type":"text","text":" "},{"type":"codeVoice","code":"GUriParamsIter"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"uriParse"},{"kind":"text","text":"("},{"kind":"externalParam","text":"params"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gssize","preciseIdentifier":"c:@T@gssize"},{"kind":"text","text":", "},{"kind":"externalParam","text":"separators"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"URIParamsFlags","preciseIdentifier":"s:4GLib14URIParamsFlagsV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"HashTableRef","preciseIdentifier":"s:4GLib12HashTableRefV"},{"kind":"text","text":"!"}],"title":"uriParse(params:length:separators:flags:)","roleHeading":"Function","role":"symbol","symbolKind":"func","externalID":"s:4GLib8uriParse6params6length10separators5flagsAA12HashTableRefVSgSPys4Int8VGSg_SiAmA14URIParamsFlagsVtKF","modules":[{"name":"GLib"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"references":{"doc://GLib/documentation/GLib/HashTableRef":{"role":"symbol","title":"HashTableRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"HashTableRef"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"GHashTable"},{"type":"text","text":" struct is an opaque data structure to represent a"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"..\/Protocols\/HashTableProtocol.html"},{"type":"text","text":". It should only be accessed via the"},{"type":"text","text":" "},{"type":"text","text":"following functions."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/HashTableRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"HashTableRef"}],"url":"\/documentation\/glib\/hashtableref"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/URIParamsFlags":{"role":"symbol","title":"URIParamsFlags","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"URIParamsFlags"}],"abstract":[{"type":"text","text":"Flags modifying the way parameters are handled by "},{"type":"codeVoice","code":"g_uri_parse_params()"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"GUriParamsIter"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/URIParamsFlags","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"URIParamsFlags"}],"url":"\/documentation\/glib\/uriparamsflags"},"doc://GLib/documentation/GLib/uriParse(params:length:separators:flags:)":{"role":"symbol","title":"uriParse(params:length:separators:flags:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"uriParse"},{"kind":"text","text":"("},{"kind":"externalParam","text":"params"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gssize","preciseIdentifier":"c:@T@gssize"},{"kind":"text","text":", "},{"kind":"externalParam","text":"separators"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"URIParamsFlags","preciseIdentifier":"s:4GLib14URIParamsFlagsV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"HashTableRef","preciseIdentifier":"s:4GLib12HashTableRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Many URI schemes include one or more attribute\/value pairs as part of the URI"},{"type":"text","text":" "},{"type":"text","text":"value. This method can be used to parse them into a hash table. When an"},{"type":"text","text":" "},{"type":"text","text":"attribute has multiple occurrences, the last value is the final returned"},{"type":"text","text":" "},{"type":"text","text":"value. If you need to handle repeated attributes differently, use"},{"type":"text","text":" "},{"type":"codeVoice","code":"GUriParamsIter"},{"type":"text","text":"."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/uriParse(params:length:separators:flags:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/uriparse(params:length:separators:flags:)"},"../Protocols/HashTableProtocol.html":{"title":"Hash Table","titleInlineContent":[{"type":"text","text":"Hash Table"}],"type":"link","identifier":"..\/Protocols\/HashTableProtocol.html","url":"..\/Protocols\/HashTableProtocol.html"}}}