{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionContextRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"testtreemodel -r 1 --max-size 20 --rand --display=:1.0 -vb -- file1 file2"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example demonstrates a number of features of the GOption"},{"type":"text","text":" "},{"type":"text","text":"commandline parser:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Options can be single letters, prefixed by a single dash."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple short options can be grouped behind a single dash."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Long options are prefixed by two consecutive dashes."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Options can have an extra argument, which can be a number, a string or"},{"type":"text","text":" "},{"type":"text","text":"a filename. For long options, the extra argument can be appended with"},{"type":"text","text":" "},{"type":"text","text":"an equals sign after the option name, which is useful if the extra"},{"type":"text","text":" "},{"type":"text","text":"argument starts with a dash, which would otherwise cause it to be"},{"type":"text","text":" "},{"type":"text","text":"interpreted as another option."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Non-option arguments are returned to the application as rest arguments."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An argument consisting solely of two dashes turns off further parsing,"},{"type":"text","text":" "},{"type":"text","text":"any remaining arguments (even those starting with a dash) are returned"},{"type":"text","text":" "},{"type":"text","text":"to the application as rest arguments."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another important feature of GOption is that it can automatically"},{"type":"text","text":" "},{"type":"text","text":"generate nicely formatted help output. Unless it is explicitly turned"},{"type":"text","text":" "},{"type":"text","text":"off with "},{"type":"codeVoice","code":"g_option_context_set_help_enabled()"},{"type":"text","text":", GOption will recognize"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"--help"},{"type":"text","text":", "},{"type":"codeVoice","code":"-?"},{"type":"text","text":", "},{"type":"codeVoice","code":"--help-all"},{"type":"text","text":" and "},{"type":"codeVoice","code":"--help-groupname"},{"type":"text","text":" options"},{"type":"text","text":" "},{"type":"text","text":"(where "},{"type":"codeVoice","code":"groupname"},{"type":"text","text":" is the name of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionGroup"},{"type":"text","text":") and write a text"},{"type":"text","text":" "},{"type":"text","text":"similar to the one shown in the following example to stdout."}]},{"type":"codeListing","syntax":null,"code":["Usage:","  testtreemodel [OPTION...] - test tree model performance"," ","Help Options:","  -h, --help               Show help options","  --help-all               Show all help options","  --help-gtk               Show GTK Options"," ","Application Options:","  -r, --repeats=N          Average over N repetitions","  -m, --max-size=M         Test up to 2^M items","  --display=DISPLAY        X display to use","  -v, --verbose            Be verbose","  -b, --beep               Beep when done","  --rand                   Randomize the data"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"GOption groups options in "},{"type":"codeVoice","code":"GOptionGroups"},{"type":"text","text":", which makes it easy to"},{"type":"text","text":" "},{"type":"text","text":"incorporate options from multiple sources. The intended use for this is"},{"type":"text","text":" "},{"type":"text","text":"to let applications collect option groups from the libraries it uses,"},{"type":"text","text":" "},{"type":"text","text":"add them to their "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContext"},{"type":"text","text":", and parse all options by a single call"},{"type":"text","text":" "},{"type":"text","text":"to "},{"type":"codeVoice","code":"g_option_context_parse()"},{"type":"text","text":". See "},{"type":"codeVoice","code":"gtk_get_option_group()"},{"type":"text","text":" for an example."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an option is declared to be of type string or filename, GOption takes"},{"type":"text","text":" "},{"type":"text","text":"care of converting it to the right encoding; strings are returned in"},{"type":"text","text":" "},{"type":"text","text":"UTF-8, filenames are returned in the GLib filename encoding. Note that"},{"type":"text","text":" "},{"type":"text","text":"this only works if "},{"type":"codeVoice","code":"setlocale()"},{"type":"text","text":" has been called before"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_option_context_parse()"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a complete example of setting up GOption to parse the example"},{"type":"text","text":" "},{"type":"text","text":"commandline above and produce the example help output."},{"type":"text","text":" "},{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["static gint repeats = 2;","static gint max_size = 8;","static gboolean verbose = FALSE;","static gboolean beep = FALSE;","static gboolean randomize = FALSE;","","static GOptionEntry entries[] =","{","  { \"repeats\", 'r', 0, G_OPTION_ARG_INT, &repeats, \"Average over N repetitions\", \"N\" },","  { \"max-size\", 'm', 0, G_OPTION_ARG_INT, &max_size, \"Test up to 2^M items\", \"M\" },","  { \"verbose\", 'v', 0, G_OPTION_ARG_NONE, &verbose, \"Be verbose\", NULL },","  { \"beep\", 'b', 0, G_OPTION_ARG_NONE, &beep, \"Beep when done\", NULL },","  { \"rand\", 0, 0, G_OPTION_ARG_NONE, &randomize, \"Randomize the data\", NULL },","  G_OPTION_ENTRY_NULL","};","","int","main (int argc, char *argv[])","{","  GError *error = NULL;","  GOptionContext *context;","","  context = g_option_context_new (\"- test tree model performance\");","  g_option_context_add_main_entries (context, entries, GETTEXT_PACKAGE);","  g_option_context_add_group (context, gtk_get_option_group (TRUE));","  if (!g_option_context_parse (context, &argc, &argv, &error))","    {","      g_print (\"option parsing failed: %s\\n\", error->message);","      exit (1);","    }","","  ...","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"On UNIX systems, the argv that is passed to "},{"type":"codeVoice","code":"main()"},{"type":"text","text":" has no particular"},{"type":"text","text":" "},{"type":"text","text":"encoding, even to the extent that different parts of it may have"},{"type":"text","text":" "},{"type":"text","text":"different encodings.  In general, normal arguments and flags will be"},{"type":"text","text":" "},{"type":"text","text":"in the current locale and filenames should be considered to be opaque"},{"type":"text","text":" "},{"type":"text","text":"byte strings.  Proper use of "},{"type":"codeVoice","code":"filename"},{"type":"text","text":" vs"},{"type":"text","text":" "},{"type":"codeVoice","code":"string"},{"type":"text","text":" is therefore important."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that on Windows, filenames do have an encoding, but using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContext"},{"type":"text","text":" with the argv as passed to "},{"type":"codeVoice","code":"main()"},{"type":"text","text":" will result in a"},{"type":"text","text":" "},{"type":"text","text":"program that can only accept commandline arguments with characters"},{"type":"text","text":" "},{"type":"text","text":"from the system codepage.  This can cause problems when attempting to"},{"type":"text","text":" "},{"type":"text","text":"deal with filenames containing Unicode characters that fall outside"},{"type":"text","text":" "},{"type":"text","text":"of the codepage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A solution to this is to use "},{"type":"codeVoice","code":"g_win32_get_command_line()"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_option_context_parse_strv()"},{"type":"text","text":" which will properly handle full Unicode"},{"type":"text","text":" "},{"type":"text","text":"filenames.  If you are using "},{"type":"codeVoice","code":"GApplication"},{"type":"text","text":", this is done"},{"type":"text","text":" "},{"type":"text","text":"automatically for you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example shows how you can use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContext"},{"type":"text","text":" directly"},{"type":"text","text":" "},{"type":"text","text":"in order to correctly deal with Unicode filenames on Windows:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"(C Language Example):"}]},{"type":"codeListing","syntax":"C","code":["int","main (int argc, char **argv)","{","  GError *error = NULL;","  GOptionContext *context;","  gchar **args;","","#ifdef G_OS_WIN32","  args = g_win32_get_command_line ();","#else","  args = g_strdupv (argv);","#endif","","  \/\/ set up context","","  if (!g_option_context_parse_strv (context, &args, &error))","    {","      \/\/ error happened","    }","","  ...","","  g_strfreev (args);","","  ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"GOptionContext"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"GOptionContext"},{"type":"text","text":" instance."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContext"},{"type":"text","text":" (instead of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef"},{"type":"text","text":") if you want to use Automatic Reference Counting for memory management of the underlying "},{"type":"codeVoice","code":"GOptionContext"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Note"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/optioncontextref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol","doc:\/\/GLib\/documentation\/GLib\/PointerWrapper"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The GOption commandline parser is intended to be a simpler replacement"},{"type":"text","text":" "},{"type":"text","text":"for the popt library. It supports short and long commandline options,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the following example:"}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionContextRef"}],"title":"OptionContextRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:4GLib16OptionContextRefV","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"OptionContextRef"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-1m7rs","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-3rmpk","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-5fkgn","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-8d8ch","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-8ryok","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(constPointer:)","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(mutating:)","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/OptionContextProtocol-Implementations","doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/PointerWrapper-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/OptionContextRef/init(_:)-8ryok":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GOptionContext"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-8ryok","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(_:)-8ryok"},"doc://GLib/documentation/GLib/OptionContextRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(mutating:)"},"doc://GLib/documentation/GLib/OptionContextRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(constpointer:)"},"doc://GLib/documentation/GLib/OptionContextRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GOptionContext"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"OptionContextProtocol\/_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/ptr"},"doc://GLib/documentation/GLib/OptionContextRef/OptionContextProtocol-Implementations":{"role":"collectionGroup","title":"OptionContextProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/OptionContextProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/optioncontextref\/optioncontextprotocol-implementations"},"doc://GLib/documentation/GLib/OptionContextRef/init(_:)-5fkgn":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GOptionContext"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-5fkgn","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(_:)-5fkgn"},"doc://GLib/documentation/GLib/OptionContextRef/init(_:)-3rmpk":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GOptionContext"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-3rmpk","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(_:)-3rmpk"},"doc://GLib/documentation/GLib/OptionContextRef/init(_:)-1m7rs":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GOptionContext"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-1m7rs","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(_:)-1m7rs"},"doc://GLib/documentation/GLib/OptionContextRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(opaquepointer:)"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/OptionContextRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(gconstpointer:)"},"doc://GLib/documentation/GLib/OptionGroup":{"role":"symbol","title":"OptionGroup","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionGroup"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"GOptionGroup"},{"type":"text","text":" struct defines the options in a single"},{"type":"text","text":" "},{"type":"text","text":"group. The struct has only private fields and should not be directly accessed."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionGroup","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OptionGroup"}],"url":"\/documentation\/glib\/optiongroup"},"doc://GLib/documentation/GLib/OptionContextRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(cpointer:)"},"doc://GLib/documentation/GLib/OptionContextRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(gpointer:)"},"doc://GLib/documentation/GLib/OptionContextProtocol":{"role":"symbol","title":"OptionContextProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionContextProtocol"}],"abstract":[{"type":"text","text":"The GOption commandline parser is intended to be a simpler replacement"},{"type":"text","text":" "},{"type":"text","text":"for the popt library. It supports short and long commandline options,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the following example:"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OptionContextProtocol"}],"url":"\/documentation\/glib\/optioncontextprotocol"},"doc://GLib/documentation/GLib/OptionContext":{"role":"symbol","title":"OptionContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionContext"}],"abstract":[{"type":"text","text":"The GOption commandline parser is intended to be a simpler replacement"},{"type":"text","text":" "},{"type":"text","text":"for the popt library. It supports short and long commandline options,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the following example:"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContext","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OptionContext"}],"url":"\/documentation\/glib\/optioncontext"},"doc://GLib/documentation/GLib/OptionContextRef":{"role":"symbol","title":"OptionContextRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OptionContextRef"}],"abstract":[{"type":"text","text":"The GOption commandline parser is intended to be a simpler replacement"},{"type":"text","text":" "},{"type":"text","text":"for the popt library. It supports short and long commandline options,"},{"type":"text","text":" "},{"type":"text","text":"as shown in the following example:"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OptionContextRef"}],"url":"\/documentation\/glib\/optioncontextref"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/OptionContextRef/init(_:)-8d8ch":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"reference","isActive":true,"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextProtocol"}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/init(_:)-8d8ch","kind":"symbol","type":"topic","url":"\/documentation\/glib\/optioncontextref\/init(_:)-8d8ch"},"doc://GLib/documentation/GLib/OptionContextRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/OptionContextRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/optioncontextref\/pointerwrapper-implementations"}}}