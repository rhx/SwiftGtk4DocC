{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantType"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first major change with respect to the D-Bus type system is the"},{"type":"text","text":" "},{"type":"text","text":"introduction of maybe (or “nullable”) types.  Any type in GVariant can be"},{"type":"text","text":" "},{"type":"text","text":"converted to a maybe type, in which case, “nothing” (or “null”) becomes a"},{"type":"text","text":" "},{"type":"text","text":"valid value.  Maybe types have been added by introducing the"},{"type":"text","text":" "},{"type":"text","text":"character “m” to type strings."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second major change is that the GVariant type system supports the"},{"type":"text","text":" "},{"type":"text","text":"concept of “indefinite types” – types that are less specific than"},{"type":"text","text":" "},{"type":"text","text":"the normal types found in D-Bus.  For example, it is possible to speak"},{"type":"text","text":" "},{"type":"text","text":"of “an array of any type” in GVariant, where the D-Bus type system"},{"type":"text","text":" "},{"type":"text","text":"would require you to speak of “an array of integers” or “an array of"},{"type":"text","text":" "},{"type":"text","text":"strings”.  Indefinite types have been added by introducing the"},{"type":"text","text":" "},{"type":"text","text":"characters “*”, “?” and “r” to type strings."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, all arbitrary restrictions relating to the complexity of"},{"type":"text","text":" "},{"type":"text","text":"types are lifted along with the restriction that dictionary entries"},{"type":"text","text":" "},{"type":"text","text":"may only appear nested inside of arrays."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Just as in D-Bus, GVariant types are described with strings (“type"},{"type":"text","text":" "},{"type":"text","text":"strings”).  Subject to the differences mentioned above, these strings"},{"type":"text","text":" "},{"type":"text","text":"are of the same form as those found in D-Bus.  Note, however: D-Bus"},{"type":"text","text":" "},{"type":"text","text":"always works in terms of messages and therefore individual type"},{"type":"text","text":" "},{"type":"text","text":"strings appear nowhere in its interface.  Instead, “signatures”"},{"type":"text","text":" "},{"type":"text","text":"are a concatenation of the strings of the type of each argument in a"},{"type":"text","text":" "},{"type":"text","text":"message.  GVariant deals with single values directly so GVariant type"},{"type":"text","text":" "},{"type":"text","text":"strings always describe the type of exactly one value.  This means"},{"type":"text","text":" "},{"type":"text","text":"that a D-Bus signature string is generally not a valid GVariant type"},{"type":"text","text":" "},{"type":"text","text":"string – except in the case that it is the signature of a message"},{"type":"text","text":" "},{"type":"text","text":"containing exactly one argument."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An indefinite type is similar in spirit to what may be called an"},{"type":"text","text":" "},{"type":"text","text":"abstract type in other type systems.  No value can exist that has an"},{"type":"text","text":" "},{"type":"text","text":"indefinite type as its type, but values can exist that have types"},{"type":"text","text":" "},{"type":"text","text":"that are subtypes of indefinite types.  That is to say,"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_get_type()"},{"type":"text","text":" will never return an indefinite type, but"},{"type":"text","text":" "},{"type":"text","text":"calling "},{"type":"codeVoice","code":"g_variant_is_of_type()"},{"type":"text","text":" with an indefinite type may return"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":".  For example, you cannot have a value that represents “an"},{"type":"text","text":" "},{"type":"text","text":"array of no particular type”, but you can have an “array of integers”"},{"type":"text","text":" "},{"type":"text","text":"which certainly matches the type of “an array of no particular type”,"},{"type":"text","text":" "},{"type":"text","text":"since “array of integers” is a subtype of “array of no particular"},{"type":"text","text":" "},{"type":"text","text":"type”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is similar to how instances of abstract classes may not"},{"type":"text","text":" "},{"type":"text","text":"directly exist in other type systems, but instances of their"},{"type":"text","text":" "},{"type":"text","text":"non-abstract subtypes may.  For example, in GTK, no object that has"},{"type":"text","text":" "},{"type":"text","text":"the type of "},{"type":"codeVoice","code":"GtkBin"},{"type":"text","text":" can exist (since "},{"type":"codeVoice","code":"GtkBin"},{"type":"text","text":" is an abstract class),"},{"type":"text","text":" "},{"type":"text","text":"but a "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" can certainly be instantiated, and you would say"},{"type":"text","text":" "},{"type":"text","text":"that the "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"GtkBin"},{"type":"text","text":" (since "},{"type":"codeVoice","code":"GtkWindow"},{"type":"text","text":" is a subclass of"},{"type":"text","text":" "},{"type":"codeVoice","code":"GtkBin"},{"type":"text","text":")."}]},{"anchor":"GVariant-Type-Strings","level":2,"type":"heading","text":"GVariant Type Strings"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A GVariant type string can be any of the following:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"any basic type string (listed below)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"“v”, “r” or “*”"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"one of the characters ‘a’ or ‘m’, followed by another type string"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the character ‘(’, followed by a concatenation of zero or more other"},{"type":"text","text":" "},{"type":"text","text":"type strings, followed by the character ‘)’"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the character ‘{’, followed by a basic type string (see below),"},{"type":"text","text":" "},{"type":"text","text":"followed by another type string, followed by the character ‘}’"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A basic type string describes a basic type (as per"},{"type":"text","text":" "},{"type":"codeVoice","code":"g_variant_type_is_basic()"},{"type":"text","text":") and is always a single character in length."},{"type":"text","text":" "},{"type":"text","text":"The valid basic type strings are “b”, “y”, “n”, “q”, “i”, “u”, “x”, “t”,"},{"type":"text","text":" "},{"type":"text","text":"“h”, “d”, “s”, “o”, “g” and “?”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above definition is recursive to arbitrary depth. “aaaaai” and"},{"type":"text","text":" "},{"type":"text","text":"“("},{"type":"codeVoice","code":"ui(nq((y)"},{"type":"text","text":"))s)” are both valid type strings, as is"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"a(aa(ui)"},{"type":"text","text":"(qna{"},{"type":"codeVoice","code":"ya(yd)"},{"type":"text","text":"}))”. In order to not hit memory limits, "},{"type":"codeVoice","code":"GVariant"},{"type":"text","text":" "},{"type":"text","text":"imposes a limit on recursion depth of 65 nested containers. This is the"},{"type":"text","text":" "},{"type":"text","text":"limit in the D-Bus specification (64) plus one to allow a "},{"type":"codeVoice","code":"GDBusMessage"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"be nested in a top-level tuple."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The meaning of each of the characters is as follows:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"b"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_BOOLEAN"},{"type":"text","text":"; a boolean value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"y"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_BYTE"},{"type":"text","text":"; a byte."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"n"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_INT16"},{"type":"text","text":"; a signed 16 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"q"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_UINT16"},{"type":"text","text":"; an unsigned 16 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"i"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_INT32"},{"type":"text","text":"; a signed 32 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"u"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_UINT32"},{"type":"text","text":"; an unsigned 32 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"x"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_INT64"},{"type":"text","text":"; a signed 64 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"t"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_UINT64"},{"type":"text","text":"; an unsigned 64 bit integer."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"h"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_HANDLE"},{"type":"text","text":"; a signed 32 bit value"},{"type":"text","text":" "},{"type":"text","text":"that, by convention, is used as an index into an array of file"},{"type":"text","text":" "},{"type":"text","text":"descriptors that are sent alongside a D-Bus message."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"d"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_DOUBLE"},{"type":"text","text":"; a double precision"},{"type":"text","text":" "},{"type":"text","text":"floating point value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"s"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_STRING"},{"type":"text","text":"; a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"o"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_OBJECT_PATH"},{"type":"text","text":"; a string in the form"},{"type":"text","text":" "},{"type":"text","text":"of a D-Bus object path."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"g"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_SIGNATURE"},{"type":"text","text":"; a string in the form of"},{"type":"text","text":" "},{"type":"text","text":"a D-Bus type signature."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"?"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_BASIC"},{"type":"text","text":"; an indefinite type that"},{"type":"text","text":" "},{"type":"text","text":"is a supertype of any of the basic types."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"v"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_VARIANT"},{"type":"text","text":"; a container type that"},{"type":"text","text":" "},{"type":"text","text":"contain any other type of value."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"a"},{"type":"text","text":": used as a prefix on another type string to mean an array of that"},{"type":"text","text":" "},{"type":"text","text":"type; the type string “ai”, for example, is the type of an array of"},{"type":"text","text":" "},{"type":"text","text":"signed 32-bit integers."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"m"},{"type":"text","text":": used as a prefix on another type string to mean a “maybe”, or"},{"type":"text","text":" "},{"type":"text","text":"“nullable”, version of that type; the type string “ms”, for example,"},{"type":"text","text":" "},{"type":"text","text":"is the type of a value that maybe contains a string, or maybe contains"},{"type":"text","text":" "},{"type":"text","text":"nothing."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"()"},{"type":"text","text":": used to enclose zero or more other concatenated type strings to"},{"type":"text","text":" "},{"type":"text","text":"create a tuple type; the type string “(is)”, for example, is the type of"},{"type":"text","text":" "},{"type":"text","text":"a pair of an integer and a string."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"r"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_TUPLE"},{"type":"text","text":"; an indefinite type that is"},{"type":"text","text":" "},{"type":"text","text":"a supertype of any tuple type, regardless of the number of items."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"{}"},{"type":"text","text":": used to enclose a basic type string concatenated with another type"},{"type":"text","text":" "},{"type":"text","text":"string to create a dictionary entry type, which usually appears inside of"},{"type":"text","text":" "},{"type":"text","text":"an array to form a dictionary; the type string “a{sd}”, for example, is"},{"type":"text","text":" "},{"type":"text","text":"the type of a dictionary that maps strings to double precision floating"},{"type":"text","text":" "},{"type":"text","text":"point values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first type (the basic type) is the key type and the second type is"},{"type":"text","text":" "},{"type":"text","text":"the value type. The reason that the first type is restricted to being a"},{"type":"text","text":" "},{"type":"text","text":"basic type is so that it can easily be hashed."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"*"},{"type":"text","text":": the type string of "},{"type":"codeVoice","code":"G_VARIANT_TYPE_ANY"},{"type":"text","text":"; the indefinite type that is"},{"type":"text","text":" "},{"type":"text","text":"a supertype of all types.  Note that, as with all type strings, this"},{"type":"text","text":" "},{"type":"text","text":"character represents exactly one type. It cannot be used inside of tuples"},{"type":"text","text":" "},{"type":"text","text":"to mean “any number of items”."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type string of a container that contains an indefinite type is,"},{"type":"text","text":" "},{"type":"text","text":"itself, an indefinite type. For example, the type string “a*”"},{"type":"text","text":" "},{"type":"text","text":"(corresponding to "},{"type":"codeVoice","code":"G_VARIANT_TYPE_ARRAY"},{"type":"text","text":") is an indefinite type"},{"type":"text","text":" "},{"type":"text","text":"that is a supertype of every array type. “(*s)” is a supertype"},{"type":"text","text":" "},{"type":"text","text":"of all tuples that contain exactly two items where the second"},{"type":"text","text":" "},{"type":"text","text":"item is a string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“a{?*}” is an indefinite type that is a supertype of all arrays"},{"type":"text","text":" "},{"type":"text","text":"containing dictionary entries where the key is any basic type and"},{"type":"text","text":" "},{"type":"text","text":"the value is any type at all.  This is, by definition, a dictionary,"},{"type":"text","text":" "},{"type":"text","text":"so this type string corresponds to "},{"type":"codeVoice","code":"G_VARIANT_TYPE_DICTIONARY"},{"type":"text","text":". Note"},{"type":"text","text":" "},{"type":"text","text":"that, due to the restriction that the key of a dictionary entry must"},{"type":"text","text":" "},{"type":"text","text":"be a basic type, “{**}” is not a valid type string."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" type acts as an owner of an underlying "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It provides the methods that can operate on this data type through "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" as a strong reference or owner of a "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/glib\/varianttype"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/GLib\/documentation\/GLib\/VariantType","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This section introduces the GVariant type system. It is based, in"},{"type":"text","text":" "},{"type":"text","text":"large part, on the D-Bus type system, with two major changes and"},{"type":"text","text":" "},{"type":"text","text":"some minor lifting of restrictions. The"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"therefore, provides a significant amount of"},{"type":"text","text":" "},{"type":"text","text":"information that is useful when working with GVariant."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantType"}],"title":"VariantType","roleHeading":"Class","role":"symbol","symbolKind":"class","externalID":"s:4GLib11VariantTypeC","modules":[{"name":"GLib"}],"navigatorTitle":[{"kind":"identifier","text":"VariantType"}]},"hierarchy":{"paths":[["doc:\/\/GLib\/documentation\/GLib"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-5y8b2","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-6gp0c","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-7f72f","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-8obca","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-9qngo","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(cPointer:)","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(gconstpointer:)","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(gpointer:)","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(opaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(raw:)-2bp98","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(raw:)-96av2","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retaining:)","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingCPointer:)","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingOpaquePointer:)","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingRaw:)-1w0qp","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingRaw:)-991zl","doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(typeString:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantType\/ptr"]},{"title":"Type Methods","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantType\/checked(arg0:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/GLib\/documentation\/GLib\/VariantType\/VariantTypeProtocol-Implementations"],"generated":true}],"references":{"doc://GLib/documentation/GLib/VariantType/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gconstpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(gconstpointer:)"},"doc://GLib/documentation/GLib/VariantType/init(raw:)-2bp98":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(raw:)-2bp98","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(raw:)-2bp98"},"doc://GLib/documentation/GLib/VariantType/init(typeString:)":{"role":"symbol","title":"init(typeString:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"typeString"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!)"}],"abstract":[{"type":"text","text":"Creates a new "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" corresponding to the type string given"},{"type":"text","text":" "},{"type":"text","text":"by "},{"type":"codeVoice","code":"type_string"},{"type":"text","text":".  It is appropriate to call "},{"type":"codeVoice","code":"g_variant_type_free()"},{"type":"text","text":" on"},{"type":"text","text":" "},{"type":"text","text":"the return value."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(typeString:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(typestring:)"},"doc://GLib/documentation/GLib/VariantType/init(retaining:)":{"role":"symbol","title":"init(retaining:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retaining"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GVariantType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" does not allow reference counting, so despite the name no actual retaining will occur."},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retaining:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(retaining:)"},"doc://GLib/documentation/GLib/VariantType/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(cpointer:)"},"doc://GLib/documentation/GLib/VariantType/VariantTypeProtocol-Implementations":{"role":"collectionGroup","title":"VariantTypeProtocol Implementations","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/VariantTypeProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/glib\/varianttype\/varianttypeprotocol-implementations"},"doc://GLib/documentation/GLib/VariantType/init(retainingCPointer:)":{"role":"symbol","title":"init(retainingCPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"retainingCPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingCPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(retainingcpointer:)"},"doc://GLib/documentation/GLib/VariantType/init(_:)-5y8b2":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GVariantType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-5y8b2","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(_:)-5y8b2"},"doc://GLib/documentation/GLib/VariantType/init(_:)-8obca":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":" "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" does not allow reference counting."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-8obca","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(_:)-8obca"},"doc://GLib/documentation/GLib":{"role":"collection","title":"GLib","abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib","kind":"symbol","type":"topic","url":"\/documentation\/glib"},"doc://GLib/documentation/GLib/VariantType/init(_:)-7f72f":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GVariantType"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-7f72f","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(_:)-7f72f"},"doc://GLib/documentation/GLib/VariantType":{"role":"symbol","title":"VariantType","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantType"}],"abstract":[{"type":"text","text":"This section introduces the GVariant type system. It is based, in"},{"type":"text","text":" "},{"type":"text","text":"large part, on the D-Bus type system, with two major changes and"},{"type":"text","text":" "},{"type":"text","text":"some minor lifting of restrictions. The"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"therefore, provides a significant amount of"},{"type":"text","text":" "},{"type":"text","text":"information that is useful when working with GVariant."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantType"}],"url":"\/documentation\/glib\/varianttype"},"doc://GLib/documentation/GLib/VariantType/init(_:)-6gp0c":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GVariantType"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-6gp0c","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(_:)-6gp0c"},"doc://GLib/documentation/GLib/VariantType/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(opaquepointer:)"},"doc://GLib/documentation/GLib/VariantType/checked(arg0:)":{"role":"symbol","title":"checked(arg0:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"checked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"arg0"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">!) -> "},{"kind":"typeIdentifier","text":"VariantType","preciseIdentifier":"s:4GLib11VariantTypeC"},{"kind":"text","text":"!"}],"abstract":[],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/checked(arg0:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/checked(arg0:)"},"doc://GLib/documentation/GLib/VariantTypeProtocol":{"role":"symbol","title":"VariantTypeProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"VariantTypeProtocol"}],"abstract":[{"type":"text","text":"This section introduces the GVariant type system. It is based, in"},{"type":"text","text":" "},{"type":"text","text":"large part, on the D-Bus type system, with two major changes and"},{"type":"text","text":" "},{"type":"text","text":"some minor lifting of restrictions. The"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"therefore, provides a significant amount of"},{"type":"text","text":" "},{"type":"text","text":"information that is useful when working with GVariant."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantTypeProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"VariantTypeProtocol"}],"url":"\/documentation\/glib\/varianttypeprotocol"},"doc://GLib/documentation/GLib/VariantType/init(retainingRaw:)-991zl":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingRaw:)-991zl","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(retainingraw:)-991zl"},"doc://GLib/documentation/GLib/VariantType/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"GVariantType"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"variant_type_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/ptr"},"doc://GLib/documentation/GLib/VariantType/init(_:)-9qngo":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"GVariantType"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(_:)-9qngo","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(_:)-9qngo"},"doc://GLib/documentation/GLib/PointerWrapper":{"role":"symbol","title":"PointerWrapper","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PointerWrapper"}],"abstract":[{"type":"text","text":"Protocol for GLib types that wrap pointers."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/PointerWrapper","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PointerWrapper"}],"url":"\/documentation\/glib\/pointerwrapper"},"doc://GLib/documentation/GLib/VariantType/init(raw:)-96av2":{"role":"symbol","title":"init(raw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"raw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(raw:)-96av2","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(raw:)-96av2"},"doc://GLib/documentation/GLib/VariantType/init(retainingRaw:)-1w0qp":{"role":"symbol","title":"init(retainingRaw:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingRaw"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingRaw:)-1w0qp","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(retainingraw:)-1w0qp"},"http://dbus.freedesktop.org/doc/dbus-specification.html":{"title":"D-Bus specification","titleInlineContent":[{"type":"text","text":"D-Bus specification"}],"type":"link","identifier":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html","url":"http:\/\/dbus.freedesktop.org\/doc\/dbus-specification.html"},"doc://GLib/documentation/GLib/VariantType/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Optional initialiser from a non-mutating "},{"type":"codeVoice","code":"gpointer"},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type."},{"type":"text","text":" "},{"type":"text","text":"This creates an instance without performing an unbalanced retain"},{"type":"text","text":" "},{"type":"text","text":"i.e., ownership is transferred to the "},{"type":"codeVoice","code":"VariantType"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(gpointer:)"},"doc://GLib/documentation/GLib/VariantType/init(retainingOpaquePointer:)":{"role":"symbol","title":"init(retainingOpaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"retainingOpaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped, retaining initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"VariantTypeProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/GLib\/documentation\/GLib\/VariantType\/init(retainingOpaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/glib\/varianttype\/init(retainingopaquepointer:)"}}}