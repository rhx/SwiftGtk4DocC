{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueProtocol"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"PointerWrapper","preciseIdentifier":"s:4GLib14PointerWrapperP"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" should be implemented for components which either display"},{"type":"text","text":" "},{"type":"text","text":"a value from a bounded range, or which allow the user to specify a"},{"type":"text","text":" "},{"type":"text","text":"value from a bounded range, or both. For instance, most sliders and"},{"type":"text","text":" "},{"type":"text","text":"range controls, as well as dials, should have "},{"type":"codeVoice","code":"AtkObject"},{"type":"text","text":" "},{"type":"text","text":"representations which implement "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" on the component’s"},{"type":"text","text":" "},{"type":"text","text":"behalf. "},{"type":"codeVoice","code":"AtKValues"},{"type":"text","text":" may be read-only, in which case attempts to"},{"type":"text","text":" "},{"type":"text","text":"alter the value return would fail."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“current-value-text”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of current value text<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"In addition to providing the current value, implementors can"},{"type":"text","text":" "},{"type":"text","text":"optionally provide an end-user-consumable textual description"},{"type":"text","text":" "},{"type":"text","text":"associated with this value. This description should be included"},{"type":"text","text":" "},{"type":"text","text":"when the numeric value fails to convey the full, on-screen"},{"type":"text","text":" "},{"type":"text","text":"representation seen by users."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<example>"},{"type":"text","text":" "},{"type":"text","text":"<title>Password strength<\/title>"},{"type":"text","text":" "},{"type":"text","text":"A password strength meter whose value changes as the user types"},{"type":"text","text":" "},{"type":"text","text":"their new password. Red is used for values less than 4.0, yellow"},{"type":"text","text":" "},{"type":"text","text":"for values between 4.0 and 7.0, and green for values greater than"},{"type":"text","text":" "},{"type":"text","text":"7.0. In this instance, value text should be provided by the"},{"type":"text","text":" "},{"type":"text","text":"implementor. Appropriate value text would be “weak”, “acceptable,”"},{"type":"text","text":" "},{"type":"text","text":"and “strong” respectively."},{"type":"text","text":" "},{"type":"text","text":"<\/example>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A level bar whose value changes to reflect the battery charge. The"},{"type":"text","text":" "},{"type":"text","text":"color remains the same regardless of the charge and there is no"},{"type":"text","text":" "},{"type":"text","text":"on-screen text reflecting the fullness of the battery. In this"},{"type":"text","text":" "},{"type":"text","text":"case, because the position within the bar is the only indication"},{"type":"text","text":" "},{"type":"text","text":"the user has of the current charge, value text should not be"},{"type":"text","text":" "},{"type":"text","text":"provided by the implementor."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect2 id=“implementor-notes”>"},{"type":"text","text":" "},{"type":"text","text":"<title>Implementor Notes<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Implementors should bear in mind that assistive technologies will"},{"type":"text","text":" "},{"type":"text","text":"likely prefer the value text provided over the numeric value when"},{"type":"text","text":" "},{"type":"text","text":"presenting a widget’s value. As a result, strings not intended for"},{"type":"text","text":" "},{"type":"text","text":"end users should not be exposed in the value text, and strings"},{"type":"text","text":" "},{"type":"text","text":"which are exposed should be localized. In the case of widgets which"},{"type":"text","text":" "},{"type":"text","text":"display value text on screen, for instance through a separate label"},{"type":"text","text":" "},{"type":"text","text":"in close proximity to the value-displaying widget, it is still"},{"type":"text","text":" "},{"type":"text","text":"expected that implementors will expose the value text using the"},{"type":"text","text":" "},{"type":"text","text":"above API."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" should NOT be implemented for widgets whose displayed"},{"type":"text","text":" "},{"type":"text","text":"value is not reflective of a meaningful amount. For instance, a"},{"type":"text","text":" "},{"type":"text","text":"progress pulse indicator whose value alternates between 0.0 and 1.0"},{"type":"text","text":" "},{"type":"text","text":"to indicate that some process is still taking place should not"},{"type":"text","text":" "},{"type":"text","text":"implement "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" because the current value does not reflect"},{"type":"text","text":" "},{"type":"text","text":"progress towards completion."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect2>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“ranges”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of ranges<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"In addition to providing the minimum and maximum values,"},{"type":"text","text":" "},{"type":"text","text":"implementors can optionally provide details about subranges"},{"type":"text","text":" "},{"type":"text","text":"associated with the widget. These details should be provided by the"},{"type":"text","text":" "},{"type":"text","text":"implementor when both of the following are communicated visually to"},{"type":"text","text":" "},{"type":"text","text":"the end user:"},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>The existence of distinct ranges such as “weak”,"},{"type":"text","text":" "},{"type":"text","text":"“acceptable”, and “strong” indicated by color, bar tick marks,"},{"type":"text","text":" "},{"type":"text","text":"and\/or on-screen text.<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>Where the current value stands within a given subrange,"},{"type":"text","text":" "},{"type":"text","text":"for instance illustrating progression from very “weak” towards"},{"type":"text","text":" "},{"type":"text","text":"nearly “acceptable” through changes in shade and\/or position on"},{"type":"text","text":" "},{"type":"text","text":"the bar within the “weak” subrange.<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<\/itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"If both of the above do not apply to the widget, it should be"},{"type":"text","text":" "},{"type":"text","text":"sufficient to expose the numeric value, along with the value text"},{"type":"text","text":" "},{"type":"text","text":"if appropriate, to make the widget accessible."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect2 id=“ranges-implementor-notes”>"},{"type":"text","text":" "},{"type":"text","text":"<title>Implementor Notes<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"If providing subrange details is deemed necessary, all possible"},{"type":"text","text":" "},{"type":"text","text":"values of the widget are expected to fall within one of the"},{"type":"text","text":" "},{"type":"text","text":"subranges defined by the implementor."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect2>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“localization”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of localization of end-user-consumable text"},{"type":"text","text":" "},{"type":"text","text":"values<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Because value text and subrange descriptors are human-consumable,"},{"type":"text","text":" "},{"type":"text","text":"implementors are expected to provide localized strings which can be"},{"type":"text","text":" "},{"type":"text","text":"directly presented to end users via their assistive technology. In"},{"type":"text","text":" "},{"type":"text","text":"order to simplify this for implementors, implementors can use"},{"type":"text","text":" "},{"type":"codeVoice","code":"atk_value_type_get_localized_name()"},{"type":"text","text":" with the following"},{"type":"text","text":" "},{"type":"text","text":"already-localized constants for commonly-needed values can be used:"},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_WEAK<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_WEAK<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_ACCEPTABLE<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_STRONG<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_STRONG<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_LOW<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_LOW<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_MEDIUM<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_HIGH<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_HIGH<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_BAD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_BAD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_GOOD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_GOOD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_BEST<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_SUBSUBOPTIMAL<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_SUBOPTIMAL<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_OPTIMAL<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<\/itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Proposals for additional constants, along with their use cases,"},{"type":"text","text":" "},{"type":"text","text":"should be submitted to the GNOME Accessibility Team."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“changes”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of changes<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Note that if there is a textual description associated with the new"},{"type":"text","text":" "},{"type":"text","text":"numeric value, that description should be included regardless of"},{"type":"text","text":" "},{"type":"text","text":"whether or not it has also changed."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ValueProtocol"},{"type":"text","text":" protocol exposes the methods and properties of an underlying "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"The default implementation of these can be found in the protocol extension below."},{"type":"text","text":" "},{"type":"text","text":"For a concrete class that implements these methods and properties, see "},{"type":"codeVoice","code":"Value"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Alternatively, use "},{"type":"codeVoice","code":"ValueRef"},{"type":"text","text":" as a lighweight, "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference if you already have an instance you just want to use."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/atk\/valueprotocol"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Atk\/4GLib14PointerWrapperP"],"kind":"relationships","title":"Inherits From","type":"inheritsFrom"},{"identifiers":["doc:\/\/Atk\/documentation\/Atk\/NoOpObjectProtocol"],"kind":"relationships","title":"Inherited By","type":"inheritedBy"},{"identifiers":["doc:\/\/Atk\/documentation\/Atk\/NoOpObject","doc:\/\/Atk\/documentation\/Atk\/NoOpObjectRef","doc:\/\/Atk\/documentation\/Atk\/Value","doc:\/\/Atk\/documentation\/Atk\/ValueRef"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"identifier":{"url":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The ATK interface implemented by valuators and components which display or select a value from a bounded range of values."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueProtocol"}],"title":"ValueProtocol","roleHeading":"Protocol","role":"symbol","symbolKind":"protocol","externalID":"s:3Atk13ValueProtocolP","modules":[{"name":"Atk"}],"navigatorTitle":[{"kind":"identifier","text":"ValueProtocol"}]},"hierarchy":{"paths":[["doc:\/\/Atk\/documentation\/Atk"]]},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/increment","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/range","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/subRanges","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/value_ptr-8e474"]},{"title":"Instance Methods","identifiers":["doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/connect(signal:flags:data:destroyData:signalHandler:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/connect(signal:flags:handler:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getCurrent(value:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getIncrement()","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getMaximum(value:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getMinimum(value:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getMinimumIncrement(value:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getRange()","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getSubRanges()","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getValueAndText(value:text:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/onValueChanged(flags:handler:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/setCurrent(value:)","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/setValue(newValue:)"]},{"title":"Type Properties","identifiers":["doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/valueChangedSignal"]}],"references":{"doc://Atk/documentation/Atk/ValueProtocol/getMaximum(value:)":{"role":"symbol","title":"getMaximum(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getMaximum"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GObjectValueT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObjectValueT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Gets the maximum value of this object."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getMaximum(value:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/atk\/valueprotocol\/getmaximum(value:)"},"doc://Atk/documentation/Atk/ValueProtocol/range":{"role":"symbol","title":"range","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"range"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RangeRef","preciseIdentifier":"s:3Atk8RangeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Gets the range of this object."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/range","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/range"},"doc://Atk/documentation/Atk/ValueProtocol/getMinimum(value:)":{"role":"symbol","title":"getMinimum(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getMinimum"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GObjectValueT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObjectValueT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Gets the minimum value of this object."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getMinimum(value:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/atk\/valueprotocol\/getminimum(value:)"},"doc://Atk/documentation/Atk/NoOpObjectProtocol":{"role":"symbol","title":"NoOpObjectProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoOpObjectProtocol"}],"abstract":[{"type":"text","text":"An AtkObject which purports to implement all ATK interfaces."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/NoOpObjectProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoOpObjectProtocol"}],"url":"\/documentation\/atk\/noopobjectprotocol"},"doc://Atk/documentation/Atk/ValueProtocol":{"role":"symbol","title":"ValueProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueProtocol"}],"abstract":[{"type":"text","text":"The ATK interface implemented by valuators and components which display or select a value from a bounded range of values."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValueProtocol"}],"url":"\/documentation\/atk\/valueprotocol"},"doc://Atk/documentation/Atk/ValueProtocol/getValueAndText(value:text:)":{"role":"symbol","title":"getValueAndText(value:text:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getValueAndText"},{"kind":"text","text":"("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gdouble","preciseIdentifier":"c:@T@gdouble"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"gchar","preciseIdentifier":"c:@T@gchar"},{"kind":"text","text":">?>!)"}],"abstract":[{"type":"text","text":"Gets the current value and the human readable text alternative of"},{"type":"text","text":" "},{"type":"codeVoice","code":"obj"},{"type":"text","text":". "},{"type":"codeVoice","code":"text"},{"type":"text","text":" is a newly created string, that must be freed by the"},{"type":"text","text":" "},{"type":"text","text":"caller. Can be NULL if no descriptor is available."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getValueAndText(value:text:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/getvalueandtext(value:text:)"},"doc://Atk/documentation/Atk/ValueRef":{"role":"symbol","title":"ValueRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueRef"}],"abstract":[{"type":"text","text":"The ATK interface implemented by valuators and components which display or select a value from a bounded range of values."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValueRef"}],"url":"\/documentation\/atk\/valueref"},"doc://Atk/documentation/Atk/ValueProtocol/setCurrent(value:)":{"role":"symbol","title":"setCurrent(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setCurrent"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GObjectValueT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObjectValueT"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Sets the value of this object."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/setCurrent(value:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/atk\/valueprotocol\/setcurrent(value:)"},"doc://Atk/documentation/Atk/NoOpObjectRef":{"role":"symbol","title":"NoOpObjectRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoOpObjectRef"}],"abstract":[{"type":"text","text":"An AtkObject which purports to implement all ATK interfaces."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/NoOpObjectRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoOpObjectRef"}],"url":"\/documentation\/atk\/noopobjectref"},"doc://Atk/documentation/Atk/ValueProtocol/setValue(newValue:)":{"role":"symbol","title":"setValue(newValue:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"setValue"},{"kind":"text","text":"("},{"kind":"externalParam","text":"newValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Sets the value of this object."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/setValue(newValue:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/setvalue(newvalue:)"},"doc://Atk/documentation/Atk/ValueProtocol/onValueChanged(flags:handler:)":{"role":"symbol","title":"onValueChanged(flags:handler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onValueChanged"},{"kind":"text","text":"("},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConnectFlags","preciseIdentifier":"s:10GLibObject12ConnectFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"handler"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ValueRef","preciseIdentifier":"s:3Atk8ValueRefV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The ‘value-changed’ signal is emitted when the current value"},{"type":"text","text":" "},{"type":"text","text":"that represent the object changes. "},{"type":"codeVoice","code":"value"},{"type":"text","text":" is the numerical"},{"type":"text","text":" "},{"type":"text","text":"representation of this new value.  "},{"type":"codeVoice","code":"text"},{"type":"text","text":" is the human"},{"type":"text","text":" "},{"type":"text","text":"readable text alternative of "},{"type":"codeVoice","code":"value"},{"type":"text","text":", and can be NULL if it is"},{"type":"text","text":" "},{"type":"text","text":"not available. Note that if there is a textual description"},{"type":"text","text":" "},{"type":"text","text":"associated with the new numeric value, that description"},{"type":"text","text":" "},{"type":"text","text":"should be included regardless of whether or not it has also"},{"type":"text","text":" "},{"type":"text","text":"changed."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/onValueChanged(flags:handler:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/onvaluechanged(flags:handler:)"},"doc://Atk/documentation/Atk/ValueProtocol/connect(signal:flags:handler:)":{"role":"symbol","title":"connect(signal:flags:handler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ValueSignalName","preciseIdentifier":"s:3Atk15ValueSignalNameO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConnectFlags","preciseIdentifier":"s:10GLibObject12ConnectFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"handler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SignalHandler","preciseIdentifier":"s:10GLibObject13SignalHandlera"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Connect a Swift signal handler to the given, typed "},{"type":"codeVoice","code":"ValueSignalName"},{"type":"text","text":" signal"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/connect(signal:flags:handler:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/connect(signal:flags:handler:)"},"doc://Atk/documentation/Atk/ValueProtocol/getMinimumIncrement(value:)":{"role":"symbol","title":"getMinimumIncrement(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getMinimumIncrement"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GObjectValueT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObjectValueT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Gets the minimum increment by which the value of this object may be changed.  If zero,"},{"type":"text","text":" "},{"type":"text","text":"the minimum increment is undefined, which may mean that it is limited only by the"},{"type":"text","text":" "},{"type":"text","text":"floating point precision of the platform."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getMinimumIncrement(value:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/atk\/valueprotocol\/getminimumincrement(value:)"},"doc://Atk/documentation/Atk/ValueProtocol/getSubRanges()":{"role":"symbol","title":"getSubRanges()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getSubRanges"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"RefSListRef","preciseIdentifier":"s:4GLib08RefSListB0V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"RangeRef","preciseIdentifier":"s:3Atk8RangeRefV"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Gets the list of subranges defined for this object. See "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" "},{"type":"text","text":"introduction for examples of subranges and when to expose them."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getSubRanges()","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/getsubranges()"},"doc://Atk/documentation/Atk/ValueProtocol/valueChangedSignal":{"role":"symbol","title":"valueChangedSignal","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"valueChangedSignal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ValueSignalName","preciseIdentifier":"s:3Atk15ValueSignalNameO"}],"abstract":[{"type":"text","text":"Typed "},{"type":"codeVoice","code":"value-changed"},{"type":"text","text":" signal for using the "},{"type":"codeVoice","code":"connect(signal:)"},{"type":"text","text":" methods"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/valueChangedSignal","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/valuechangedsignal"},"doc://Atk/documentation/Atk/NoOpObject":{"role":"symbol","title":"NoOpObject","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NoOpObject"}],"abstract":[{"type":"text","text":"An AtkObject which purports to implement all ATK interfaces."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/NoOpObject","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NoOpObject"}],"url":"\/documentation\/atk\/noopobject"},"doc://Atk/documentation/Atk/ValueProtocol/subRanges":{"role":"symbol","title":"subRanges","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"subRanges"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"RefSListRef","preciseIdentifier":"s:4GLib08RefSListB0V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"RangeRef","preciseIdentifier":"s:3Atk8RangeRefV"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Gets the list of subranges defined for this object. See "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" "},{"type":"text","text":"introduction for examples of subranges and when to expose them."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/subRanges","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/subranges"},"doc://Atk/documentation/Atk/ValueProtocol/getRange()":{"role":"symbol","title":"getRange()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getRange"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"RangeRef","preciseIdentifier":"s:3Atk8RangeRefV"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Gets the range of this object."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getRange()","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/getrange()"},"doc://Atk/documentation/Atk/ValueProtocol/getCurrent(value:)":{"role":"symbol","title":"getCurrent(value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getCurrent"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"GObjectValueT"},{"kind":"text","text":">("},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GObjectValueT"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Gets the value of this object."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getCurrent(value:)","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/atk\/valueprotocol\/getcurrent(value:)"},"doc://Atk/documentation/Atk/ValueProtocol/value_ptr-8e474":{"defaultImplementations":1,"role":"symbol","title":"value_ptr","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value_ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AtkValue"},{"kind":"text","text":">!"}],"abstract":[{"type":"text","text":"Typed pointer to the underlying "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/value_ptr-8e474","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/atk\/valueprotocol\/value_ptr-8e474"},"doc://Atk/documentation/Atk":{"role":"collection","title":"Atk","abstract":[],"identifier":"doc:\/\/Atk\/documentation\/Atk","kind":"symbol","type":"topic","url":"\/documentation\/atk"},"doc://Atk/documentation/Atk/ValueProtocol/connect(signal:flags:data:destroyData:signalHandler:)":{"role":"symbol","title":"connect(signal:flags:data:destroyData:signalHandler:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"signal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ValueSignalName","preciseIdentifier":"s:3Atk15ValueSignalNameO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"flags"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConnectFlags","preciseIdentifier":"s:10GLibObject12ConnectFlagsV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"!, "},{"kind":"externalParam","text":"destroyData"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GClosureNotify","preciseIdentifier":"c:@T@GClosureNotify"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"signalHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GCallback","preciseIdentifier":"c:gclosure.h@T@GCallback"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Connect a C signal handler to the given, typed "},{"type":"codeVoice","code":"ValueSignalName"},{"type":"text","text":" signal"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/connect(signal:flags:data:destroyData:signalHandler:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/connect(signal:flags:data:destroydata:signalhandler:)"},"doc://Atk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Atk\/4GLib14PointerWrapperP"},"doc://Atk/documentation/Atk/ValueProtocol/increment":{"role":"symbol","title":"increment","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"increment"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"}],"abstract":[{"type":"text","text":"Gets the minimum increment by which the value of this object may be"},{"type":"text","text":" "},{"type":"text","text":"changed.  If zero, the minimum increment is undefined, which may"},{"type":"text","text":" "},{"type":"text","text":"mean that it is limited only by the floating point precision of the"},{"type":"text","text":" "},{"type":"text","text":"platform."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/increment","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/increment"},"doc://Atk/documentation/Atk/Value":{"role":"symbol","title":"Value","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Value"}],"abstract":[{"type":"text","text":"The ATK interface implemented by valuators and components which display or select a value from a bounded range of values."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/Value","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Value"}],"url":"\/documentation\/atk\/value"},"doc://Atk/documentation/Atk/ValueProtocol/getIncrement()":{"role":"symbol","title":"getIncrement()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"getIncrement"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"}],"abstract":[{"type":"text","text":"Gets the minimum increment by which the value of this object may be"},{"type":"text","text":" "},{"type":"text","text":"changed.  If zero, the minimum increment is undefined, which may"},{"type":"text","text":" "},{"type":"text","text":"mean that it is limited only by the floating point precision of the"},{"type":"text","text":" "},{"type":"text","text":"platform."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol\/getIncrement()","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueprotocol\/getincrement()"}}}