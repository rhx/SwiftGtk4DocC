{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueRef"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" should be implemented for components which either display"},{"type":"text","text":" "},{"type":"text","text":"a value from a bounded range, or which allow the user to specify a"},{"type":"text","text":" "},{"type":"text","text":"value from a bounded range, or both. For instance, most sliders and"},{"type":"text","text":" "},{"type":"text","text":"range controls, as well as dials, should have "},{"type":"codeVoice","code":"AtkObject"},{"type":"text","text":" "},{"type":"text","text":"representations which implement "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" on the component’s"},{"type":"text","text":" "},{"type":"text","text":"behalf. "},{"type":"codeVoice","code":"AtKValues"},{"type":"text","text":" may be read-only, in which case attempts to"},{"type":"text","text":" "},{"type":"text","text":"alter the value return would fail."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“current-value-text”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of current value text<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"In addition to providing the current value, implementors can"},{"type":"text","text":" "},{"type":"text","text":"optionally provide an end-user-consumable textual description"},{"type":"text","text":" "},{"type":"text","text":"associated with this value. This description should be included"},{"type":"text","text":" "},{"type":"text","text":"when the numeric value fails to convey the full, on-screen"},{"type":"text","text":" "},{"type":"text","text":"representation seen by users."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<example>"},{"type":"text","text":" "},{"type":"text","text":"<title>Password strength<\/title>"},{"type":"text","text":" "},{"type":"text","text":"A password strength meter whose value changes as the user types"},{"type":"text","text":" "},{"type":"text","text":"their new password. Red is used for values less than 4.0, yellow"},{"type":"text","text":" "},{"type":"text","text":"for values between 4.0 and 7.0, and green for values greater than"},{"type":"text","text":" "},{"type":"text","text":"7.0. In this instance, value text should be provided by the"},{"type":"text","text":" "},{"type":"text","text":"implementor. Appropriate value text would be “weak”, “acceptable,”"},{"type":"text","text":" "},{"type":"text","text":"and “strong” respectively."},{"type":"text","text":" "},{"type":"text","text":"<\/example>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A level bar whose value changes to reflect the battery charge. The"},{"type":"text","text":" "},{"type":"text","text":"color remains the same regardless of the charge and there is no"},{"type":"text","text":" "},{"type":"text","text":"on-screen text reflecting the fullness of the battery. In this"},{"type":"text","text":" "},{"type":"text","text":"case, because the position within the bar is the only indication"},{"type":"text","text":" "},{"type":"text","text":"the user has of the current charge, value text should not be"},{"type":"text","text":" "},{"type":"text","text":"provided by the implementor."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect2 id=“implementor-notes”>"},{"type":"text","text":" "},{"type":"text","text":"<title>Implementor Notes<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Implementors should bear in mind that assistive technologies will"},{"type":"text","text":" "},{"type":"text","text":"likely prefer the value text provided over the numeric value when"},{"type":"text","text":" "},{"type":"text","text":"presenting a widget’s value. As a result, strings not intended for"},{"type":"text","text":" "},{"type":"text","text":"end users should not be exposed in the value text, and strings"},{"type":"text","text":" "},{"type":"text","text":"which are exposed should be localized. In the case of widgets which"},{"type":"text","text":" "},{"type":"text","text":"display value text on screen, for instance through a separate label"},{"type":"text","text":" "},{"type":"text","text":"in close proximity to the value-displaying widget, it is still"},{"type":"text","text":" "},{"type":"text","text":"expected that implementors will expose the value text using the"},{"type":"text","text":" "},{"type":"text","text":"above API."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" should NOT be implemented for widgets whose displayed"},{"type":"text","text":" "},{"type":"text","text":"value is not reflective of a meaningful amount. For instance, a"},{"type":"text","text":" "},{"type":"text","text":"progress pulse indicator whose value alternates between 0.0 and 1.0"},{"type":"text","text":" "},{"type":"text","text":"to indicate that some process is still taking place should not"},{"type":"text","text":" "},{"type":"text","text":"implement "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" because the current value does not reflect"},{"type":"text","text":" "},{"type":"text","text":"progress towards completion."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect2>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“ranges”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of ranges<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"In addition to providing the minimum and maximum values,"},{"type":"text","text":" "},{"type":"text","text":"implementors can optionally provide details about subranges"},{"type":"text","text":" "},{"type":"text","text":"associated with the widget. These details should be provided by the"},{"type":"text","text":" "},{"type":"text","text":"implementor when both of the following are communicated visually to"},{"type":"text","text":" "},{"type":"text","text":"the end user:"},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>The existence of distinct ranges such as “weak”,"},{"type":"text","text":" "},{"type":"text","text":"“acceptable”, and “strong” indicated by color, bar tick marks,"},{"type":"text","text":" "},{"type":"text","text":"and\/or on-screen text.<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>Where the current value stands within a given subrange,"},{"type":"text","text":" "},{"type":"text","text":"for instance illustrating progression from very “weak” towards"},{"type":"text","text":" "},{"type":"text","text":"nearly “acceptable” through changes in shade and\/or position on"},{"type":"text","text":" "},{"type":"text","text":"the bar within the “weak” subrange.<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<\/itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"If both of the above do not apply to the widget, it should be"},{"type":"text","text":" "},{"type":"text","text":"sufficient to expose the numeric value, along with the value text"},{"type":"text","text":" "},{"type":"text","text":"if appropriate, to make the widget accessible."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect2 id=“ranges-implementor-notes”>"},{"type":"text","text":" "},{"type":"text","text":"<title>Implementor Notes<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"If providing subrange details is deemed necessary, all possible"},{"type":"text","text":" "},{"type":"text","text":"values of the widget are expected to fall within one of the"},{"type":"text","text":" "},{"type":"text","text":"subranges defined by the implementor."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect2>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“localization”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of localization of end-user-consumable text"},{"type":"text","text":" "},{"type":"text","text":"values<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Because value text and subrange descriptors are human-consumable,"},{"type":"text","text":" "},{"type":"text","text":"implementors are expected to provide localized strings which can be"},{"type":"text","text":" "},{"type":"text","text":"directly presented to end users via their assistive technology. In"},{"type":"text","text":" "},{"type":"text","text":"order to simplify this for implementors, implementors can use"},{"type":"text","text":" "},{"type":"codeVoice","code":"atk_value_type_get_localized_name()"},{"type":"text","text":" with the following"},{"type":"text","text":" "},{"type":"text","text":"already-localized constants for commonly-needed values can be used:"},{"type":"text","text":" "},{"type":"text","text":"<\/para>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_WEAK<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_WEAK<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_ACCEPTABLE<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_STRONG<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_STRONG<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_LOW<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_LOW<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_MEDIUM<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_HIGH<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_HIGH<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_BAD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_BAD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_GOOD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_VERY_GOOD<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_BEST<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_SUBSUBOPTIMAL<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_SUBOPTIMAL<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<listitem>ATK_VALUE_OPTIMAL<\/listitem>"},{"type":"text","text":" "},{"type":"text","text":"<\/itemizedlist>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Proposals for additional constants, along with their use cases,"},{"type":"text","text":" "},{"type":"text","text":"should be submitted to the GNOME Accessibility Team."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<refsect1 id=“changes”>"},{"type":"text","text":" "},{"type":"text","text":"<title>On the subject of changes<\/title>"},{"type":"text","text":" "},{"type":"text","text":"<para>"},{"type":"text","text":" "},{"type":"text","text":"Note that if there is a textual description associated with the new"},{"type":"text","text":" "},{"type":"text","text":"numeric value, that description should be included regardless of"},{"type":"text","text":" "},{"type":"text","text":"whether or not it has also changed."},{"type":"text","text":" "},{"type":"text","text":"<\/para>"},{"type":"text","text":" "},{"type":"text","text":"<\/refsect1>"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ValueRef"},{"type":"text","text":" type acts as a lightweight Swift reference to an underlying "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"It exposes methods that can operate on this data type through "},{"type":"codeVoice","code":"ValueProtocol"},{"type":"text","text":" conformance."},{"type":"text","text":" "},{"type":"text","text":"Use "},{"type":"codeVoice","code":"ValueRef"},{"type":"text","text":" only as an "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" reference to an existing "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" instance."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/atk\/valueref"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/Atk\/4GLib14PointerWrapperP","doc:\/\/Atk\/documentation\/Atk\/ValueProtocol"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"identifier":{"url":"doc:\/\/Atk\/documentation\/Atk\/ValueRef","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The ATK interface implemented by valuators and components which display or select a value from a bounded range of values."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueRef"}],"title":"ValueRef","roleHeading":"Structure","role":"symbol","symbolKind":"struct","externalID":"s:3Atk8ValueRefV","modules":[{"name":"Atk"}],"navigatorTitle":[{"kind":"identifier","text":"ValueRef"}]},"hierarchy":{"paths":[["doc:\/\/Atk\/documentation\/Atk"]]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-1aks","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-1cg68","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-8r3td","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-8zxvo","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-9tupq","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(cPointer:)","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(constPointer:)","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(gconstpointer:)","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(gpointer:)","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(mutating:)","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(opaquePointer:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Atk\/documentation\/Atk\/ValueRef\/ptr"]},{"title":"Default Implementations","identifiers":["doc:\/\/Atk\/documentation\/Atk\/ValueRef\/PointerWrapper-Implementations","doc:\/\/Atk\/documentation\/Atk\/ValueRef\/ValueProtocol-Implementations"],"generated":true}],"references":{"doc://Atk/documentation/Atk/ValueRef/init(_:)-9tupq":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Reference intialiser for a related type that implements "},{"type":"codeVoice","code":"ValueProtocol"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-9tupq","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(_:)-9tupq"},"doc://Atk/documentation/Atk/ValueRef/init(gpointer:)":{"role":"symbol","title":"init(gpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gpointer","preciseIdentifier":"c:@T@gpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional "},{"type":"codeVoice","code":"gpointer"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(gpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(gpointer:)"},"doc://Atk/documentation/Atk/ValueRef/PointerWrapper-Implementations":{"role":"collectionGroup","title":"PointerWrapper Implementations","abstract":[],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/PointerWrapper-Implementations","kind":"article","type":"topic","url":"\/documentation\/atk\/valueref\/pointerwrapper-implementations"},"doc://Atk/documentation/Atk/ValueProtocol":{"role":"symbol","title":"ValueProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueProtocol"}],"abstract":[{"type":"text","text":"The ATK interface implemented by valuators and components which display or select a value from a bounded range of values."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueProtocol","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValueProtocol"}],"url":"\/documentation\/atk\/valueprotocol"},"doc://Atk/documentation/Atk/ValueRef/ptr":{"role":"symbol","title":"ptr","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"ptr"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"},{"kind":"text","text":"!"}],"abstract":[{"type":"text","text":"Untyped pointer to the underlying "},{"type":"codeVoice","code":"AtkValue"},{"type":"text","text":" instance."},{"type":"text","text":" "},{"type":"text","text":"For type-safe access, use the generated, typed pointer "},{"type":"codeVoice","code":"value_ptr"},{"type":"text","text":" property instead."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/ptr","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/ptr"},"doc://Atk/documentation/Atk/ValueRef":{"role":"symbol","title":"ValueRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValueRef"}],"abstract":[{"type":"text","text":"The ATK interface implemented by valuators and components which display or select a value from a bounded range of values."}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValueRef"}],"url":"\/documentation\/atk\/valueref"},"doc://Atk/documentation/Atk/ValueRef/init(_:)-1cg68":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AtkValue"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-1cg68","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(_:)-1cg68"},"doc://Atk/documentation/Atk/ValueRef/init(opaquePointer:)":{"role":"symbol","title":"init(opaquePointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"opaquePointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OpaquePointer","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ValueProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(opaquePointer:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(opaquepointer:)"},"doc://Atk/documentation/Atk/ValueRef/ValueProtocol-Implementations":{"role":"collectionGroup","title":"ValueProtocol Implementations","abstract":[],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/ValueProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/atk\/valueref\/valueprotocol-implementations"},"doc://Atk/documentation/Atk/ValueRef/init(_:)-8r3td":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AtkValue"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Designated initialiser from a constant pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-8r3td","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(_:)-8r3td"},"doc://Atk/documentation/Atk/ValueRef/init(cPointer:)":{"role":"symbol","title":"init(cPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"cPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ValueProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(cPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(cpointer:)"},"doc://Atk/documentation/Atk/ValueRef/init(mutating:)":{"role":"symbol","title":"init(mutating:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"mutating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeRawPointer","preciseIdentifier":"s:SV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Unsafe untyped initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ValueProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(mutating:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(mutating:)"},"doc://Atk/documentation/Atk":{"role":"collection","title":"Atk","abstract":[],"identifier":"doc:\/\/Atk\/documentation\/Atk","kind":"symbol","type":"topic","url":"\/documentation\/atk"},"doc://Atk/documentation/Atk/ValueRef/init(_:)-1aks":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AtkValue"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-1aks","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(_:)-1aks"},"doc://Atk/documentation/Atk/ValueRef/init(_:)-8zxvo":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AtkValue"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable pointer to the underlying "},{"type":"codeVoice","code":"C"},{"type":"text","text":" data type"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(_:)-8zxvo","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(_:)-8zxvo"},"doc://Atk/documentation/Atk/ValueRef/init(gconstpointer:)":{"role":"symbol","title":"init(gconstpointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"!("},{"kind":"externalParam","text":"gconstpointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"gconstpointer","preciseIdentifier":"c:gtypes.h@T@gconstpointer"},{"kind":"text","text":"?)"}],"abstract":[{"type":"text","text":"Conditional initialiser from an optional, non-mutable "},{"type":"codeVoice","code":"gconstpointer"}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(gconstpointer:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(gconstpointer:)"},"doc://Atk/4GLib14PointerWrapperP":{"type":"unresolvable","title":"GLib.PointerWrapper","identifier":"doc:\/\/Atk\/4GLib14PointerWrapperP"},"doc://Atk/documentation/Atk/ValueRef/init(constPointer:)":{"role":"symbol","title":"init(constPointer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"constPointer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Unsafe typed initialiser."},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"Do not use unless you know the underlying data type the pointer points to conforms to "},{"type":"codeVoice","code":"ValueProtocol"},{"type":"text","text":"."}]}],"identifier":"doc:\/\/Atk\/documentation\/Atk\/ValueRef\/init(constPointer:)","kind":"symbol","type":"topic","url":"\/documentation\/atk\/valueref\/init(constpointer:)"}}}