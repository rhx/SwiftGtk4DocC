{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/font\/init(_:)-58v69","title":"init!(UnsafeMutablePointer<PangoCairoFont>?)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(_:)-5enod","title":"init(UnsafeMutablePointer<PangoCairoFont>)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(_:)-60gub","title":"init!(UnsafePointer<PangoCairoFont>?)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(_:)-99767","title":"init(UnsafePointer<PangoCairoFont>)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(cpointer:)","title":"init<T>(cPointer: UnsafeMutablePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(gconstpointer:)","title":"init!(gconstpointer: gconstpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(gpointer:)","title":"init!(gpointer: gpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(opaquepointer:)","title":"init(opaquePointer: OpaquePointer)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(pangocairofont:)","title":"init<T>(pangoCairoFont: T)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(raw:)-72q6o","title":"init(raw: UnsafeRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(raw:)-84mm","title":"init(raw: UnsafeMutableRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(retaining:)","title":"init(retaining: UnsafeMutablePointer<PangoCairoFont>)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(retainingcpointer:)","title":"init<T>(retainingCPointer: UnsafeMutablePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(retainingopaquepointer:)","title":"init(retainingOpaquePointer: OpaquePointer)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(retainingraw:)-2hi2h","title":"init(retainingRaw: UnsafeMutableRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/font\/init(retainingraw:)-9uj9l","title":"init(retainingRaw: UnsafeRawPointer)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/font\/font_ptr","title":"var font_ptr: UnsafeMutablePointer<PangoCairoFont>!","type":"property"},{"path":"\/documentation\/pangocairo\/font\/scaledfont","title":"var scaledFont: ScaledFontRef!","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/font\/getscaledfont()","title":"func getScaledFont() -> ScaledFontRef!","type":"method"}],"path":"\/documentation\/pangocairo\/font\/fontprotocol-implementations","title":"FontProtocol Implementations","type":"symbol"}],"path":"\/documentation\/pangocairo\/font","title":"Font","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmap\/init(_:)-25lgk","title":"init!(UnsafeMutablePointer<PangoCairoFontMap>?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(_:)-4s986","title":"init(UnsafePointer<PangoCairoFontMap>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(_:)-5khft","title":"init!(UnsafePointer<PangoCairoFontMap>?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(_:)-9djgc","title":"init(UnsafeMutablePointer<PangoCairoFontMap>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(cpointer:)","title":"init<T>(cPointer: UnsafeMutablePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(gconstpointer:)","title":"init!(gconstpointer: gconstpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(gpointer:)","title":"init!(gpointer: gpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(opaquepointer:)","title":"init(opaquePointer: OpaquePointer)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(pangocairofontmap:)","title":"init<T>(pangoCairoFontMap: T)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(raw:)-2ok2b","title":"init(raw: UnsafeRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(raw:)-4r7r3","title":"init(raw: UnsafeMutableRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(retaining:)","title":"init(retaining: UnsafeMutablePointer<PangoCairoFontMap>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(retainingcpointer:)","title":"init<T>(retainingCPointer: UnsafeMutablePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(retainingopaquepointer:)","title":"init(retainingOpaquePointer: OpaquePointer)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(retainingraw:)-10l31","title":"init(retainingRaw: UnsafeRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmap\/init(retainingraw:)-75bwb","title":"init(retainingRaw: UnsafeMutableRawPointer)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmap\/getdefault()","title":"static func getDefault() -> FontMap!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/newfor(fonttype:)","title":"static func newFor(fontType: cairo_font_type_t) -> FontMap!","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmap\/fonttype","title":"var fontType: cairo_font_type_t","type":"property"},{"path":"\/documentation\/pangocairo\/fontmap\/font_map_ptr","title":"var font_map_ptr: UnsafeMutablePointer<PangoCairoFontMap>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontmap\/resolution","title":"var resolution: CDouble","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmap\/bind(property:to:_:flags:transformfrom:transformto:)","title":"func bind<Q, T>(property: FontMapPropertyName, to: T, Q, flags: BindingFlags, transformFrom: ValueTransformer, transformTo: ValueTransformer) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/createcontext()","title":"func createContext() -> ContextRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/get(property:)","title":"func get(property: FontMapPropertyName) -> Value","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/getfonttype()","title":"func getFontType() -> cairo_font_type_t","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/getresolution()","title":"func getResolution() -> CDouble","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/set(property:value:)","title":"func set(property: FontMapPropertyName, value: Value)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/setdefault()","title":"func setDefault()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmap\/setresolution(dpi:)","title":"func setResolution(dpi: CDouble)","type":"method"}],"path":"\/documentation\/pangocairo\/fontmap\/fontmapprotocol-implementations","title":"FontMapProtocol Implementations","type":"symbol"}],"path":"\/documentation\/pangocairo\/fontmap","title":"FontMap","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/fonttype","title":"var fontType: cairo_font_type_t","type":"property"},{"children":[{"children":[{"path":"\/documentation\/pangocairo\/fontmapprotocol\/font_map_ptr-1r4li","title":"var font_map_ptr: UnsafeMutablePointer<PangoCairoFontMap>!","type":"property"}],"title":"FontMapProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/pangocairo\/fontmapprotocol\/font_map_ptr-2pp03","title":"var font_map_ptr: UnsafeMutablePointer<PangoCairoFontMap>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/resolution","title":"var resolution: CDouble","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/bind(property:to:_:flags:transformfrom:transformto:)","title":"func bind<Q, T>(property: FontMapPropertyName, to: T, Q, flags: BindingFlags, transformFrom: ValueTransformer, transformTo: ValueTransformer) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/createcontext()","title":"func createContext() -> ContextRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/get(property:)","title":"func get(property: FontMapPropertyName) -> Value","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/getfonttype()","title":"func getFontType() -> cairo_font_type_t","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/getresolution()","title":"func getResolution() -> CDouble","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/set(property:value:)","title":"func set(property: FontMapPropertyName, value: Value)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/setdefault()","title":"func setDefault()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapprotocol\/setresolution(dpi:)","title":"func setResolution(dpi: CDouble)","type":"method"}],"path":"\/documentation\/pangocairo\/fontmapprotocol","title":"FontMapProtocol","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/pangocairo\/fontprotocol\/font_ptr-9uksc","title":"var font_ptr: UnsafeMutablePointer<PangoCairoFont>!","type":"property"}],"title":"FontProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/pangocairo\/fontprotocol\/font_ptr-8rslo","title":"var font_ptr: UnsafeMutablePointer<PangoCairoFont>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontprotocol\/scaledfont","title":"var scaledFont: ScaledFontRef!","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontprotocol\/getscaledfont()","title":"func getScaledFont() -> ScaledFontRef!","type":"method"}],"path":"\/documentation\/pangocairo\/fontprotocol","title":"FontProtocol","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(_:)-3r2fh","title":"init(UnsafeMutablePointer<PangoCairoFontMap>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(_:)-55o4f","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(_:)-5w5r","title":"init!(UnsafePointer<PangoCairoFontMap>?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(_:)-6n1n0","title":"init!(UnsafeMutablePointer<PangoCairoFontMap>?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(_:)-82ngx","title":"init(UnsafePointer<PangoCairoFontMap>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(cpointer:)","title":"init<T>(cPointer: UnsafeMutablePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(constpointer:)","title":"init<T>(constPointer: UnsafePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(gconstpointer:)","title":"init!(gconstpointer: gconstpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(gpointer:)","title":"init!(gpointer: gpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(mutating:)","title":"init(mutating: UnsafeRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(opaquepointer:)","title":"init(opaquePointer: OpaquePointer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/ptr","title":"let ptr: UnsafeMutableRawPointer!","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/getdefault()","title":"static func getDefault() -> FontMapRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/newfor(fonttype:)","title":"static func newFor(fontType: cairo_font_type_t) -> FontMapRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/unowned(_:)","title":"static func unowned<T>(T) -> FontMapRef","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/fonttype","title":"var fontType: cairo_font_type_t","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/font_map_ptr","title":"var font_map_ptr: UnsafeMutablePointer<PangoCairoFontMap>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/parentinstance","title":"var parentInstance: GObject","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/resolution","title":"var resolution: CDouble","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/serial","title":"var serial: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/bind(property:to:_:flags:transformfrom:transformto:)-5jchg","title":"func bind<Q, T>(property: FontMapPropertyName, to: T, Q, flags: BindingFlags, transformFrom: ValueTransformer, transformTo: ValueTransformer) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bind(property:to:_:flags:transformfrom:transformto:)-8qlrp","title":"func bind<Q, T>(property: FontMapPropertyName, to: T, Q, flags: BindingFlags, transformFrom: ValueTransformer, transformTo: ValueTransformer) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/changed()","title":"func changed()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/createcontext()","title":"func createContext() -> ContextRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/get(property:)","title":"func get(property: FontMapPropertyName) -> Value","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getfamily(name:)","title":"func getFamily(name: UnsafePointer<CChar>!) -> FontFamilyRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getfonttype()","title":"func getFontType() -> cairo_font_type_t","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getresolution()","title":"func getResolution() -> CDouble","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getserial()","title":"func getSerial() -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/list(families:nfamilies:)","title":"func list(families: UnsafeMutablePointer<UnsafeMutablePointer<UnsafeMutablePointer<PangoFontFamily>?>?>!, nFamilies: UnsafeMutablePointer<gint>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/loadfont(context:desc:)","title":"func loadFont<ContextT, FontDescriptionT>(context: ContextT, desc: FontDescriptionT) -> FontRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/loadfontset(context:desc:language:)","title":"func loadFontset<ContextT, FontDescriptionT, LanguageT>(context: ContextT, desc: FontDescriptionT, language: LanguageT) -> FontsetRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/set(property:value:)","title":"func set(property: FontMapPropertyName, value: Value)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setdefault()","title":"func setDefault()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setresolution(dpi:)","title":"func setResolution(dpi: CDouble)","type":"method"}],"path":"\/documentation\/pangocairo\/fontmapref\/fontmapprotocol-implementations","title":"FontMapProtocol Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/init(raw:)","title":"init(raw: UnsafeMutableRawPointer)","type":"init"}],"path":"\/documentation\/pangocairo\/fontmapref\/gweakcapturing-implementations","title":"GWeakCapturing Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/itemtype","title":"var itemType: GType","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/list_model_ptr","title":"var list_model_ptr: UnsafeMutablePointer<GListModel>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/nitems","title":"var nItems: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/connect(signal:flags:data:destroydata:signalhandler:)-6kwnt","title":"func connect(signal: ListModelSignalName, flags: ConnectFlags, data: gpointer!, destroyData: GClosureNotify?, signalHandler: GCallback) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/connect(signal:flags:handler:)-8cpri","title":"func connect(signal: ListModelSignalName, flags: ConnectFlags, handler: SignalHandler) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getitem(position:)","title":"func getItem(position: Int) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getitemtype()","title":"func getItemType() -> GType","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getnitems()","title":"func getNItems() -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getobject(position:)","title":"func getObject(position: Int) -> ObjectRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/itemschanged(position:removed:added:)","title":"func itemsChanged(position: Int, removed: Int, added: Int)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/onitemschanged(flags:handler:)","title":"func onItemsChanged(flags: ConnectFlags, handler: (ListModelRef, UInt, UInt, UInt) -> Void) -> Int","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/itemschangedsignal","title":"static var itemsChangedSignal: ListModelSignalName","type":"property"}],"path":"\/documentation\/pangocairo\/fontmapref\/listmodelprotocol-implementations","title":"ListModelProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/gtypeinstance","title":"var gTypeInstance: GTypeInstance","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/isfloating","title":"var isFloating: Bool","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/object_ptr","title":"var object_ptr: UnsafeMutablePointer<GObject>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/swiftobj","title":"var swiftObj: AnyObject?","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/type","title":"var type: GType","type":"property"},{"path":"\/documentation\/pangocairo\/fontmapref\/typename","title":"var typeName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/addtoggleref(notify:data:)","title":"func addToggleRef(notify: GToggleNotify?, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/addweakobserver(_:)","title":"func addWeakObserver((gpointer) -> Void) -> AnyObject","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/addweakpointer(weakpointerlocation:)","title":"func addWeakPointer(weakPointerLocation: UnsafeMutablePointer<gpointer?>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bind(_:target:property:flags:)","title":"func bind<P, Q, T>(P, target: T, property: Q, flags: BindingFlags) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bind(_:to:property:flags:convertfrom:convertto:)-4u8hz","title":"func bind<P, Q, T, U, V>(P, to: T, property: Q, flags: BindingFlags, convertFrom: (U) -> V?, convertTo: (V) -> U?) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bind(_:to:property:flags:convertfrom:convertto:)-os05","title":"func bind<P, Q, T, U, V>(P, to: T, property: Q, flags: BindingFlags, convertFrom: (U?) -> V?, convertTo: (V?) -> U?) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bind(_:to:property:flags:transformfrom:transformto:)","title":"func bind<P, Q, T>(P, to: T, property: Q, flags: BindingFlags, transformFrom: ValueTransformer, transformTo: ValueTransformer) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bindproperty(sourceproperty:target:targetproperty:flags:)","title":"func bindProperty<ObjectT>(sourceProperty: UnsafePointer<gchar>!, target: ObjectT, targetProperty: UnsafePointer<gchar>!, flags: BindingFlags) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bindpropertyfull(sourceproperty:target:targetproperty:flags:transformto:transformfrom:userdata:notify:)","title":"func bindPropertyFull<ObjectT>(sourceProperty: UnsafePointer<gchar>!, target: ObjectT, targetProperty: UnsafePointer<gchar>!, flags: BindingFlags, transformTo: GBindingTransformFunc?, transformFrom: GBindingTransformFunc?, userData: gpointer?, notify: GDestroyNotify?) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/bindpropertywithclosures(sourceproperty:target:targetproperty:flags:transformto:transformfrom:)","title":"func bindPropertyWithClosures<ClosureT, ObjectT>(sourceProperty: UnsafePointer<gchar>!, target: ObjectT, targetProperty: UnsafePointer<gchar>!, flags: BindingFlags, transformTo: ClosureT, transformFrom: ClosureT) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/cclosurenewobject(callbackfunc:)","title":"func cclosureNewObject(callbackFunc: GCallback) -> ClosureRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/cclosurenewobjectswap(callbackfunc:)","title":"func cclosureNewObjectSwap(callbackFunc: GCallback) -> ClosureRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/clearsignalhandler(handleridptr:)","title":"func clearSignalHandler(handlerIDPtr: UnsafeMutablePointer<gulong>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/connect(_:flags:handler:)","title":"func connect<S>(S, flags: ConnectFlags, handler: SignalHandler) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/connect(signal:flags:data:destroydata:signalhandler:)-4yx4v","title":"func connect(signal: ObjectSignalName, flags: ConnectFlags, data: gpointer!, destroyData: GClosureNotify?, signalHandler: GCallback) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/connect(signal:flags:handler:)-5uds0","title":"func connect(signal: ObjectSignalName, flags: ConnectFlags, handler: SignalHandler) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/connectsignal(_:flags:data:destroydata:handler:)","title":"func connectSignal<S>(S, flags: ConnectFlags, data: gpointer!, destroyData: GClosureNotify?, handler: GCallback) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/dupdata(key:dupfunc:userdata:)","title":"func dupData(key: UnsafePointer<gchar>!, dupFunc: GDuplicateFunc?, userData: gpointer?) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/dupqdata(quark:dupfunc:userdata:)","title":"func dupQdata(quark: GQuark, dupFunc: GDuplicateFunc?, userData: gpointer?) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/emit(_:_:)","title":"func emit<S>(S, CVarArg...)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/emit(_:arguments:)","title":"func emit<S>(S, arguments: [CVarArg])","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/emit(signal:detail:_:)","title":"func emit(signal: Int, detail: GQuark, CVarArg...)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/emit(signal:detail:arguments:)","title":"func emit(signal: Int, detail: GQuark, arguments: [CVarArg])","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/forcefloating()","title":"func forceFloating()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/freeze(context:)","title":"func freeze(context: UnsafeMutablePointer<GObjectNotifyContext>?) -> UnsafeMutablePointer<GObjectNotifyQueue>?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/freezenotify()","title":"func freezeNotify()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getdata(key:)","title":"func getData(key: UnsafePointer<gchar>!) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getproperty(propertyname:value:)","title":"func getProperty<ValueT>(propertyName: UnsafePointer<gchar>!, value: ValueT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getqdata(quark:)","title":"func getQdata(quark: GQuark) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getvalist(firstpropertyname:varargs:)","title":"func getValist(firstPropertyName: UnsafePointer<gchar>!, varArgs: CVaListPointer)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/getv(nproperties:names:values:)","title":"func getv(nProperties: Int, names: UnsafeMutablePointer<UnsafePointer<gchar>?>!, values: UnsafeMutablePointer<GValue>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/notify(propertyname:)","title":"func notify(propertyName: UnsafePointer<gchar>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/notifyby(pspec:)","title":"func notifyBy<ParamSpecT>(pspec: ParamSpecT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/onnotify(flags:handler:)","title":"func onNotify(flags: ConnectFlags, handler: (ObjectRef, ParamSpecRef) -> Void) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/ref()","title":"func ref() -> ObjectRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/refsink()","title":"func refSink() -> ObjectRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/removetoggleref(notify:data:)","title":"func removeToggleRef(notify: GToggleNotify?, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/removeweakpointer(weakpointerlocation:)","title":"func removeWeakPointer(weakPointerLocation: UnsafeMutablePointer<gpointer?>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/replacedata(key:oldval:newval:destroy:olddestroy:)","title":"func replaceData(key: UnsafePointer<gchar>!, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, oldDestroy: UnsafeMutablePointer<GDestroyNotify?>!) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/replaceqdata(quark:oldval:newval:destroy:olddestroy:)","title":"func replaceQdata(quark: GQuark, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, oldDestroy: UnsafeMutablePointer<GDestroyNotify?>!) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/rundispose()","title":"func runDispose()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setdata(key:data:)","title":"func setData(key: UnsafePointer<gchar>!, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setdatafull(key:data:destroy:)","title":"func setDataFull(key: UnsafePointer<gchar>!, data: gpointer?, destroy: GDestroyNotify?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setproperty(propertyname:value:)","title":"func setProperty<ValueT>(propertyName: UnsafePointer<gchar>!, value: ValueT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setqdata(quark:data:)","title":"func setQdata(quark: GQuark, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setqdatafull(quark:data:destroy:)","title":"func setQdataFull(quark: GQuark, data: gpointer?, destroy: GDestroyNotify?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setvalist(firstpropertyname:varargs:)","title":"func setValist(firstPropertyName: UnsafePointer<gchar>!, varArgs: CVaListPointer)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/setv(nproperties:names:values:)","title":"func setv(nProperties: Int, names: UnsafeMutablePointer<UnsafePointer<gchar>?>!, values: UnsafePointer<GValue>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalconnectclosure(detailedsignal:closure:after:)","title":"func signalConnectClosure<ClosureT>(detailedSignal: UnsafePointer<gchar>!, closure: ClosureT, after: Bool) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalconnectclosurebyid(signalid:detail:closure:after:)","title":"func signalConnectClosureByID<ClosureT>(signalID: Int, detail: GQuark, closure: ClosureT, after: Bool) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalconnectdata(detailedsignal:chandler:data:destroydata:connectflags:)","title":"func signalConnectData(detailedSignal: UnsafePointer<gchar>!, cHandler: GCallback, data: gpointer?, destroyData: GClosureNotify?, connectFlags: ConnectFlags) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalconnectobject(instance:detailedsignal:chandler:connectflags:)","title":"func signalConnectObject<TypeInstanceT>(instance: TypeInstanceT, detailedSignal: UnsafePointer<gchar>!, cHandler: GCallback, connectFlags: ConnectFlags) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalgetinvocationhint()","title":"func signalGetInvocationHint() -> SignalInvocationHintRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlerblock(handlerid:)","title":"func signalHandlerBlock(handlerID: Int)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlerdisconnect(handlerid:)","title":"func signalHandlerDisconnect(handlerID: Int)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlerfind(mask:signalid:detail:closure:func:data:)","title":"func signalHandlerFind(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlerisconnected(handlerid:)","title":"func signalHandlerIsConnected(handlerID: Int) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlerunblock(handlerid:)","title":"func signalHandlerUnblock(handlerID: Int)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlersblockmatched(mask:signalid:detail:closure:func:data:)","title":"func signalHandlersBlockMatched(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlersdestroy()","title":"func signalHandlersDestroy()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlersdisconnectmatched(mask:signalid:detail:closure:func:data:)","title":"func signalHandlersDisconnectMatched(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhandlersunblockmatched(mask:signalid:detail:closure:func:data:)","title":"func signalHandlersUnblockMatched(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalhashandlerpending(signalid:detail:maybeblocked:)","title":"func signalHasHandlerPending(signalID: Int, detail: GQuark, mayBeBlocked: Bool) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalstopemission(signalid:detail:)","title":"func signalStopEmission(signalID: Int, detail: GQuark)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/signalstopemissionbyname(detailedsignal:)","title":"func signalStopEmissionByName(detailedSignal: UnsafePointer<gchar>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/stealdata(key:)","title":"func stealData(key: UnsafePointer<gchar>!) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/stealqdata(quark:)","title":"func stealQdata(quark: GQuark) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/takeref()","title":"func takeRef() -> ObjectRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/thaw(queue:)","title":"func thaw(queue: UnsafeMutablePointer<GObjectNotifyQueue>)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/thawnotify()","title":"func thawNotify()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/unref()","title":"func unref()","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/watch(closure:)","title":"func watch<ClosureT>(closure: ClosureT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/weakref(notify:data:)","title":"func weakRef(notify: GWeakNotify?, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/weakunref(notify:data:)","title":"func weakUnref(notify: GWeakNotify?, data: gpointer?)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/notifysignal","title":"static var notifySignal: ObjectSignalName","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapref\/new(_:)","title":"static func new(GType) -> Object!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/new(type:)","title":"static func new(type: GType) -> gpointer!","type":"method"},{"path":"\/documentation\/pangocairo\/fontmapref\/newreferenceto(instanceof:)","title":"static func newReferenceTo(instanceOf: GType) -> ObjectRef!","type":"method"}],"path":"\/documentation\/pangocairo\/fontmapref\/objectprotocol-implementations","title":"ObjectProtocol Implementations","type":"symbol"}],"path":"\/documentation\/pangocairo\/fontmapref","title":"FontMapRef","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/init(_:)-2n0uz","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(_:)-39nr7","title":"init!(UnsafeMutablePointer<PangoCairoFont>?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(_:)-5xr9n","title":"init!(UnsafePointer<PangoCairoFont>?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(_:)-66wan","title":"init(UnsafePointer<PangoCairoFont>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(_:)-7act6","title":"init(UnsafeMutablePointer<PangoCairoFont>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(cpointer:)","title":"init<T>(cPointer: UnsafeMutablePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(constpointer:)","title":"init<T>(constPointer: UnsafePointer<T>)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(gconstpointer:)","title":"init!(gconstpointer: gconstpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(gpointer:)","title":"init!(gpointer: gpointer?)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(mutating:)","title":"init(mutating: UnsafeRawPointer)","type":"init"},{"path":"\/documentation\/pangocairo\/fontref\/init(opaquepointer:)","title":"init(opaquePointer: OpaquePointer)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/ptr","title":"let ptr: UnsafeMutableRawPointer!","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/unowned(_:)","title":"static func unowned<T>(T) -> FontRef","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/face","title":"var face: FontFaceRef!","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/fontmap","title":"var fontMap: FontMapRef!","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/font_ptr","title":"var font_ptr: UnsafeMutablePointer<PangoCairoFont>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/hbfont","title":"var hbFont: font_tRef!","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/languages","title":"var languages: UnsafeMutablePointer<UnsafeMutablePointer<PangoLanguage>?>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/parentinstance","title":"var parentInstance: GObject","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/scaledfont","title":"var scaledFont: ScaledFontRef!","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/describe()","title":"func describe() -> FontDescriptionRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/describewithabsolutesize()","title":"func describeWithAbsoluteSize() -> FontDescriptionRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/get(features:len:numfeatures:)","title":"func get(features: UnsafeMutablePointer<hb_feature_t>!, len: Int, numFeatures: UnsafeMutablePointer<guint>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getcoverage(language:)","title":"func getCoverage<LanguageT>(language: LanguageT) -> CoverageRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getface()","title":"func getFace() -> FontFaceRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getfontmap()","title":"func getFontMap() -> FontMapRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getglyphextents(glyph:inkrect:logicalrect:)","title":"func getGlyphExtents(glyph: PangoGlyph, inkRect: RectangleRef?, logicalRect: RectangleRef?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/gethbfont()","title":"func getHbFont() -> font_tRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getlanguages()","title":"func getLanguages() -> UnsafeMutablePointer<UnsafeMutablePointer<PangoLanguage>?>!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getmetrics(language:)","title":"func getMetrics(language: LanguageRef?) -> FontMetricsRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getscaledfont()","title":"func getScaledFont() -> ScaledFontRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/haschar(wc:)","title":"func hasChar(wc: gunichar) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/serialize()","title":"func serialize() -> BytesRef!","type":"method"}],"path":"\/documentation\/pangocairo\/fontref\/fontprotocol-implementations","title":"FontProtocol Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/init(raw:)","title":"init(raw: UnsafeMutableRawPointer)","type":"init"}],"path":"\/documentation\/pangocairo\/fontref\/gweakcapturing-implementations","title":"GWeakCapturing Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/gtypeinstance","title":"var gTypeInstance: GTypeInstance","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/isfloating","title":"var isFloating: Bool","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/object_ptr","title":"var object_ptr: UnsafeMutablePointer<GObject>!","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/swiftobj","title":"var swiftObj: AnyObject?","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/type","title":"var type: GType","type":"property"},{"path":"\/documentation\/pangocairo\/fontref\/typename","title":"var typeName: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/addtoggleref(notify:data:)","title":"func addToggleRef(notify: GToggleNotify?, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/addweakobserver(_:)","title":"func addWeakObserver((gpointer) -> Void) -> AnyObject","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/addweakpointer(weakpointerlocation:)","title":"func addWeakPointer(weakPointerLocation: UnsafeMutablePointer<gpointer?>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/bind(_:target:property:flags:)","title":"func bind<P, Q, T>(P, target: T, property: Q, flags: BindingFlags) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/bind(_:to:property:flags:convertfrom:convertto:)-4vbov","title":"func bind<P, Q, T, U, V>(P, to: T, property: Q, flags: BindingFlags, convertFrom: (U?) -> V?, convertTo: (V?) -> U?) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/bind(_:to:property:flags:convertfrom:convertto:)-7rgmc","title":"func bind<P, Q, T, U, V>(P, to: T, property: Q, flags: BindingFlags, convertFrom: (U) -> V?, convertTo: (V) -> U?) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/bind(_:to:property:flags:transformfrom:transformto:)","title":"func bind<P, Q, T>(P, to: T, property: Q, flags: BindingFlags, transformFrom: ValueTransformer, transformTo: ValueTransformer) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/bindproperty(sourceproperty:target:targetproperty:flags:)","title":"func bindProperty<ObjectT>(sourceProperty: UnsafePointer<gchar>!, target: ObjectT, targetProperty: UnsafePointer<gchar>!, flags: BindingFlags) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/bindpropertyfull(sourceproperty:target:targetproperty:flags:transformto:transformfrom:userdata:notify:)","title":"func bindPropertyFull<ObjectT>(sourceProperty: UnsafePointer<gchar>!, target: ObjectT, targetProperty: UnsafePointer<gchar>!, flags: BindingFlags, transformTo: GBindingTransformFunc?, transformFrom: GBindingTransformFunc?, userData: gpointer?, notify: GDestroyNotify?) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/bindpropertywithclosures(sourceproperty:target:targetproperty:flags:transformto:transformfrom:)","title":"func bindPropertyWithClosures<ClosureT, ObjectT>(sourceProperty: UnsafePointer<gchar>!, target: ObjectT, targetProperty: UnsafePointer<gchar>!, flags: BindingFlags, transformTo: ClosureT, transformFrom: ClosureT) -> BindingRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/cclosurenewobject(callbackfunc:)","title":"func cclosureNewObject(callbackFunc: GCallback) -> ClosureRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/cclosurenewobjectswap(callbackfunc:)","title":"func cclosureNewObjectSwap(callbackFunc: GCallback) -> ClosureRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/clearsignalhandler(handleridptr:)","title":"func clearSignalHandler(handlerIDPtr: UnsafeMutablePointer<gulong>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/connect(_:flags:handler:)","title":"func connect<S>(S, flags: ConnectFlags, handler: SignalHandler) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/connect(signal:flags:data:destroydata:signalhandler:)","title":"func connect(signal: ObjectSignalName, flags: ConnectFlags, data: gpointer!, destroyData: GClosureNotify?, signalHandler: GCallback) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/connect(signal:flags:handler:)","title":"func connect(signal: ObjectSignalName, flags: ConnectFlags, handler: SignalHandler) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/connectsignal(_:flags:data:destroydata:handler:)","title":"func connectSignal<S>(S, flags: ConnectFlags, data: gpointer!, destroyData: GClosureNotify?, handler: GCallback) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/dupdata(key:dupfunc:userdata:)","title":"func dupData(key: UnsafePointer<gchar>!, dupFunc: GDuplicateFunc?, userData: gpointer?) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/dupqdata(quark:dupfunc:userdata:)","title":"func dupQdata(quark: GQuark, dupFunc: GDuplicateFunc?, userData: gpointer?) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/emit(_:_:)","title":"func emit<S>(S, CVarArg...)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/emit(_:arguments:)","title":"func emit<S>(S, arguments: [CVarArg])","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/emit(signal:detail:_:)","title":"func emit(signal: Int, detail: GQuark, CVarArg...)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/emit(signal:detail:arguments:)","title":"func emit(signal: Int, detail: GQuark, arguments: [CVarArg])","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/forcefloating()","title":"func forceFloating()","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/freeze(context:)","title":"func freeze(context: UnsafeMutablePointer<GObjectNotifyContext>?) -> UnsafeMutablePointer<GObjectNotifyQueue>?","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/freezenotify()","title":"func freezeNotify()","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getdata(key:)","title":"func getData(key: UnsafePointer<gchar>!) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getproperty(propertyname:value:)","title":"func getProperty<ValueT>(propertyName: UnsafePointer<gchar>!, value: ValueT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getqdata(quark:)","title":"func getQdata(quark: GQuark) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getvalist(firstpropertyname:varargs:)","title":"func getValist(firstPropertyName: UnsafePointer<gchar>!, varArgs: CVaListPointer)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/getv(nproperties:names:values:)","title":"func getv(nProperties: Int, names: UnsafeMutablePointer<UnsafePointer<gchar>?>!, values: UnsafeMutablePointer<GValue>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/notify(propertyname:)","title":"func notify(propertyName: UnsafePointer<gchar>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/notifyby(pspec:)","title":"func notifyBy<ParamSpecT>(pspec: ParamSpecT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/onnotify(flags:handler:)","title":"func onNotify(flags: ConnectFlags, handler: (ObjectRef, ParamSpecRef) -> Void) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/ref()","title":"func ref() -> ObjectRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/refsink()","title":"func refSink() -> ObjectRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/removetoggleref(notify:data:)","title":"func removeToggleRef(notify: GToggleNotify?, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/removeweakpointer(weakpointerlocation:)","title":"func removeWeakPointer(weakPointerLocation: UnsafeMutablePointer<gpointer?>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/replacedata(key:oldval:newval:destroy:olddestroy:)","title":"func replaceData(key: UnsafePointer<gchar>!, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, oldDestroy: UnsafeMutablePointer<GDestroyNotify?>!) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/replaceqdata(quark:oldval:newval:destroy:olddestroy:)","title":"func replaceQdata(quark: GQuark, oldval: gpointer?, newval: gpointer?, destroy: GDestroyNotify?, oldDestroy: UnsafeMutablePointer<GDestroyNotify?>!) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/rundispose()","title":"func runDispose()","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/setdata(key:data:)","title":"func setData(key: UnsafePointer<gchar>!, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/setdatafull(key:data:destroy:)","title":"func setDataFull(key: UnsafePointer<gchar>!, data: gpointer?, destroy: GDestroyNotify?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/setproperty(propertyname:value:)","title":"func setProperty<ValueT>(propertyName: UnsafePointer<gchar>!, value: ValueT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/setqdata(quark:data:)","title":"func setQdata(quark: GQuark, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/setqdatafull(quark:data:destroy:)","title":"func setQdataFull(quark: GQuark, data: gpointer?, destroy: GDestroyNotify?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/setvalist(firstpropertyname:varargs:)","title":"func setValist(firstPropertyName: UnsafePointer<gchar>!, varArgs: CVaListPointer)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/setv(nproperties:names:values:)","title":"func setv(nProperties: Int, names: UnsafeMutablePointer<UnsafePointer<gchar>?>!, values: UnsafePointer<GValue>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalconnectclosure(detailedsignal:closure:after:)","title":"func signalConnectClosure<ClosureT>(detailedSignal: UnsafePointer<gchar>!, closure: ClosureT, after: Bool) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalconnectclosurebyid(signalid:detail:closure:after:)","title":"func signalConnectClosureByID<ClosureT>(signalID: Int, detail: GQuark, closure: ClosureT, after: Bool) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalconnectdata(detailedsignal:chandler:data:destroydata:connectflags:)","title":"func signalConnectData(detailedSignal: UnsafePointer<gchar>!, cHandler: GCallback, data: gpointer?, destroyData: GClosureNotify?, connectFlags: ConnectFlags) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalconnectobject(instance:detailedsignal:chandler:connectflags:)","title":"func signalConnectObject<TypeInstanceT>(instance: TypeInstanceT, detailedSignal: UnsafePointer<gchar>!, cHandler: GCallback, connectFlags: ConnectFlags) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalgetinvocationhint()","title":"func signalGetInvocationHint() -> SignalInvocationHintRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlerblock(handlerid:)","title":"func signalHandlerBlock(handlerID: Int)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlerdisconnect(handlerid:)","title":"func signalHandlerDisconnect(handlerID: Int)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlerfind(mask:signalid:detail:closure:func:data:)","title":"func signalHandlerFind(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlerisconnected(handlerid:)","title":"func signalHandlerIsConnected(handlerID: Int) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlerunblock(handlerid:)","title":"func signalHandlerUnblock(handlerID: Int)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlersblockmatched(mask:signalid:detail:closure:func:data:)","title":"func signalHandlersBlockMatched(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlersdestroy()","title":"func signalHandlersDestroy()","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlersdisconnectmatched(mask:signalid:detail:closure:func:data:)","title":"func signalHandlersDisconnectMatched(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhandlersunblockmatched(mask:signalid:detail:closure:func:data:)","title":"func signalHandlersUnblockMatched(mask: SignalMatchType, signalID: Int, detail: GQuark, closure: ClosureRef?, func: gpointer?, data: gpointer?) -> Int","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalhashandlerpending(signalid:detail:maybeblocked:)","title":"func signalHasHandlerPending(signalID: Int, detail: GQuark, mayBeBlocked: Bool) -> Bool","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalstopemission(signalid:detail:)","title":"func signalStopEmission(signalID: Int, detail: GQuark)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/signalstopemissionbyname(detailedsignal:)","title":"func signalStopEmissionByName(detailedSignal: UnsafePointer<gchar>!)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/stealdata(key:)","title":"func stealData(key: UnsafePointer<gchar>!) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/stealqdata(quark:)","title":"func stealQdata(quark: GQuark) -> gpointer?","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/takeref()","title":"func takeRef() -> ObjectRef!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/thaw(queue:)","title":"func thaw(queue: UnsafeMutablePointer<GObjectNotifyQueue>)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/thawnotify()","title":"func thawNotify()","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/unref()","title":"func unref()","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/watch(closure:)","title":"func watch<ClosureT>(closure: ClosureT)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/weakref(notify:data:)","title":"func weakRef(notify: GWeakNotify?, data: gpointer?)","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/weakunref(notify:data:)","title":"func weakUnref(notify: GWeakNotify?, data: gpointer?)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/notifysignal","title":"static var notifySignal: ObjectSignalName","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontref\/new(_:)","title":"static func new(GType) -> Object!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/new(type:)","title":"static func new(type: GType) -> gpointer!","type":"method"},{"path":"\/documentation\/pangocairo\/fontref\/newreferenceto(instanceof:)","title":"static func newReferenceTo(instanceOf: GType) -> ObjectRef!","type":"method"}],"path":"\/documentation\/pangocairo\/fontref\/objectprotocol-implementations","title":"ObjectProtocol Implementations","type":"symbol"}],"path":"\/documentation\/pangocairo\/fontref","title":"FontRef","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/contextgetfontoptions(context:)","title":"func contextGetFontOptions<PangoContextT>(context: PangoContextT) -> FontOptionsRef!","type":"func"},{"path":"\/documentation\/pangocairo\/contextgetresolution(context:)","title":"func contextGetResolution<PangoContextT>(context: PangoContextT) -> CDouble","type":"func"},{"path":"\/documentation\/pangocairo\/contextgetshaperenderer(context:data:)","title":"func contextGetShapeRenderer<PangoContextT>(context: PangoContextT, data: UnsafeMutablePointer<gpointer?>?) -> PangoCairoShapeRendererFunc!","type":"func"},{"path":"\/documentation\/pangocairo\/contextsetfontoptions(context:options:)-4ejwa","title":"func contextSetFontOptions<PangoContextT>(context: PangoContextT, options: FontOptionsRef?)","type":"func"},{"path":"\/documentation\/pangocairo\/contextsetfontoptions(context:options:)-8jabb","title":"func contextSetFontOptions<PangoContextT, cairoFontOptionsT>(context: PangoContextT, options: cairoFontOptionsT?)","type":"func"},{"path":"\/documentation\/pangocairo\/contextsetresolution(context:dpi:)","title":"func contextSetResolution<PangoContextT>(context: PangoContextT, dpi: CDouble)","type":"func"},{"path":"\/documentation\/pangocairo\/contextsetshaperenderer(context:func:data:dnotify:)","title":"func contextSetShapeRenderer<PangoContextT>(context: PangoContextT, func: PangoCairoShapeRendererFunc?, data: gpointer?, dnotify: GDestroyNotify?)","type":"func"},{"path":"\/documentation\/pangocairo\/createcontext(cr:)","title":"func createContext<cairoContextT>(cr: cairoContextT) -> ContextRef!","type":"func"},{"path":"\/documentation\/pangocairo\/createlayout(cr:)","title":"func createLayout<cairoContextT>(cr: cairoContextT) -> LayoutRef!","type":"func"},{"path":"\/documentation\/pangocairo\/errorunderlinepath(cr:x:y:width:height:)","title":"func errorUnderlinePath<cairoContextT>(cr: cairoContextT, x: CDouble, y: CDouble, width: CDouble, height: CDouble)","type":"func"},{"path":"\/documentation\/pangocairo\/fontmapgetdefault()","title":"func fontMapGetDefault() -> FontMapRef!","type":"func"},{"path":"\/documentation\/pangocairo\/fontmapnew()","title":"func fontMapNew() -> FontMapRef!","type":"func"},{"path":"\/documentation\/pangocairo\/fontmapnewforfonttype(fonttype:)","title":"func fontMapNewForFontType(fonttype: cairo_font_type_t) -> FontMapRef!","type":"func"},{"path":"\/documentation\/pangocairo\/glyphstringpath(cr:font:glyphs:)","title":"func glyphStringPath<PangoFontT, PangoGlyphStringT, cairoContextT>(cr: cairoContextT, font: PangoFontT, glyphs: PangoGlyphStringT)","type":"func"},{"path":"\/documentation\/pangocairo\/layoutlinepath(cr:line:)","title":"func layoutLinePath<PangoLayoutLineT, cairoContextT>(cr: cairoContextT, line: PangoLayoutLineT)","type":"func"},{"path":"\/documentation\/pangocairo\/layoutpath(cr:layout:)","title":"func layoutPath<PangoLayoutT, cairoContextT>(cr: cairoContextT, layout: PangoLayoutT)","type":"func"},{"path":"\/documentation\/pangocairo\/showerrorunderline(cr:x:y:width:height:)","title":"func showErrorUnderline<cairoContextT>(cr: cairoContextT, x: CDouble, y: CDouble, width: CDouble, height: CDouble)","type":"func"},{"path":"\/documentation\/pangocairo\/showglyphitem(cr:text:glyphitem:)","title":"func showGlyphItem<PangoGlyphItemT, cairoContextT>(cr: cairoContextT, text: UnsafePointer<CChar>!, glyphItem: PangoGlyphItemT)","type":"func"},{"path":"\/documentation\/pangocairo\/showglyphstring(cr:font:glyphs:)","title":"func showGlyphString<PangoFontT, PangoGlyphStringT, cairoContextT>(cr: cairoContextT, font: PangoFontT, glyphs: PangoGlyphStringT)","type":"func"},{"path":"\/documentation\/pangocairo\/showlayout(cr:layout:)","title":"func showLayout<PangoLayoutT, cairoContextT>(cr: cairoContextT, layout: PangoLayoutT)","type":"func"},{"path":"\/documentation\/pangocairo\/showlayoutline(cr:line:)","title":"func showLayoutLine<PangoLayoutLineT, cairoContextT>(cr: cairoContextT, line: PangoLayoutLineT)","type":"func"},{"path":"\/documentation\/pangocairo\/updatecontext(cr:context:)","title":"func updateContext<PangoContextT, cairoContextT>(cr: cairoContextT, context: PangoContextT)","type":"func"},{"path":"\/documentation\/pangocairo\/updatelayout(cr:layout:)","title":"func updateLayout<PangoLayoutT, cairoContextT>(cr: cairoContextT, layout: PangoLayoutT)","type":"func"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/shaperendererfunc","title":"ShapeRendererFunc","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmappropertyname\/itemtype","title":"case itemType","type":"case"},{"path":"\/documentation\/pangocairo\/fontmappropertyname\/nitems","title":"case nItems","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmappropertyname\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmappropertyname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/pangocairo\/fontmappropertyname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmappropertyname\/name","title":"var name: String","type":"property"}],"path":"\/documentation\/pangocairo\/fontmappropertyname\/propertynameprotocol-implementations","title":"PropertyNameProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmappropertyname\/hashvalue","title":"var hashValue: Int","type":"property"}],"path":"\/documentation\/pangocairo\/fontmappropertyname\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/pangocairo\/fontmappropertyname","title":"FontMapPropertyName","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapsignalname\/notify","title":"case notify","type":"case"},{"path":"\/documentation\/pangocairo\/fontmapsignalname\/notifyitemtype","title":"case notifyItemType","type":"case"},{"path":"\/documentation\/pangocairo\/fontmapsignalname\/notifynitems","title":"case notifyNItems","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapsignalname\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapsignalname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/pangocairo\/fontmapsignalname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapsignalname\/hashvalue","title":"var hashValue: Int","type":"property"}],"path":"\/documentation\/pangocairo\/fontmapsignalname\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontmapsignalname\/name","title":"var name: String","type":"property"}],"path":"\/documentation\/pangocairo\/fontmapsignalname\/signalnameprotocol-implementations","title":"SignalNameProtocol Implementations","type":"symbol"}],"path":"\/documentation\/pangocairo\/fontmapsignalname","title":"FontMapSignalName","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontsignalname\/notify","title":"case notify","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontsignalname\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontsignalname\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/pangocairo\/fontsignalname\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontsignalname\/hashvalue","title":"var hashValue: Int","type":"property"}],"path":"\/documentation\/pangocairo\/fontsignalname\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/pangocairo\/fontsignalname\/name","title":"var name: String","type":"property"}],"path":"\/documentation\/pangocairo\/fontsignalname\/signalnameprotocol-implementations","title":"SignalNameProtocol Implementations","type":"symbol"}],"path":"\/documentation\/pangocairo\/fontsignalname","title":"FontSignalName","type":"enum"}],"path":"\/documentation\/pangocairo","title":"PangoCairo","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}