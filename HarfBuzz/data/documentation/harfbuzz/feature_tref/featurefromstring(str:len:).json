{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"featureFromString"},{"kind":"text","text":"("},{"kind":"externalParam","text":"str"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CChar","preciseIdentifier":"s:s5CChara"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"len"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"hb_bool_t","preciseIdentifier":"c:@T@hb_bool_t"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The format for specifying feature strings follows. All valid CSS"},{"type":"text","text":" "},{"type":"text","text":"font-feature-settings values other than ‘normal’ and the global values are"},{"type":"text","text":" "},{"type":"text","text":"also accepted, though not documented below. CSS string escapes are not"},{"type":"text","text":" "},{"type":"text","text":"supported."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The range indices refer to the positions between Unicode characters. The"},{"type":"text","text":" "},{"type":"text","text":"position before the first character is always 0."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The format is Python-esque.  Here is how it all works:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"<informaltable pgwide=‘1’ align=‘left’ frame=‘none’>"},{"type":"text","text":" "},{"type":"text","text":"<tgroup cols=‘5’>"},{"type":"text","text":" "},{"type":"text","text":"<thead>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>Syntax<\/entry>    <entry>Value<\/entry> <entry>Start<\/entry> <entry>End<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<\/thead>"},{"type":"text","text":" "},{"type":"text","text":"<tbody>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>Setting value:<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern<\/entry>      <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>+kern<\/entry>     <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>-kern<\/entry>     <entry>0<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature off<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern=0<\/entry>    <entry>0<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature off<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern=1<\/entry>    <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>aalt=2<\/entry>    <entry>2<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Choose 2nd alternate<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>Setting index:<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern[]<\/entry>    <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern[:]<\/entry>   <entry>1<\/entry>     <entry>0<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern[5:]<\/entry>  <entry>1<\/entry>     <entry>5<\/entry>      <entry>∞<\/entry>   <entry>Turn feature on, partial<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern[:5]<\/entry>  <entry>1<\/entry>     <entry>0<\/entry>      <entry>5<\/entry>   <entry>Turn feature on, partial<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern[3:5]<\/entry> <entry>1<\/entry>     <entry>3<\/entry>      <entry>5<\/entry>   <entry>Turn feature on, range<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>kern[3]<\/entry>   <entry>1<\/entry>     <entry>3<\/entry>      <entry>3+1<\/entry> <entry>Turn feature on, single char<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>Mixing it all:<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<row><entry>aalt[3:5]=2<\/entry> <entry>2<\/entry>   <entry>3<\/entry>      <entry>5<\/entry>   <entry>Turn 2nd alternate on for range<\/entry><\/row>"},{"type":"text","text":" "},{"type":"text","text":"<\/tbody>"},{"type":"text","text":" "},{"type":"text","text":"<\/tgroup>"},{"type":"text","text":" "},{"type":"text","text":"<\/informaltable>"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/harfbuzz\/feature_tref\/featurefromstring(str:len:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/HarfBuzz\/documentation\/HarfBuzz\/feature_tRef\/featureFromString(str:len:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Parses a string into a "},{"type":"codeVoice","code":"hb_feature_t"},{"type":"text","text":"."}],"kind":"symbol","metadata":{"role":"symbol","title":"featureFromString(str:len:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"featureFromString"},{"kind":"text","text":"("},{"kind":"externalParam","text":"str"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CChar","preciseIdentifier":"s:s5CChara"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"len"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"hb_bool_t","preciseIdentifier":"c:@T@hb_bool_t"}],"symbolKind":"method","externalID":"s:8HarfBuzz17feature_tProtocolPAAE0C10FromString3str3lens5Int32VSPys4Int8VGSg_SitF::SYNTHESIZED::s:8HarfBuzz12feature_tRefV","extendedModule":"HarfBuzz","modules":[{"name":"HarfBuzz"}]},"hierarchy":{"paths":[["doc:\/\/HarfBuzz\/documentation\/HarfBuzz","doc:\/\/HarfBuzz\/documentation\/HarfBuzz\/feature_tRef","doc:\/\/HarfBuzz\/documentation\/HarfBuzz\/feature_tRef\/feature_tProtocol-Implementations"]]},"references":{"doc://HarfBuzz/documentation/HarfBuzz/feature_tRef/feature_tProtocol-Implementations":{"role":"collectionGroup","title":"feature_tProtocol Implementations","abstract":[],"identifier":"doc:\/\/HarfBuzz\/documentation\/HarfBuzz\/feature_tRef\/feature_tProtocol-Implementations","kind":"article","type":"topic","url":"\/documentation\/harfbuzz\/feature_tref\/feature_tprotocol-implementations"},"doc://HarfBuzz/documentation/HarfBuzz/feature_tRef/featureFromString(str:len:)":{"role":"symbol","title":"featureFromString(str:len:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"featureFromString"},{"kind":"text","text":"("},{"kind":"externalParam","text":"str"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"CChar","preciseIdentifier":"s:s5CChara"},{"kind":"text","text":">!, "},{"kind":"externalParam","text":"len"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"hb_bool_t","preciseIdentifier":"c:@T@hb_bool_t"}],"abstract":[{"type":"text","text":"Parses a string into a "},{"type":"codeVoice","code":"hb_feature_t"},{"type":"text","text":"."}],"identifier":"doc:\/\/HarfBuzz\/documentation\/HarfBuzz\/feature_tRef\/featureFromString(str:len:)","kind":"symbol","type":"topic","url":"\/documentation\/harfbuzz\/feature_tref\/featurefromstring(str:len:)"},"doc://HarfBuzz/documentation/HarfBuzz":{"role":"collection","title":"HarfBuzz","abstract":[],"identifier":"doc:\/\/HarfBuzz\/documentation\/HarfBuzz","kind":"symbol","type":"topic","url":"\/documentation\/harfbuzz"},"doc://HarfBuzz/documentation/HarfBuzz/feature_tRef":{"role":"symbol","title":"feature_tRef","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"feature_tRef"}],"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"hb_feature_t"},{"type":"text","text":" is the structure that holds information about requested"},{"type":"text","text":" "},{"type":"text","text":"feature application. The feature will be applied with the given value to all"},{"type":"text","text":" "},{"type":"text","text":"glyphs which are in clusters between "},{"type":"codeVoice","code":"start"},{"type":"text","text":" (inclusive) and "},{"type":"codeVoice","code":"end"},{"type":"text","text":" (exclusive)."},{"type":"text","text":" "},{"type":"text","text":"Setting start to "},{"type":"codeVoice","code":"HB_FEATURE_GLOBAL_START"},{"type":"text","text":" and end to "},{"type":"codeVoice","code":"HB_FEATURE_GLOBAL_END"},{"type":"text","text":" "},{"type":"text","text":"specifies that the feature always applies to the entire buffer."}],"identifier":"doc:\/\/HarfBuzz\/documentation\/HarfBuzz\/feature_tRef","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"feature_tRef"}],"url":"\/documentation\/harfbuzz\/feature_tref"}}}